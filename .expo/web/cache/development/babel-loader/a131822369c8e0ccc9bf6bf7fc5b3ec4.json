{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { useEffect } from \"react\";\nimport \"../global\";\nimport { firebase } from \"../firebase\";\n\nvar SendNotification = function SendNotification() {\n  useEffect(function () {\n    var cancel = false;\n    registerForPushNotificationsAsync().then(function (token) {\n      if (cancel) return;\n      setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      cancel = true;\n    };\n  }, []);\n};\n\nvar sentData = function sentData(msg, fromPage) {\n  var today = new Date();\n  var hours = (today.getHours() < 10 ? \"0\" : \"\") + today.getHours();\n  var minutes = (today.getMinutes() < 10 ? \"0\" : \"\") + today.getMinutes();\n  var seconds = (today.getSeconds() < 10 ? \"0\" : \"\") + today.getSeconds();\n  firebase.firestore().collection(\"notifications\").add({\n    id: notificationId,\n    userID: authUserID,\n    userName: authUserID,\n    heading: fromPage,\n    message: msg,\n    time: hours + \":\" + minutes + \":\" + seconds,\n    date: today.getDay() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\n    day: \" \",\n    body: \"notification sent at \" + hours + \":\" + minutes + \":\" + seconds\n  });\n  notificationId = notificationId + 1;\n};\n\nexport function EventNotification() {\n  var events, snapshot;\n  return _regeneratorRuntime.async(function EventNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          events = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"events\").get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              var start = doc.data().start_date,\n                  end = doc.data().end_date,\n                  name = doc.data().name,\n                  id = doc.data().id,\n                  programme = doc.data().programme,\n                  key = events.length + 1;\n              var date = new Date();\n              var date2 = new Date(start);\n              var diff = Math.ceil((date2 - date) / (1000 * 3600 * 24));\n\n              if (Math.abs(diff) < 90) {\n                events.push({\n                  name: name,\n                  key: key,\n                  start: start,\n                  end: end,\n                  id: id,\n                  programme: programme\n                });\n              }\n            });\n          }));\n\n        case 3:\n          snapshot = _context.sent;\n          events.map(function (event, key) {\n            var date1 = new Date(event.start);\n            var date2 = new Date();\n            var timeLeft = date1.getTime() - date2.getTime();\n            var daysLeft = timeLeft / (1000 * 3600 * 24);\n\n            if (Math.floor(daysLeft) >= 0) {\n              if (Math.floor(daysLeft) == 1) {\n                var msg = {\n                  title: \"Event\",\n                  body: event.programme + \" event tomorrow\",\n                  data: {\n                    data: \"goes here\"\n                  }\n                };\n                schedulePushNotification(msg, \"Event\");\n              }\n\n              if (Math.floor(daysLeft) == 0) {\n                var _msg = {\n                  title: \"Event\",\n                  body: event.programme + \" event today\",\n                  data: {\n                    data: \"goes here\"\n                  }\n                };\n                schedulePushNotification(_msg, \"Event\");\n              }\n            }\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function schedulePushNotification(msg, fromPage) {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          Notifications.setNotificationHandler({\n            handleNotification: function handleNotification() {\n              return _regeneratorRuntime.async(function handleNotification$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      return _context2.abrupt(\"return\", {\n                        shouldShowAlert: true,\n                        shouldPlaySound: true,\n                        shouldSetBadge: true\n                      });\n\n                    case 1:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }\n          });\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: msg.title,\n              body: msg.body,\n              data: msg.data\n            },\n            trigger: {\n              seconds: 1\n            }\n          }));\n\n        case 3:\n          sentData(msg, fromPage);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Device.isDevice) {\n            _context4.next = 18;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context4.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== \"granted\")) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context4.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== \"granted\")) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert(\"Failed to get push token for push notification!\");\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n\n        case 18:\n          if (!(Platform.OS === \"android\")) {\n            _context4.next = 21;\n            break;\n          }\n\n          _context4.next = 21;\n          return _regeneratorRuntime.awrap(Notifications.setNotificationChannelAsync(\"default\", {\n            name: \"default\",\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: \"#FF231F7C\"\n          }));\n\n        case 21:\n          return _context4.abrupt(\"return\", token);\n\n        case 22:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["Device","Notifications","useEffect","firebase","SendNotification","cancel","registerForPushNotificationsAsync","then","token","setExpoPushToken","notificationListener","current","addNotificationReceivedListener","notification","setNotification","responseListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","sentData","msg","fromPage","today","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","firestore","collection","add","id","notificationId","userID","authUserID","userName","heading","message","time","date","getDay","getMonth","getFullYear","day","body","EventNotification","events","get","querySnapshot","forEach","doc","start","data","start_date","end","end_date","name","programme","key","length","date2","diff","Math","ceil","abs","push","snapshot","map","event","date1","timeLeft","getTime","daysLeft","floor","title","schedulePushNotification","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","scheduleNotificationAsync","content","trigger","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"sources":["/home/cipher73/Coding Projects/Sprint3-final/DFMPC-Student-Placement-System/Screens/SendNotification.js"],"sourcesContent":["import * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport { useEffect } from \"react\";\nimport \"../global\";\nimport { firebase } from \"../firebase\";\n\nconst SendNotification = () => {\n  useEffect(() => {\n    let cancel = false;\n    registerForPushNotificationsAsync().then((token) => {\n      if (cancel) return;\n      setExpoPushToken(token);\n    });\n\n    notificationListener.current =\n      Notifications.addNotificationReceivedListener((notification) => {\n        setNotification(notification);\n      });\n\n    responseListener.current =\n      Notifications.addNotificationResponseReceivedListener((response) => {\n        console.log(response);\n      });\n\n    return () => {\n      Notifications.removeNotificationSubscription(\n        notificationListener.current\n      );\n      Notifications.removeNotificationSubscription(responseListener.current);\n      cancel = true;\n    };\n  }, []);\n};\n\nconst sentData = (msg, fromPage) => {\n  let today = new Date();\n  let hours = (today.getHours() < 10 ? \"0\" : \"\") + today.getHours();\n  let minutes = (today.getMinutes() < 10 ? \"0\" : \"\") + today.getMinutes();\n  let seconds = (today.getSeconds() < 10 ? \"0\" : \"\") + today.getSeconds();\n\n  firebase\n    .firestore()\n    .collection(\"notifications\")\n    .add({\n      id: notificationId,\n      userID: authUserID,\n      userName: authUserID,\n      heading: fromPage,\n      message: msg,\n      time: hours + \":\" + minutes + \":\" + seconds,\n      date: today.getDay() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\n      day: \" \",\n      body: \"notification sent at \" + hours + \":\" + minutes + \":\" + seconds,\n    });\n  notificationId = notificationId + 1;\n  //console.log(notificationId)\n};\n\n//send events notifications\n\nexport async function EventNotification() {\n  const events = [];\n  const snapshot = await firebase\n    .firestore()\n    .collection(\"events\")\n    .get()\n    .then((querySnapshot) => {\n      querySnapshot.forEach(function (doc) {\n        let start = doc.data().start_date,\n          end = doc.data().end_date,\n          name = doc.data().name,\n          id = doc.data().id,\n          programme = doc.data().programme,\n          key = events.length + 1;\n        let date = new Date();\n        let date2 = new Date(start);\n        let diff = Math.ceil((date2 - date) / (1000 * 3600 * 24));\n        if (Math.abs(diff) < 90) {\n          events.push({\n            name: name,\n            key: key,\n            start: start,\n            end: end,\n            id: id,\n            programme: programme,\n          });\n        }\n      });\n    });\n\n  // check if start date - today is ==1 then event is tomorrow\n  //console.log(events);\n\n  events.map((event, key) => {\n    const date1 = new Date(event.start);\n    const date2 = new Date();\n\n    const timeLeft = date1.getTime() - date2.getTime();\n    const daysLeft = timeLeft / (1000 * 3600 * 24);\n    // console.log(date1)\n  //  console.log(Math.floor(daysLeft));\n    if (Math.floor(daysLeft) >= 0) {\n      if (Math.floor(daysLeft) == 1) {\n        const msg = {\n          title: \"Event\",\n          body: event.programme + \" event tomorrow\",\n          data: { data: \"goes here\" },\n        };\n        schedulePushNotification(msg, \"Event\");\n      }\n\n      if (Math.floor(daysLeft) == 0) {\n        const msg = {\n          title: \"Event\",\n          body: event.programme + \" event today\",\n          data: { data: \"goes here\" },\n        };\n        schedulePushNotification(msg, \"Event\");\n      }\n    }\n  });\n}\n\nexport async function schedulePushNotification(msg, fromPage) {\n  Notifications.setNotificationHandler({\n    handleNotification: async () => ({\n      shouldShowAlert: true,\n      shouldPlaySound: true,\n      shouldSetBadge: true,\n    }),\n  });\n  await Notifications.scheduleNotificationAsync({\n    content: {\n      title: msg.title,\n      body: msg.body,\n      data: msg.data,\n    },\n    trigger: { seconds: 1 },\n  });\n  sentData(msg, fromPage);\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Device.isDevice) {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== \"granted\") {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== \"granted\") {\n      alert(\"Failed to get push token for push notification!\");\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n  }\n\n  if (Platform.OS === \"android\") {\n    await Notifications.setNotificationChannelAsync(\"default\", {\n      name: \"default\",\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: \"#FF231F7C\",\n    });\n  }\n\n  return token;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}