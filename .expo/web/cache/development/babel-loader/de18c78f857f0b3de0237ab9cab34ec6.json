{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\nexport default {\n  getInstallationIdAsync: function getInstallationIdAsync() {\n    var installationId;\n    return _regeneratorRuntime.async(function getInstallationIdAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n              if (!installationId || typeof installationId !== 'string') {\n                installationId = uuidv4();\n                localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n              }\n            } catch (_unused) {\n              installationId = _getFallbackInstallationId();\n            }\n            return _context.abrupt(\"return\", installationId);\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getRegistrationInfoAsync: function getRegistrationInfoAsync() {\n    return _regeneratorRuntime.async(function getRegistrationInfoAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", localStorage.getItem(REGISTRATION_INFO_KEY));\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setRegistrationInfoAsync: function setRegistrationInfoAsync(registrationInfo) {\n    return _regeneratorRuntime.async(function setRegistrationInfoAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            if (registrationInfo) {\n              localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n            } else {\n              localStorage.removeItem(REGISTRATION_INFO_KEY);\n            }\n            _context3.next = 7;\n            break;\n          case 4:\n            _context3.prev = 4;\n            _context3.t0 = _context3[\"catch\"](0);\n            throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', \"Could not modify localStorage to persist auto-registration information: \" + _context3.t0);\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  },\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAInC,IAAMC,mBAAmB,GAAG,oCAAoC;AAChE,IAAMC,qBAAqB,GAAG,sCAAsC;AAGpE,IAAIC,0BAAyB,GAAG,qCAAK;EACnC,IAAMC,qBAAqB,GAAGJ,MAAM,EAAE;EACtCG,0BAAyB,GAAG;IAAA,OAAMC,qBAAqB;EAAA;AACzD,CAAC;AAED,eAAe;EACbC,sBAAsB,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAGtB,IAAI;cACFC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACP,mBAAmB,CAAC;cAC1D,IAAI,CAACK,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;gBACzDA,cAAc,GAAGN,MAAM,EAAE;gBACzBO,YAAY,CAACE,OAAO,CAACR,mBAAmB,EAAEK,cAAc,CAAC;;aAE5D,CAAC,gBAAM;cACNA,cAAc,GAAGH,0BAAyB,EAAE;;YAC7C,iCAEMG,cAAc;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACtB;EACDI,wBAAwB,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA,kCACjBH,YAAY,CAACC,OAAO,CAACN,qBAAqB,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACnD;EACDS,wBAAwB,EAAE,kCAAOC,gBAA+B;IAAA;MAAA;QAAA;UAAA;YAAA;YAE5D,IAAIA,gBAAgB,EAAE;cACpBL,YAAY,CAACE,OAAO,CAACP,qBAAqB,EAAEU,gBAAgB,CAAC;aAC9D,MAAM;cACLL,YAAY,CAACM,UAAU,CAACX,qBAAqB,CAAC;;YAC/C;YAAA;UAAA;YAAA;YAAA;YAAA,MAEK,IAAIJ,UAAU,CAClB,iCAAiC,4FAElC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEJ;EAEDgB,WAAW,EAAE,uBAAK,CAAE,CAAC;EACrBC,eAAe,EAAE,2BAAK,CAAE;CACG","names":["CodedError","v4","uuidv4","INSTALLATION_ID_KEY","REGISTRATION_INFO_KEY","getFallbackInstallationId","sessionInstallationId","getInstallationIdAsync","installationId","localStorage","getItem","setItem","getRegistrationInfoAsync","setRegistrationInfoAsync","registrationInfo","removeItem","addListener","removeListeners"],"sourceRoot":"","sources":["../src/ServerRegistrationModule.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"]},"metadata":{},"sourceType":"module"}