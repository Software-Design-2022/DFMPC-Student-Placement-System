{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport \"../global\";\nimport { firebase } from \"../firebase\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar authname = authName;\nvar authlastName = authLastName;\nvar latitude = 20;\nvar longitude = 30;\nvar msg = {\n  title: \"Message\",\n  body: \"Emergency Message Has Been Sent\",\n  data: {\n    data: \"goes here\"\n  }\n};\n\nvar sendToFirestore = function sendToFirestore(text, msg) {\n  firebase.firestore().collection(\"panic_button\").add({\n    Location: [-latitude, longitude],\n    query: text,\n    student_Number: \"123456\",\n    user_FirstName: authname,\n    user_LastName: authlastName\n  }).then(function () {\n    Alert.alert(\"Emergency Message Saved\");\n    schedulePushNotification(msg);\n  });\n};\n\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function EmergencyPage() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var navigation = useNavigation();\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      expoPushToken = _useState4[0],\n      setExpoPushToken = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      notification = _useState6[0],\n      setNotification = _useState6[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    var cancel = false;\n    registerForPushNotificationsAsync().then(function (token) {\n      if (cancel) return;\n      setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      cancel = true;\n    };\n  }, []);\n  LogBox.ignoreLogs([\"Setting a timer\"]);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(View, {\n      style: {\n        flex: 1\n      },\n      children: [_jsx(View, {\n        style: {\n          top: -50,\n          backgroundColor: \"rgba(255,255,255,0.8)\",\n          height: 100,\n          zIndex: 1,\n          borderEndWidth: 0,\n          borderEndColor: \"rgba(255,255,255,1)\",\n          borderBottomStartRadius: 100\n        },\n        children: _jsx(View, {\n          style: {\n            margin: 0\n          },\n          children: _jsx(Image, {\n            style: {\n              height: 80,\n              position: \"absolute\",\n              top: 5,\n              left: -160\n            },\n            resizeMode: \"contain\",\n            source: require(\"./images/wits.png\"),\n            blurRadius: 0\n          })\n        })\n      }), _jsx(View, {\n        style: {\n          padding: 10,\n          marginBottom: 20\n        },\n        children: _jsx(TextInput, {\n          style: styles.message,\n          placeholder: \"Type emergency message here!\",\n          onChangeText: function onChangeText(newText) {\n            return setText(newText);\n          },\n          defaultValue: text\n        })\n      }), _jsx(View, {\n        style: {\n          margin: 20\n        },\n        children: _jsx(Button, {\n          title: \"Send Emergency message\",\n          color: \"#415A77\",\n          onPress: function onPress() {\n            return sendToFirestore(text, msg);\n          }\n        })\n      })]\n    })\n  });\n}\n\nfunction schedulePushNotification(msg) {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: msg.title,\n              body: msg.body,\n              data: msg.data\n            },\n            trigger: {\n              seconds: 1\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!Device.isDevice) {\n            _context3.next = 18;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context3.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== \"granted\")) {\n            _context3.next = 12;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context3.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== \"granted\")) {\n            _context3.next = 15;\n            break;\n          }\n\n          alert(\"Failed to get push token for push notification!\");\n          return _context3.abrupt(\"return\");\n\n        case 15:\n          _context3.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context3.sent.data;\n\n        case 18:\n          if (!(Platform.OS === \"android\")) {\n            _context3.next = 21;\n            break;\n          }\n\n          _context3.next = 21;\n          return _regeneratorRuntime.awrap(Notifications.setNotificationChannelAsync(\"default\", {\n            name: \"default\",\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: \"#FF231F7C\"\n          }));\n\n        case 21:\n          return _context3.abrupt(\"return\", token);\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 50,\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"rgba(192,192,192,0.3)\"\n  },\n  message: {\n    marginTop: 50,\n    marginBottom: 20,\n    marginRight: 5,\n    marginLeft: 5,\n    height: 200,\n    textAlign: \"center\",\n    borderRadius: 5,\n    backgroundColor: \"white\"\n  },\n  Button1: {\n    backgroundColor: \"rgba(221, 240, 255,0.2)\"\n  },\n  title: {\n    textAlign: \"center\",\n    marginVertical: 8\n  },\n  fixToText: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  map: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  },\n  MapStyle: {\n    flex: 1,\n    margin: 20,\n    marginBottom: 90,\n    justifyContent: \"center\"\n  }\n});",
  "map": {
    "version": 3,
    "sources": [
      "C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/Screens/EmergencyPage.js"
    ],
    "names": [
      "Device",
      "Notifications",
      "React",
      "useState",
      "useEffect",
      "useRef",
      "firebase",
      "useNavigation",
      "authname",
      "authName",
      "authlastName",
      "authLastName",
      "latitude",
      "longitude",
      "msg",
      "title",
      "body",
      "data",
      "sendToFirestore",
      "text",
      "firestore",
      "collection",
      "add",
      "Location",
      "query",
      "student_Number",
      "user_FirstName",
      "user_LastName",
      "then",
      "Alert",
      "alert",
      "schedulePushNotification",
      "setNotificationHandler",
      "handleNotification",
      "shouldShowAlert",
      "shouldPlaySound",
      "shouldSetBadge",
      "EmergencyPage",
      "setText",
      "navigation",
      "expoPushToken",
      "setExpoPushToken",
      "notification",
      "setNotification",
      "notificationListener",
      "responseListener",
      "cancel",
      "registerForPushNotificationsAsync",
      "token",
      "current",
      "addNotificationReceivedListener",
      "addNotificationResponseReceivedListener",
      "response",
      "console",
      "log",
      "removeNotificationSubscription",
      "LogBox",
      "ignoreLogs",
      "styles",
      "container",
      "flex",
      "top",
      "backgroundColor",
      "height",
      "zIndex",
      "borderEndWidth",
      "borderEndColor",
      "borderBottomStartRadius",
      "margin",
      "position",
      "left",
      "require",
      "padding",
      "marginBottom",
      "message",
      "newText",
      "scheduleNotificationAsync",
      "content",
      "trigger",
      "seconds",
      "isDevice",
      "getPermissionsAsync",
      "existingStatus",
      "status",
      "finalStatus",
      "requestPermissionsAsync",
      "getExpoPushTokenAsync",
      "Platform",
      "OS",
      "setNotificationChannelAsync",
      "name",
      "importance",
      "AndroidImportance",
      "MAX",
      "vibrationPattern",
      "lightColor",
      "StyleSheet",
      "create",
      "marginTop",
      "justifyContent",
      "marginRight",
      "marginLeft",
      "textAlign",
      "borderRadius",
      "Button1",
      "marginVertical",
      "fixToText",
      "flexDirection",
      "map",
      "bottom",
      "right",
      "MapStyle"
    ],
    "mappings": "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",
    "sourcesContent": [
      "import * as Device from \"expo-device\";\r\nimport * as Notifications from \"expo-notifications\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  Button,\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  Image,\r\n  TextInput,\r\n  Alert,\r\n  LogBox,\r\n} from \"react-native\";\r\nimport \"../global\";\r\nimport { firebase } from \"../firebase\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\n\r\nconst authname = authName;\r\nconst authlastName = authLastName;\r\nconst latitude = 20;\r\nconst longitude = 30;\r\n\r\nconst msg = {\r\n  title: \"Message\",\r\n  body: \"Emergency Message Has Been Sent\",\r\n  data: { data: \"goes here\" },\r\n};\r\n\r\nconst sendToFirestore = (text, msg) => {\r\n  firebase\r\n    .firestore()\r\n    .collection(\"panic_button\")\r\n    .add({\r\n      Location: [-latitude, longitude],\r\n      query: text,\r\n      student_Number: \"123456\",\r\n      user_FirstName: authname,\r\n      user_LastName: authlastName,\r\n    })\r\n    .then(() => {\r\n      Alert.alert(\"Emergency Message Saved\");\r\n      schedulePushNotification(msg);\r\n    });\r\n};\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: true,\r\n    shouldSetBadge: true,\r\n  }),\r\n});\r\n\r\nexport default function EmergencyPage() {\r\n  const [text, setText] = useState(\"\");\r\n  const navigation = useNavigation();\r\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n\r\n  useEffect(() => {\r\n    let cancel = false;\r\n    registerForPushNotificationsAsync().then((token) => {\r\n      if (cancel) return;\r\n      setExpoPushToken(token);\r\n    });\r\n\r\n    notificationListener.current =\r\n      Notifications.addNotificationReceivedListener((notification) => {\r\n        setNotification(notification);\r\n      });\r\n\r\n    responseListener.current =\r\n      Notifications.addNotificationResponseReceivedListener((response) => {\r\n        console.log(response);\r\n      });\r\n\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(\r\n        notificationListener.current\r\n      );\r\n      Notifications.removeNotificationSubscription(responseListener.current);\r\n      cancel = true;\r\n    };\r\n  }, []);\r\n  LogBox.ignoreLogs([\"Setting a timer\"]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={{ flex: 1 }}>\r\n        <View\r\n          style={{\r\n            top: -50,\r\n            backgroundColor: \"rgba(255,255,255,0.8)\",\r\n            height: 100,\r\n            zIndex: 1,\r\n            borderEndWidth: 0,\r\n            borderEndColor: \"rgba(255,255,255,1)\",\r\n            borderBottomStartRadius: 100,\r\n          }}\r\n        >\r\n          <View style={{ margin: 0 }}>\r\n            <Image\r\n              style={{ height: 80, position: \"absolute\", top: 5, left: -160 }}\r\n              resizeMode=\"contain\"\r\n              source={require(\"./images/wits.png\")}\r\n              blurRadius={0}\r\n            />\r\n          </View>\r\n        </View>\r\n\r\n        <View style={{ padding: 10, marginBottom: 20 }}>\r\n          <TextInput\r\n            // user can type their emergency message\r\n            style={styles.message}\r\n            placeholder=\"Type emergency message here!\"\r\n            onChangeText={(newText) => setText(newText)}\r\n            defaultValue={text}\r\n          />\r\n        </View>\r\n\r\n        <View style={{ margin: 20 }}>\r\n          <Button\r\n            title=\"Send Emergency message\"\r\n            color=\"#415A77\"\r\n            // when clicked data is send to firestore database\r\n            onPress={() => sendToFirestore(text, msg)}\r\n          />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nasync function schedulePushNotification(msg) {\r\n  await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: msg.title,\r\n      body: msg.body,\r\n      data: msg.data,\r\n    },\r\n    trigger: { seconds: 1 },\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Device.isDevice) {\r\n    const { status: existingStatus } =\r\n      await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== \"granted\") {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== \"granted\") {\r\n      alert(\"Failed to get push token for push notification!\");\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n  }\r\n\r\n  if (Platform.OS === \"android\") {\r\n    await Notifications.setNotificationChannelAsync(\"default\", {\r\n      name: \"default\",\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: \"#FF231F7C\",\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\n/* borderColor: \"rgba(192,192,192,0.3)\",\r\nbackgroundColor: \"rgba(192,192,192,0.2)\",\r\nbackgroundColor: \"rgba(63, 130, 109,0.2)\",\r\n backgroundColor: \"rgba(181, 177, 178,0.2)\",\r\n backgroundColor: \"rgb(216, 212, 213)\",\r\n  backgroundColor: \"rgba(221, 240, 255,0.2)\",\r\n */\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 50,\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"rgba(192,192,192,0.3)\",\r\n  },\r\n  message: {\r\n    marginTop: 50,\r\n    marginBottom: 20,\r\n    marginRight: 5,\r\n    marginLeft: 5,\r\n    height: 200,\r\n    textAlign: \"center\",\r\n    borderRadius: 5,\r\n    backgroundColor: \"white\",\r\n  },\r\n\r\n  Button1: {\r\n    backgroundColor: \"rgba(221, 240, 255,0.2)\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    marginVertical: 8,\r\n  },\r\n  fixToText: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  map: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  },\r\n  MapStyle: {\r\n    flex: 1,\r\n    margin: 20,\r\n    marginBottom: 90,\r\n\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
