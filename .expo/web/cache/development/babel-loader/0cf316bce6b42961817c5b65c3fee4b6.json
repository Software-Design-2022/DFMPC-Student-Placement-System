{"ast":null,"code":"import { Reanimated } from \"./reanimatedWrapper\";\nimport { State } from \"../../State\";\nexport var GestureStateManager = {\n  create: function () {\n    var _f = function _f(handlerTag) {\n      return {\n        begin: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.BEGAN);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              BEGAN: State.BEGAN\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 8149384316327;\n          _f.__location = \"C:\\\\Users\\\\nokno\\\\OneDrive\\\\Documents\\\\GitHub\\\\DFMPC-Student-Placement-System\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (8:13)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        activate: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.ACTIVE);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              ACTIVE: State.ACTIVE\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 1117524627396;\n          _f.__location = \"C:\\\\Users\\\\nokno\\\\OneDrive\\\\Documents\\\\GitHub\\\\DFMPC-Student-Placement-System\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (17:16)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        fail: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.FAILED);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              FAILED: State.FAILED\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 16579675743275;\n          _f.__location = \"C:\\\\Users\\\\nokno\\\\OneDrive\\\\Documents\\\\GitHub\\\\DFMPC-Student-Placement-System\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (26:12)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }(),\n        end: function () {\n          var _f = function _f() {\n            if (Reanimated) {\n              Reanimated.setGestureState(handlerTag, State.END);\n            } else {\n              console.warn('react-native-reanimated is required in order to use synchronous state management');\n            }\n          };\n\n          _f._closure = {\n            Reanimated: Reanimated,\n            handlerTag: handlerTag,\n            State: {\n              END: State.END\n            }\n          };\n          _f.asString = \"function _f(){const{Reanimated,handlerTag,State}=jsThis._closure;{if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}}\";\n          _f.__workletHash = 13760866678247;\n          _f.__location = \"C:\\\\Users\\\\nokno\\\\OneDrive\\\\Documents\\\\GitHub\\\\DFMPC-Student-Placement-System\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js (35:11)\";\n\n          global.__reanimatedWorkletInit(_f);\n\n          return _f;\n        }()\n      };\n    };\n\n    _f._closure = {\n      Reanimated: Reanimated,\n      State: {\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        FAILED: State.FAILED,\n        END: State.END\n      }\n    };\n    _f.asString = \"function create(handlerTag){const{Reanimated,State}=jsThis._closure;{return{begin:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.BEGAN);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},activate:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.ACTIVE);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},fail:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.FAILED);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}},end:function(){'worklet';if(Reanimated){Reanimated.setGestureState(handlerTag,State.END);}else{console.warn('react-native-reanimated is required in order to use synchronous state management');}}};}}\";\n    _f.__workletHash = 5319495435492;\n    _f.__location = \"C:\\\\Users\\\\nokno\\\\OneDrive\\\\Documents\\\\GitHub\\\\DFMPC-Student-Placement-System\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\gestureStateManager.js\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }()\n};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":"AAAA,SAAA,UAAA;AACA,SAAA,KAAA;AASA,OAAO,IAAMA,mBAAmB,GAAG;EACjCC,MADiC;IAAA,qBAC3B,UAD2B,EACmB;MAElD,OAAO;QACLC,KAAK;UAAA,uBAAQ;YAEX,IAAA,UAAA,EAAgB;cACdC,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,KAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;YAGD;UATE,CACA;;UAAA;YAAA,YAJX,UAIW;YAAA,YAH2C,UAG3C;YAAA;cAAA,OAH2C,KAAA,CAAA;YAG3C;UAAA;UAAA;UAAA;UAAA;;UAAA;;UAAA;QAAA,GADA;QAYLC,QAAQ;UAAA,uBAAQ;YAEd,IAAA,UAAA,EAAgB;cACdH,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;YAGD;UApBE,CAYG;;UAAA;YAAA,YAfd,UAec;YAAA,YAdwC,UAcxC;YAAA;cAAA,QAdwC,KAAA,CAAA;YAcxC;UAAA;UAAA;UAAA;UAAA;;UAAA;;UAAA;QAAA,GAZH;QAuBLE,IAAI;UAAA,uBAAQ;YAEV,IAAA,UAAA,EAAgB;cACdJ,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,MAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;YAGD;UA/BE,CAuBD;;UAAA;YAAA,YA1BV,UA0BU;YAAA,YAzB4C,UAyB5C;YAAA;cAAA,QAzB4C,KAAA,CAAA;YAyB5C;UAAA;UAAA;UAAA;UAAA;;UAAA;;UAAA;QAAA,GAvBC;QAkCLG,GAAG;UAAA,uBAAQ;YAET,IAAA,UAAA,EAAgB;cACdL,UAAU,CAAVA,eAAAA,CAAAA,UAAAA,EAAuCC,KAAK,CAA5CD,GAAAA;YADF,CAAA,MAEO;cACLE,OAAO,CAAPA,IAAAA,CAAAA,kFAAAA;YAGD;UACF,CATE;;UAAA;YAAA,YArCT,UAqCS;YAAA,YApC6C,UAoC7C;YAAA;cAAA,KApC6C,KAAA,CAAA;YAoC7C;UAAA;UAAA;UAAA;UAAA;;UAAA;;UAAA;QAAA;MAlCE,CAAP;IA6CD,CAhDgC;;IAAA;MAAA,YAGxB,UAHwB;MAAA;QAAA,OAIhB,KAAA,CAAA,KAJgB;QAAA,QAeb,KAAA,CAAA,MAfa;QAAA,QA0BjB,KAAA,CAAA,MA1BiB;QAAA,KAqClB,KAAA,CAAA;MArCkB;IAAA;IAAA;IAAA;IAAA;;IAAA;;IAAA;EAAA;AAAA,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(\n            'react-native-reanimated is required in order to use synchronous state management'\n          );\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}