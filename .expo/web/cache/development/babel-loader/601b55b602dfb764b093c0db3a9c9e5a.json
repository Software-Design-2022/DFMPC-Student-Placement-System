{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { DeviceType } from \"./Device.types\";\nimport ExpoDevice from \"./ExpoDevice\";\nexport { DeviceType };\nexport var isDevice = ExpoDevice ? ExpoDevice.isDevice : true;\nexport var brand = ExpoDevice ? ExpoDevice.brand : null;\nexport var manufacturer = ExpoDevice ? ExpoDevice.manufacturer : null;\nexport var modelId = ExpoDevice ? ExpoDevice.modelId || null : null;\nexport var modelName = ExpoDevice ? ExpoDevice.modelName : null;\nexport var designName = ExpoDevice ? ExpoDevice.designName || null : null;\nexport var productName = ExpoDevice ? ExpoDevice.productName || null : null;\nexport var deviceYearClass = ExpoDevice ? ExpoDevice.deviceYearClass : null;\nexport var totalMemory = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport var supportedCpuArchitectures = ExpoDevice ? ExpoDevice.supportedCpuArchitectures : null;\nexport var osName = ExpoDevice ? ExpoDevice.osName : null;\nexport var osVersion = ExpoDevice ? ExpoDevice.osVersion : null;\nexport var osBuildId = ExpoDevice ? ExpoDevice.osBuildId : null;\nexport var osInternalBuildId = ExpoDevice ? ExpoDevice.osInternalBuildId : null;\nexport var osBuildFingerprint = ExpoDevice ? ExpoDevice.osBuildFingerprint || null : null;\nexport var platformApiLevel = ExpoDevice ? ExpoDevice.platformApiLevel || null : null;\nexport var deviceName = ExpoDevice ? ExpoDevice.deviceName : null;\nexport function getDeviceTypeAsync() {\n  return _regeneratorRuntime.async(function getDeviceTypeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoDevice.getDeviceTypeAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getDeviceTypeAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUptimeAsync() {\n  return _regeneratorRuntime.async(function getUptimeAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoDevice.getUptimeAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getUptimeAsync());\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getMaxMemoryAsync() {\n  var maxMemory;\n  return _regeneratorRuntime.async(function getMaxMemoryAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoDevice.getMaxMemoryAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getMaxMemoryAsync());\n\n        case 4:\n          maxMemory = _context3.sent;\n\n          if (maxMemory === -1) {\n            maxMemory = Number.MAX_SAFE_INTEGER;\n          }\n\n          return _context3.abrupt(\"return\", maxMemory);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isRootedExperimentalAsync() {\n  return _regeneratorRuntime.async(function isRootedExperimentalAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoDevice.isRootedExperimentalAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.isRootedExperimentalAsync());\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isSideLoadingEnabledAsync() {\n  return _regeneratorRuntime.async(function isSideLoadingEnabledAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoDevice.isSideLoadingEnabledAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.isSideLoadingEnabledAsync());\n\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPlatformFeaturesAsync() {\n  return _regeneratorRuntime.async(function getPlatformFeaturesAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (ExpoDevice.getPlatformFeaturesAsync) {\n            _context6.next = 2;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", []);\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getPlatformFeaturesAsync());\n\n        case 4:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function hasPlatformFeatureAsync(feature) {\n  return _regeneratorRuntime.async(function hasPlatformFeatureAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoDevice.hasPlatformFeatureAsync) {\n            _context7.next = 2;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", false);\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.hasPlatformFeatureAsync(feature));\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":"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","names":["UnavailabilityError","DeviceType","ExpoDevice","isDevice","brand","manufacturer","modelId","modelName","designName","productName","deviceYearClass","totalMemory","supportedCpuArchitectures","osName","osVersion","osBuildId","osInternalBuildId","osBuildFingerprint","platformApiLevel","deviceName","getDeviceTypeAsync","getUptimeAsync","getMaxMemoryAsync","maxMemory","Number","MAX_SAFE_INTEGER","isRootedExperimentalAsync","isSideLoadingEnabledAsync","getPlatformFeaturesAsync","hasPlatformFeatureAsync","feature"],"sourceRoot":"","sources":["../src/Device.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport { DeviceType } from './Device.types';\nimport ExpoDevice from './ExpoDevice';\n\nexport { DeviceType };\n\nexport const isDevice: boolean = ExpoDevice ? ExpoDevice.isDevice : true;\nexport const brand: string | null = ExpoDevice ? ExpoDevice.brand : null;\nexport const manufacturer: string | null = ExpoDevice ? ExpoDevice.manufacturer : null;\nexport const modelId = ExpoDevice ? ExpoDevice.modelId || null : null;\nexport const modelName: string | null = ExpoDevice ? ExpoDevice.modelName : null;\nexport const designName: string | null = ExpoDevice ? ExpoDevice.designName || null : null;\nexport const productName: string | null = ExpoDevice ? ExpoDevice.productName || null : null;\nexport const deviceYearClass: number | null = ExpoDevice ? ExpoDevice.deviceYearClass : null;\nexport const totalMemory: number | null = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport const supportedCpuArchitectures: string[] | null = ExpoDevice\n  ? ExpoDevice.supportedCpuArchitectures\n  : null;\nexport const osName: string | null = ExpoDevice ? ExpoDevice.osName : null;\nexport const osVersion: string | null = ExpoDevice ? ExpoDevice.osVersion : null;\nexport const osBuildId: string | null = ExpoDevice ? ExpoDevice.osBuildId : null;\nexport const osInternalBuildId: string | null = ExpoDevice ? ExpoDevice.osInternalBuildId : null;\nexport const osBuildFingerprint: string | null = ExpoDevice\n  ? ExpoDevice.osBuildFingerprint || null\n  : null;\nexport const platformApiLevel: number | null = ExpoDevice\n  ? ExpoDevice.platformApiLevel || null\n  : null;\nexport const deviceName: string | null = ExpoDevice ? ExpoDevice.deviceName : null;\n\nexport async function getDeviceTypeAsync(): Promise<DeviceType> {\n  if (!ExpoDevice.getDeviceTypeAsync) {\n    throw new UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n  }\n  return await ExpoDevice.getDeviceTypeAsync();\n}\n\nexport async function getUptimeAsync(): Promise<number> {\n  if (!ExpoDevice.getUptimeAsync) {\n    throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n  }\n  return await ExpoDevice.getUptimeAsync();\n}\n\nexport async function getMaxMemoryAsync(): Promise<number> {\n  if (!ExpoDevice.getMaxMemoryAsync) {\n    throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n  }\n  let maxMemory = await ExpoDevice.getMaxMemoryAsync();\n  if (maxMemory === -1) {\n    maxMemory = Number.MAX_SAFE_INTEGER;\n  }\n  return maxMemory;\n}\n\nexport async function isRootedExperimentalAsync(): Promise<boolean> {\n  if (!ExpoDevice.isRootedExperimentalAsync) {\n    throw new UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n  }\n  return await ExpoDevice.isRootedExperimentalAsync();\n}\n\nexport async function isSideLoadingEnabledAsync(): Promise<boolean> {\n  if (!ExpoDevice.isSideLoadingEnabledAsync) {\n    throw new UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n  }\n  return await ExpoDevice.isSideLoadingEnabledAsync();\n}\n\nexport async function getPlatformFeaturesAsync(): Promise<string[]> {\n  if (!ExpoDevice.getPlatformFeaturesAsync) {\n    return [];\n  }\n  return await ExpoDevice.getPlatformFeaturesAsync();\n}\n\nexport async function hasPlatformFeatureAsync(feature: string): Promise<boolean> {\n  if (!ExpoDevice.hasPlatformFeatureAsync) {\n    return false;\n  }\n  return await ExpoDevice.hasPlatformFeatureAsync(feature);\n}\n"]},"metadata":{},"sourceType":"module"}