{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"inset\", \"style\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Divider = function Divider(_ref) {\n  var inset = _ref.inset,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isDarkTheme = theme.dark;\n  return React.createElement(View, _extends({}, rest, {\n    style: [isDarkTheme ? styles.dark : styles.light, inset && styles.inset, style]\n  }));\n};\nvar styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});\nexport default withTheme(Divider);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAEA,SAASC,SAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;;AA0CA,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAGC,MAA6C;EAAA,IAA1CC,KAAF,GAA4CD,KAA1CC,KAAF;IAASC,KAAT,GAA4CF,KAAnCE,KAAT;IAAgBC,KAAhB,GAA4CH,KAA5BG,KAAhB;IAA0BC,gCAAkBJ;EAC3D,IAAcK,cAAgBF,KAA9B,CAAQG,IAAI;EACZ,OACEZ,oBAACa,IAAD,eACMH,IADN;IAEEF,KAAK,EAAE,CACLG,WAAW,GAAGG,MAAM,CAACF,IAAV,GAAiBE,MAAM,CAACC,KAD9B,EAELR,KAAK,IAAIO,MAAM,CAACP,KAFX,EAGLC,KAHK;EAFT,GADF;AAUD,CAZD;AAcA,IAAMM,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;EAC/BF,KAAK,EAAE;IACLG,eAAe,EAAEjB,KAAK,CAACE,KAAD,CAAL,CAAagB,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EADZ;IAELC,MAAM,EAAEN,UAAU,CAACO;EAFd,CADwB;EAK/BX,IAAI,EAAE;IACJM,eAAe,EAAEjB,KAAK,CAACG,KAAD,CAAL,CAAae,KAAb,CAAmB,IAAnB,EAAyBC,GAAzB,GAA+BC,MAA/B,EADb;IAEJC,MAAM,EAAEN,UAAU,CAACO;EAFf,CALyB;EAS/BhB,KAAK,EAAE;IACLiB,UAAU,EAAE;EADP;AATwB,CAAlB,CAAf;AAcA,eAAetB,SAAS,CAACG,OAAD,CAAxB","names":["React","color","withTheme","black","white","Divider","_ref","inset","style","theme","rest","isDarkTheme","dark","View","styles","light","StyleSheet","create","backgroundColor","alpha","rgb","string","height","hairlineWidth","marginLeft"],"sources":["Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { $RemoveChildren } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({ inset, style, theme, ...rest }: Props) => {\n  const { dark: isDarkTheme } = theme;\n  return (\n    <View\n      {...rest}\n      style={[\n        isDarkTheme ? styles.dark : styles.light,\n        inset && styles.inset,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"module"}