{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar TabBarIndicator = function (_React$Component) {\n  _inherits(TabBarIndicator, _React$Component);\n  var _super = _createSuper(TabBarIndicator);\n  function TabBarIndicator() {\n    var _this;\n    _classCallCheck(this, TabBarIndicator);\n    _this = _super.apply(this, arguments);\n    _defineProperty(_assertThisInitialized(_this), \"fadeInIndicator\", function () {\n      var _this$props = _this.props,\n        navigationState = _this$props.navigationState,\n        layout = _this$props.layout,\n        width = _this$props.width,\n        getTabWidth = _this$props.getTabWidth;\n      if (!_this.isIndicatorShown && width === 'auto' && layout.width &&\n      navigationState.routes.every(function (_, i) {\n        return getTabWidth(i);\n      })) {\n        _this.isIndicatorShown = true;\n        Animated.timing(_this.opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true\n        }).start();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isIndicatorShown\", false);\n    _defineProperty(_assertThisInitialized(_this), \"opacity\", new Animated.Value(_this.props.width === 'auto' ? 0 : 1));\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", function (position, routes, getTabWidth, gap) {\n      var inputRange = routes.map(function (_, i) {\n        return i;\n      });\n\n      var outputRange = routes.reduce(function (acc, _, i) {\n        if (i === 0) return [0];\n        return [].concat(_toConsumableArray(acc), [acc[i - 1] + getTabWidth(i - 1) + (gap != null ? gap : 0)]);\n      }, []);\n      var translateX = position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: 'clamp'\n      });\n      return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n    });\n    return _this;\n  }\n  _createClass(TabBarIndicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fadeInIndicator();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        position = _this$props2.position,\n        navigationState = _this$props2.navigationState,\n        getTabWidth = _this$props2.getTabWidth,\n        width = _this$props2.width,\n        style = _this$props2.style,\n        layout = _this$props2.layout,\n        gap = _this$props2.gap;\n      var routes = navigationState.routes;\n      var transform = [];\n      if (layout.width) {\n        var translateX = routes.length > 1 ? this.getTranslateX(position, routes, getTabWidth, gap) : 0;\n        transform.push({\n          translateX: translateX\n        });\n      }\n      if (width === 'auto') {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        var outputRange = inputRange.map(getTabWidth);\n        transform.push({\n          scaleX: routes.length > 1 ? position.interpolate({\n            inputRange: inputRange,\n            outputRange: outputRange,\n            extrapolate: 'clamp'\n          }) : outputRange[0]\n        }, {\n          translateX: 0.5\n        });\n      }\n      return React.createElement(Animated.View, {\n        style: [styles.indicator, {\n          width: width === 'auto' ? 1 : width\n        },\n        layout.width && Platform.OS !== 'macos' ? {\n          left: 0\n        } : {\n          left: 100 / routes.length * navigationState.index + \"%\"\n        }, {\n          transform: transform\n        }, width === 'auto' ? {\n          opacity: this.opacity\n        } : null, style]\n      });\n    }\n  }]);\n  return TabBarIndicator;\n}(React.Component);\nexport { TabBarIndicator as default };\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","TabBarIndicator","_defineProperty","props","navigationState","layout","width","getTabWidth","isIndicatorShown","routes","every","_","i","Animated","timing","opacity","toValue","duration","easing","Easing","in","linear","useNativeDriver","start","Value","position","gap","inputRange","map","outputRange","reduce","acc","translateX","interpolate","extrapolate","multiply","I18nManager","isRTL","componentDidMount","fadeInIndicator","componentDidUpdate","render","style","transform","length","getTranslateX","push","scaleX","View","styles","indicator","Platform","OS","left","index","Component","StyleSheet","create","backgroundColor","bottom","right","height"],"sources":["TabBarIndicator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  I18nManager,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\n\nimport type { Route, SceneRendererProps, NavigationState } from './types';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n  gap?: number;\n};\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        toValue: 1,\n        duration: 150,\n        easing: Easing.in(Easing.linear),\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = (\n    position: Animated.AnimatedInterpolation,\n    routes: Route[],\n    getTabWidth: GetTabWidth,\n    gap?: number\n  ) => {\n    const inputRange = routes.map((_, i) => i);\n\n    // every index contains widths at all previous indices\n    const outputRange = routes.reduce<number[]>((acc, _, i) => {\n      if (i === 0) return [0];\n      return [...acc, acc[i - 1] + getTabWidth(i - 1) + (gap ?? 0)];\n    }, []);\n\n    const translateX = position.interpolate({\n      inputRange,\n      outputRange,\n      extrapolate: 'clamp',\n    });\n\n    return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n  };\n\n  render() {\n    const {\n      position,\n      navigationState,\n      getTabWidth,\n      width,\n      style,\n      layout,\n      gap,\n    } = this.props;\n    const { routes } = navigationState;\n\n    const transform = [];\n\n    if (layout.width) {\n      const translateX =\n        routes.length > 1\n          ? this.getTranslateX(position, routes, getTabWidth, gap)\n          : 0;\n\n      transform.push({ translateX });\n    }\n\n    if (width === 'auto') {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      transform.push(\n        {\n          scaleX:\n            routes.length > 1\n              ? position.interpolate({\n                  inputRange,\n                  outputRange,\n                  extrapolate: 'clamp',\n                })\n              : outputRange[0],\n        },\n        { translateX: 0.5 }\n      );\n    }\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          { width: width === 'auto' ? 1 : width },\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          // If platform is macos use `left` property as `transform` is broken at the moment.\n          // See: https://github.com/microsoft/react-native-macos/issues/280\n          layout.width && Platform.OS !== 'macos'\n            ? { left: 0 }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          { transform },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}