{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsEmitterModule from \"./NotificationsEmitterModule\";\nvar emitter = new EventEmitter(NotificationsEmitterModule);\nvar didReceiveNotificationEventName = 'onDidReceiveNotification';\nvar didDropNotificationsEventName = 'onNotificationsDeleted';\nvar didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nexport var DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexport function addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\nexport function addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\nexport function addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, listener);\n}\nexport function removeNotificationSubscription(subscription) {\n  emitter.removeSubscription(subscription);\n}\nexport function getLastNotificationResponseAsync() {\n  return _regeneratorRuntime.async(function getLastNotificationResponseAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (NotificationsEmitterModule.getLastNotificationResponseAsync) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(NotificationsEmitterModule.getLastNotificationResponseAsync());\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAY,EAAgBC,mBAAmB,QAAQ,mBAAmB;AAGnF,OAAOC,0BAA0B;AAGjC,IAAMC,OAAO,GAAG,IAAIH,YAAY,CAACE,0BAA0B,CAAC;AAE5D,IAAME,+BAA+B,GAAG,0BAA0B;AAClE,IAAMC,6BAA6B,GAAG,wBAAwB;AAC9D,IAAMC,uCAAuC,GAAG,kCAAkC;AAElF,OAAO,IAAMC,yBAAyB,GAAG,4CAA4C;AAErF,OAAM,SAAUC,+BAA+B,CAC7CC,QAAuC;EAEvC,OAAON,OAAO,CAACO,WAAW,CAAeN,+BAA+B,EAAEK,QAAQ,CAAC;AACrF;AAEA,OAAM,SAAUE,+BAA+B,CAACF,QAAoB;EAClE,OAAON,OAAO,CAACO,WAAW,CAAOL,6BAA6B,EAAEI,QAAQ,CAAC;AAC3E;AAEA,OAAM,SAAUG,uCAAuC,CACrDH,QAA+C;EAE/C,OAAON,OAAO,CAACO,WAAW,CACxBJ,uCAAuC,EACvCG,QAAQ,CACT;AACH;AAEA,OAAM,SAAUI,8BAA8B,CAACC,YAA0B;EACvEX,OAAO,CAACY,kBAAkB,CAACD,YAAY,CAAC;AAC1C;AAEA,OAAO,SAAeE,gCAAgC;EAAA;IAAA;MAAA;QAAA;UAAA,IAC/Cd,0BAA0B,CAACc,gCAAgC;YAAA;YAAA;UAAA;UAAA,MACxD,IAAIf,mBAAmB,CAAC,mBAAmB,EAAE,kCAAkC,CAAC;QAAA;UAAA;UAAA,iCAE3EC,0BAA0B,CAACc,gCAAgC,EAAE;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["EventEmitter","UnavailabilityError","NotificationsEmitterModule","emitter","didReceiveNotificationEventName","didDropNotificationsEventName","didReceiveNotificationResponseEventName","DEFAULT_ACTION_IDENTIFIER","addNotificationReceivedListener","listener","addListener","addNotificationsDroppedListener","addNotificationResponseReceivedListener","removeNotificationSubscription","subscription","removeSubscription","getLastNotificationResponseAsync"],"sourceRoot":"","sources":["../src/NotificationsEmitter.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"]},"metadata":{},"sourceType":"module"}