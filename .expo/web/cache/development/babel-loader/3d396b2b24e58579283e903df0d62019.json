{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"accessibilityHint\", \"onPress\", \"onLongPress\", \"style\", \"theme\", \"contentStyle\", \"labelStyle\", \"testID\", \"accessible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport ActivityIndicator from \"./ActivityIndicator\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Button = function Button(_ref) {\n  var _StyleSheet$flatten;\n\n  var disabled = _ref.disabled,\n      compact = _ref.compact,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? 'text' : _ref$mode,\n      dark = _ref.dark,\n      loading = _ref.loading,\n      icon = _ref.icon,\n      buttonColor = _ref.color,\n      children = _ref.children,\n      _ref$uppercase = _ref.uppercase,\n      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,\n      accessibilityLabel = _ref.accessibilityLabel,\n      accessibilityHint = _ref.accessibilityHint,\n      onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      style = _ref.style,\n      theme = _ref.theme,\n      contentStyle = _ref.contentStyle,\n      labelStyle = _ref.labelStyle,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)),\n      elevation = _React$useRef.current;\n\n  React.useEffect(function () {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  var handlePressIn = function handlePressIn() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressOut = function handlePressOut() {\n    if (mode === 'contained') {\n      var scale = theme.animation.scale;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var colors = theme.colors,\n      roundness = theme.roundness;\n  var font = theme.fonts.medium;\n  var backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    var isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  var rippleColor = color(textColor).alpha(0.32).rgb().string();\n  var buttonStyle = {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor,\n    borderWidth: borderWidth,\n    borderRadius: roundness\n  };\n  var touchableStyle = {\n    borderRadius: style ? (StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n\n  var _ref2 = StyleSheet.flatten(labelStyle) || {},\n      customLabelColor = _ref2.color,\n      customLabelSize = _ref2.fontSize;\n\n  var textStyle = _objectSpread({\n    color: textColor\n  }, font);\n\n  var iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation: elevation\n    }, buttonStyle, style]\n  }), React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? React.createElement(View, {\n    style: iconStyle\n  }, React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"mappings":"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","names":["React","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","useRef","Animated","Value","elevation","current","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","customLabelSize","fontSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","View","content","source","size","selectable","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}