{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress } from \"./utils\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport RadioButton from \"./RadioButton\";\nimport Text from \"../Typography/Text\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\n\nvar RadioButtonItem = function RadioButtonItem(_ref) {\n  var value = _ref.value,\n      label = _ref.label,\n      style = _ref.style,\n      labelStyle = _ref.labelStyle,\n      onPress = _ref.onPress,\n      disabled = _ref.disabled,\n      color = _ref.color,\n      uncheckedColor = _ref.uncheckedColor,\n      status = _ref.status,\n      colors = _ref.theme.colors,\n      accessibilityLabel = _ref.accessibilityLabel,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position;\n  var radioButtonProps = {\n    value: value,\n    disabled: disabled,\n    status: status,\n    color: color,\n    uncheckedColor: uncheckedColor\n  };\n  var isLeading = position === 'leading';\n  var radioButton;\n\n  if (mode === 'android') {\n    radioButton = React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = React.createElement(RadioButton, radioButtonProps);\n  }\n\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    return React.createElement(TouchableRipple, {\n      onPress: disabled ? undefined : function () {\n        return handlePress({\n          onPress: onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value: value\n        });\n      },\n      accessibilityLabel: accessibilityLabel,\n      testID: testID\n    }, React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, React.createElement(Text, {\n      style: [styles.label, {\n        color: colors.text,\n        textAlign: isLeading ? 'right' : 'left'\n      }, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withTheme(RadioButtonItem);\nvar RadioButtonItemWithTheme = withTheme(RadioButtonItem);\nexport { RadioButtonItemWithTheme as RadioButtonItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","withTheme","RadioButtonContext","handlePress","TouchableRipple","RadioButton","Text","RadioButtonAndroid","RadioButtonIOS","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","colors","theme","accessibilityLabel","testID","mode","position","radioButtonProps","isLeading","radioButton","Consumer","context","undefined","onValueChange","View","styles","container","pointerEvents","text","textAlign","displayName","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n  position = 'trailing',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                style={[\n                  styles.label,\n                  {\n                    color: colors.text,\n                    textAlign: isLeading ? 'right' : 'left',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}