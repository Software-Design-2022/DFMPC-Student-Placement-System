{
  "ast": null,
  "code": "import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport invariant from 'invariant';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport base64 from 'react-native-base64';\nvar RNAppAuth = NativeModules.RNAppAuth;\n\nvar validateIssuerOrServiceConfigurationEndpoints = function validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration) {\n  return invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.authorizationEndpoint === 'string' && typeof serviceConfiguration.tokenEndpoint === 'string', 'Config error: you must provide either an issuer or a service endpoints');\n};\n\nvar validateIssuerOrServiceConfigurationRegistrationEndpoint = function validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration) {\n  return invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.registrationEndpoint === 'string', 'Config error: you must provide either an issuer or a registration endpoint');\n};\n\nvar validateIssuerOrServiceConfigurationRevocationEndpoint = function validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration) {\n  return invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.revocationEndpoint === 'string', 'Config error: you must provide either an issuer or a revocation endpoint');\n};\n\nvar validateIssuerOrServiceConfigurationEndSessionEndpoint = function validateIssuerOrServiceConfigurationEndSessionEndpoint(issuer, serviceConfiguration) {\n  return invariant(typeof issuer === 'string' || serviceConfiguration && typeof serviceConfiguration.endSessionEndpoint === 'string', 'Config error: you must provide either an issuer or an end session endpoint');\n};\n\nvar validateClientId = function validateClientId(clientId) {\n  return invariant(typeof clientId === 'string', 'Config error: clientId must be a string');\n};\n\nvar validateRedirectUrl = function validateRedirectUrl(redirectUrl) {\n  return invariant(typeof redirectUrl === 'string', 'Config error: redirectUrl must be a string');\n};\n\nvar validateHeaders = function validateHeaders(headers) {\n  if (!headers) {\n    return;\n  }\n\n  var customHeaderTypeErrorMessage = 'Config error: customHeaders type must be { token?: { [key: string]: string }, authorize?: { [key: string]: string }, register: { [key: string]: string }}';\n  var authorizedKeys = ['token', 'authorize', 'register'];\n  var keys = Object.keys(headers);\n  var correctKeys = keys.filter(function (key) {\n    return authorizedKeys.includes(key);\n  });\n  invariant(keys.length <= authorizedKeys.length && correctKeys.length > 0 && correctKeys.length === keys.length, customHeaderTypeErrorMessage);\n  Object.values(headers).forEach(function (value) {\n    invariant(typeof value === 'object', customHeaderTypeErrorMessage);\n    invariant(Object.values(value).filter(function (key) {\n      return typeof key !== 'string';\n    }).length === 0, customHeaderTypeErrorMessage);\n  });\n};\n\nvar validateAdditionalHeaders = function validateAdditionalHeaders(headers) {\n  if (!headers) {\n    return;\n  }\n\n  var errorMessage = 'Config error: additionalHeaders must be { [key: string]: string }';\n  invariant(typeof headers === 'object', errorMessage);\n  invariant(Object.values(headers).filter(function (key) {\n    return typeof key !== 'string';\n  }).length === 0, errorMessage);\n};\n\nvar validateConnectionTimeoutSeconds = function validateConnectionTimeoutSeconds(timeout) {\n  if (!timeout) {\n    return;\n  }\n\n  invariant(typeof timeout === 'number', 'Config error: connectionTimeoutSeconds must be a number');\n};\n\nexport var SECOND_IN_MS = 1000;\nexport var DEFAULT_TIMEOUT_IOS = 60;\nexport var DEFAULT_TIMEOUT_ANDROID = 15;\n\nvar convertTimeoutForPlatform = function convertTimeoutForPlatform(platform) {\n  var connectionTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Platform.OS === 'ios' ? DEFAULT_TIMEOUT_IOS : DEFAULT_TIMEOUT_ANDROID;\n  return platform === 'android' ? connectionTimeout * SECOND_IN_MS : connectionTimeout;\n};\n\nexport var prefetchConfiguration = function prefetchConfiguration(_ref) {\n  var _ref$warmAndPrefetchC, warmAndPrefetchChrome, issuer, redirectUrl, clientId, scopes, serviceConfiguration, _ref$dangerouslyAllow, dangerouslyAllowInsecureHttpRequests, customHeaders, connectionTimeoutSeconds, nativeMethodArguments;\n\n  return _regeneratorRuntime.async(function prefetchConfiguration$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$warmAndPrefetchC = _ref.warmAndPrefetchChrome, warmAndPrefetchChrome = _ref$warmAndPrefetchC === void 0 ? false : _ref$warmAndPrefetchC, issuer = _ref.issuer, redirectUrl = _ref.redirectUrl, clientId = _ref.clientId, scopes = _ref.scopes, serviceConfiguration = _ref.serviceConfiguration, _ref$dangerouslyAllow = _ref.dangerouslyAllowInsecureHttpRequests, dangerouslyAllowInsecureHttpRequests = _ref$dangerouslyAllow === void 0 ? false : _ref$dangerouslyAllow, customHeaders = _ref.customHeaders, connectionTimeoutSeconds = _ref.connectionTimeoutSeconds;\n\n          if (Platform.OS === 'android') {\n            validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n            validateClientId(clientId);\n            validateRedirectUrl(redirectUrl);\n            validateHeaders(customHeaders);\n            validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n            nativeMethodArguments = [warmAndPrefetchChrome, issuer, redirectUrl, clientId, scopes, serviceConfiguration, dangerouslyAllowInsecureHttpRequests, customHeaders, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n            RNAppAuth.prefetchConfiguration.apply(RNAppAuth, nativeMethodArguments);\n          }\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var register = function register(_ref2) {\n  var issuer = _ref2.issuer,\n      redirectUrls = _ref2.redirectUrls,\n      responseTypes = _ref2.responseTypes,\n      grantTypes = _ref2.grantTypes,\n      subjectType = _ref2.subjectType,\n      tokenEndpointAuthMethod = _ref2.tokenEndpointAuthMethod,\n      additionalParameters = _ref2.additionalParameters,\n      serviceConfiguration = _ref2.serviceConfiguration,\n      _ref2$dangerouslyAllo = _ref2.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref2$dangerouslyAllo === void 0 ? false : _ref2$dangerouslyAllo,\n      customHeaders = _ref2.customHeaders,\n      additionalHeaders = _ref2.additionalHeaders,\n      connectionTimeoutSeconds = _ref2.connectionTimeoutSeconds;\n  validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  invariant(Array.isArray(redirectUrls) && redirectUrls.every(function (url) {\n    return typeof url === 'string';\n  }), 'Config error: redirectUrls must be an Array of strings');\n  invariant(responseTypes == null || Array.isArray(responseTypes) && responseTypes.every(function (rt) {\n    return typeof rt === 'string';\n  }), 'Config error: if provided, responseTypes must be an Array of strings');\n  invariant(grantTypes == null || Array.isArray(grantTypes) && grantTypes.every(function (gt) {\n    return typeof gt === 'string';\n  }), 'Config error: if provided, grantTypes must be an Array of strings');\n  invariant(subjectType == null || typeof subjectType === 'string', 'Config error: if provided, subjectType must be a string');\n  invariant(tokenEndpointAuthMethod == null || typeof tokenEndpointAuthMethod === 'string', 'Config error: if provided, tokenEndpointAuthMethod must be a string');\n  var nativeMethodArguments = [issuer, redirectUrls, responseTypes, grantTypes, subjectType, tokenEndpointAuthMethod, additionalParameters, serviceConfiguration, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n  }\n\n  return RNAppAuth.register.apply(RNAppAuth, nativeMethodArguments);\n};\nexport var authorize = function authorize(_ref3) {\n  var issuer = _ref3.issuer,\n      redirectUrl = _ref3.redirectUrl,\n      clientId = _ref3.clientId,\n      clientSecret = _ref3.clientSecret,\n      scopes = _ref3.scopes,\n      _ref3$useNonce = _ref3.useNonce,\n      useNonce = _ref3$useNonce === void 0 ? true : _ref3$useNonce,\n      _ref3$usePKCE = _ref3.usePKCE,\n      usePKCE = _ref3$usePKCE === void 0 ? true : _ref3$usePKCE,\n      additionalParameters = _ref3.additionalParameters,\n      serviceConfiguration = _ref3.serviceConfiguration,\n      _ref3$clientAuthMetho = _ref3.clientAuthMethod,\n      clientAuthMethod = _ref3$clientAuthMetho === void 0 ? 'basic' : _ref3$clientAuthMetho,\n      _ref3$dangerouslyAllo = _ref3.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref3$dangerouslyAllo === void 0 ? false : _ref3$dangerouslyAllo,\n      customHeaders = _ref3.customHeaders,\n      additionalHeaders = _ref3.additionalHeaders,\n      _ref3$skipCodeExchang = _ref3.skipCodeExchange,\n      skipCodeExchange = _ref3$skipCodeExchang === void 0 ? false : _ref3$skipCodeExchang,\n      connectionTimeoutSeconds = _ref3.connectionTimeoutSeconds;\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  var nativeMethodArguments = [issuer, redirectUrl, clientId, clientSecret, scopes, additionalParameters, serviceConfiguration, skipCodeExchange, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n  }\n\n  return RNAppAuth.authorize.apply(RNAppAuth, nativeMethodArguments);\n};\nexport var refresh = function refresh(_ref4, _ref5) {\n  var issuer = _ref4.issuer,\n      redirectUrl = _ref4.redirectUrl,\n      clientId = _ref4.clientId,\n      clientSecret = _ref4.clientSecret,\n      scopes = _ref4.scopes,\n      _ref4$additionalParam = _ref4.additionalParameters,\n      additionalParameters = _ref4$additionalParam === void 0 ? {} : _ref4$additionalParam,\n      serviceConfiguration = _ref4.serviceConfiguration,\n      _ref4$clientAuthMetho = _ref4.clientAuthMethod,\n      clientAuthMethod = _ref4$clientAuthMetho === void 0 ? 'basic' : _ref4$clientAuthMetho,\n      _ref4$dangerouslyAllo = _ref4.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref4$dangerouslyAllo === void 0 ? false : _ref4$dangerouslyAllo,\n      customHeaders = _ref4.customHeaders,\n      additionalHeaders = _ref4.additionalHeaders,\n      connectionTimeoutSeconds = _ref4.connectionTimeoutSeconds;\n  var refreshToken = _ref5.refreshToken;\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  invariant(refreshToken, 'Please pass in a refresh token');\n  var nativeMethodArguments = [issuer, redirectUrl, clientId, clientSecret, refreshToken, scopes, additionalParameters, serviceConfiguration, convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds)];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n  }\n\n  return RNAppAuth.refresh.apply(RNAppAuth, nativeMethodArguments);\n};\nexport var revoke = function revoke(_ref6, _ref7) {\n  var clientId, issuer, serviceConfiguration, clientSecret, tokenToRevoke, _ref7$sendClientId, sendClientId, _ref7$includeBasicAut, includeBasicAuth, revocationEndpoint, response, openidConfig, headers;\n\n  return _regeneratorRuntime.async(function revoke$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          clientId = _ref6.clientId, issuer = _ref6.issuer, serviceConfiguration = _ref6.serviceConfiguration, clientSecret = _ref6.clientSecret;\n          tokenToRevoke = _ref7.tokenToRevoke, _ref7$sendClientId = _ref7.sendClientId, sendClientId = _ref7$sendClientId === void 0 ? false : _ref7$sendClientId, _ref7$includeBasicAut = _ref7.includeBasicAuth, includeBasicAuth = _ref7$includeBasicAut === void 0 ? false : _ref7$includeBasicAut;\n          invariant(tokenToRevoke, 'Please include the token to revoke');\n          validateClientId(clientId);\n          validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration);\n\n          if (!(serviceConfiguration && serviceConfiguration.revocationEndpoint)) {\n            _context2.next = 9;\n            break;\n          }\n\n          revocationEndpoint = serviceConfiguration.revocationEndpoint;\n          _context2.next = 17;\n          break;\n\n        case 9:\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(fetch(issuer + \"/.well-known/openid-configuration\"));\n\n        case 11:\n          response = _context2.sent;\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 14:\n          openidConfig = _context2.sent;\n          invariant(openidConfig.revocation_endpoint, 'The openid config does not specify a revocation endpoint');\n          revocationEndpoint = openidConfig.revocation_endpoint;\n\n        case 17:\n          headers = {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          };\n\n          if (includeBasicAuth) {\n            headers.Authorization = \"Basic \" + base64.encode(clientId + \":\" + clientSecret);\n          }\n\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap(fetch(revocationEndpoint, {\n            method: 'POST',\n            headers: headers,\n            body: \"token=\" + tokenToRevoke + (sendClientId ? \"&client_id=\" + clientId : '')\n          }).catch(function (error) {\n            throw new Error('Failed to revoke token', error);\n          }));\n\n        case 21:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 22:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var logout = function logout(_ref8, _ref9) {\n  var issuer = _ref8.issuer,\n      serviceConfiguration = _ref8.serviceConfiguration,\n      additionalParameters = _ref8.additionalParameters,\n      _ref8$dangerouslyAllo = _ref8.dangerouslyAllowInsecureHttpRequests,\n      dangerouslyAllowInsecureHttpRequests = _ref8$dangerouslyAllo === void 0 ? false : _ref8$dangerouslyAllo;\n  var idToken = _ref9.idToken,\n      postLogoutRedirectUrl = _ref9.postLogoutRedirectUrl;\n  validateIssuerOrServiceConfigurationEndSessionEndpoint(issuer, serviceConfiguration);\n  validateRedirectUrl(postLogoutRedirectUrl);\n  invariant(idToken, 'Please pass in the ID token');\n  var nativeMethodArguments = [issuer, idToken, postLogoutRedirectUrl, serviceConfiguration, additionalParameters];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n  }\n\n  return RNAppAuth.logout.apply(RNAppAuth, nativeMethodArguments);\n};",
  "map": {
    "version": 3,
    "names": [
      "invariant",
      "base64",
      "RNAppAuth",
      "NativeModules",
      "validateIssuerOrServiceConfigurationEndpoints",
      "issuer",
      "serviceConfiguration",
      "authorizationEndpoint",
      "tokenEndpoint",
      "validateIssuerOrServiceConfigurationRegistrationEndpoint",
      "registrationEndpoint",
      "validateIssuerOrServiceConfigurationRevocationEndpoint",
      "revocationEndpoint",
      "validateIssuerOrServiceConfigurationEndSessionEndpoint",
      "endSessionEndpoint",
      "validateClientId",
      "clientId",
      "validateRedirectUrl",
      "redirectUrl",
      "validateHeaders",
      "headers",
      "customHeaderTypeErrorMessage",
      "authorizedKeys",
      "keys",
      "Object",
      "correctKeys",
      "filter",
      "key",
      "includes",
      "length",
      "values",
      "forEach",
      "value",
      "validateAdditionalHeaders",
      "errorMessage",
      "validateConnectionTimeoutSeconds",
      "timeout",
      "SECOND_IN_MS",
      "DEFAULT_TIMEOUT_IOS",
      "DEFAULT_TIMEOUT_ANDROID",
      "convertTimeoutForPlatform",
      "platform",
      "connectionTimeout",
      "Platform",
      "OS",
      "prefetchConfiguration",
      "warmAndPrefetchChrome",
      "scopes",
      "dangerouslyAllowInsecureHttpRequests",
      "customHeaders",
      "connectionTimeoutSeconds",
      "nativeMethodArguments",
      "register",
      "redirectUrls",
      "responseTypes",
      "grantTypes",
      "subjectType",
      "tokenEndpointAuthMethod",
      "additionalParameters",
      "additionalHeaders",
      "Array",
      "isArray",
      "every",
      "url",
      "rt",
      "gt",
      "push",
      "authorize",
      "clientSecret",
      "useNonce",
      "usePKCE",
      "clientAuthMethod",
      "skipCodeExchange",
      "refresh",
      "refreshToken",
      "revoke",
      "tokenToRevoke",
      "sendClientId",
      "includeBasicAuth",
      "fetch",
      "response",
      "json",
      "openidConfig",
      "revocation_endpoint",
      "Authorization",
      "encode",
      "method",
      "body",
      "catch",
      "error",
      "Error",
      "logout",
      "idToken",
      "postLogoutRedirectUrl"
    ],
    "sources": [
      "C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/node_modules/react-native-app-auth/index.js"
    ],
    "sourcesContent": [
      "import invariant from 'invariant';\nimport { NativeModules, Platform } from 'react-native';\nimport base64 from 'react-native-base64';\n\nconst { RNAppAuth } = NativeModules;\n\nconst validateIssuerOrServiceConfigurationEndpoints = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration &&\n        typeof serviceConfiguration.authorizationEndpoint === 'string' &&\n        typeof serviceConfiguration.tokenEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a service endpoints'\n  );\nconst validateIssuerOrServiceConfigurationRegistrationEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.registrationEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a registration endpoint'\n  );\nconst validateIssuerOrServiceConfigurationRevocationEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.revocationEndpoint === 'string'),\n    'Config error: you must provide either an issuer or a revocation endpoint'\n  );\nconst validateIssuerOrServiceConfigurationEndSessionEndpoint = (issuer, serviceConfiguration) =>\n  invariant(\n    typeof issuer === 'string' ||\n      (serviceConfiguration && typeof serviceConfiguration.endSessionEndpoint === 'string'),\n    'Config error: you must provide either an issuer or an end session endpoint'\n  );\nconst validateClientId = clientId =>\n  invariant(typeof clientId === 'string', 'Config error: clientId must be a string');\nconst validateRedirectUrl = redirectUrl =>\n  invariant(typeof redirectUrl === 'string', 'Config error: redirectUrl must be a string');\n\nconst validateHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n  const customHeaderTypeErrorMessage =\n    'Config error: customHeaders type must be { token?: { [key: string]: string }, authorize?: { [key: string]: string }, register: { [key: string]: string }}';\n\n  const authorizedKeys = ['token', 'authorize', 'register'];\n  const keys = Object.keys(headers);\n  const correctKeys = keys.filter(key => authorizedKeys.includes(key));\n  invariant(\n    keys.length <= authorizedKeys.length &&\n      correctKeys.length > 0 &&\n      correctKeys.length === keys.length,\n    customHeaderTypeErrorMessage\n  );\n\n  Object.values(headers).forEach(value => {\n    invariant(typeof value === 'object', customHeaderTypeErrorMessage);\n    invariant(\n      Object.values(value).filter(key => typeof key !== 'string').length === 0,\n      customHeaderTypeErrorMessage\n    );\n  });\n};\n\nconst validateAdditionalHeaders = headers => {\n  if (!headers) {\n    return;\n  }\n\n  const errorMessage = 'Config error: additionalHeaders must be { [key: string]: string }';\n\n  invariant(typeof headers === 'object', errorMessage);\n  invariant(\n    Object.values(headers).filter(key => typeof key !== 'string').length === 0,\n    errorMessage\n  );\n};\n\nconst validateConnectionTimeoutSeconds = timeout => {\n  if (!timeout) {\n    return;\n  }\n\n  invariant(typeof timeout === 'number', 'Config error: connectionTimeoutSeconds must be a number');\n};\n\nexport const SECOND_IN_MS = 1000;\nexport const DEFAULT_TIMEOUT_IOS = 60;\nexport const DEFAULT_TIMEOUT_ANDROID = 15;\n\nconst convertTimeoutForPlatform = (\n  platform,\n  connectionTimeout = Platform.OS === 'ios' ? DEFAULT_TIMEOUT_IOS : DEFAULT_TIMEOUT_ANDROID\n) => (platform === 'android' ? connectionTimeout * SECOND_IN_MS : connectionTimeout);\n\nexport const prefetchConfiguration = async ({\n  warmAndPrefetchChrome = false,\n  issuer,\n  redirectUrl,\n  clientId,\n  scopes,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  connectionTimeoutSeconds,\n}) => {\n  if (Platform.OS === 'android') {\n    validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n    validateClientId(clientId);\n    validateRedirectUrl(redirectUrl);\n    validateHeaders(customHeaders);\n    validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n\n    const nativeMethodArguments = [\n      warmAndPrefetchChrome,\n      issuer,\n      redirectUrl,\n      clientId,\n      scopes,\n      serviceConfiguration,\n      dangerouslyAllowInsecureHttpRequests,\n      customHeaders,\n      convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n    ];\n\n    RNAppAuth.prefetchConfiguration(...nativeMethodArguments);\n  }\n};\n\nexport const register = ({\n  issuer,\n  redirectUrls,\n  responseTypes,\n  grantTypes,\n  subjectType,\n  tokenEndpointAuthMethod,\n  additionalParameters,\n  serviceConfiguration,\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  connectionTimeoutSeconds,\n}) => {\n  validateIssuerOrServiceConfigurationRegistrationEndpoint(issuer, serviceConfiguration);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n\n  invariant(\n    Array.isArray(redirectUrls) && redirectUrls.every(url => typeof url === 'string'),\n    'Config error: redirectUrls must be an Array of strings'\n  );\n  invariant(\n    responseTypes == null ||\n      (Array.isArray(responseTypes) && responseTypes.every(rt => typeof rt === 'string')),\n    'Config error: if provided, responseTypes must be an Array of strings'\n  );\n  invariant(\n    grantTypes == null ||\n      (Array.isArray(grantTypes) && grantTypes.every(gt => typeof gt === 'string')),\n    'Config error: if provided, grantTypes must be an Array of strings'\n  );\n  invariant(\n    subjectType == null || typeof subjectType === 'string',\n    'Config error: if provided, subjectType must be a string'\n  );\n  invariant(\n    tokenEndpointAuthMethod == null || typeof tokenEndpointAuthMethod === 'string',\n    'Config error: if provided, tokenEndpointAuthMethod must be a string'\n  );\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrls,\n    responseTypes,\n    grantTypes,\n    subjectType,\n    tokenEndpointAuthMethod,\n    additionalParameters,\n    serviceConfiguration,\n    convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n  }\n\n  return RNAppAuth.register(...nativeMethodArguments);\n};\n\nexport const authorize = ({\n  issuer,\n  redirectUrl,\n  clientId,\n  clientSecret,\n  scopes,\n  useNonce = true,\n  usePKCE = true,\n  additionalParameters,\n  serviceConfiguration,\n  clientAuthMethod = 'basic',\n  dangerouslyAllowInsecureHttpRequests = false,\n  customHeaders,\n  additionalHeaders,\n  skipCodeExchange = false,\n  connectionTimeoutSeconds,\n}) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n    skipCodeExchange,\n    convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n    nativeMethodArguments.push(useNonce);\n    nativeMethodArguments.push(usePKCE);\n  }\n\n  return RNAppAuth.authorize(...nativeMethodArguments);\n};\n\nexport const refresh = (\n  {\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    scopes,\n    additionalParameters = {},\n    serviceConfiguration,\n    clientAuthMethod = 'basic',\n    dangerouslyAllowInsecureHttpRequests = false,\n    customHeaders,\n    additionalHeaders,\n    connectionTimeoutSeconds,\n  },\n  { refreshToken }\n) => {\n  validateIssuerOrServiceConfigurationEndpoints(issuer, serviceConfiguration);\n  validateClientId(clientId);\n  validateRedirectUrl(redirectUrl);\n  validateHeaders(customHeaders);\n  validateAdditionalHeaders(additionalHeaders);\n  validateConnectionTimeoutSeconds(connectionTimeoutSeconds);\n  invariant(refreshToken, 'Please pass in a refresh token');\n  // TODO: validateAdditionalParameters\n\n  const nativeMethodArguments = [\n    issuer,\n    redirectUrl,\n    clientId,\n    clientSecret,\n    refreshToken,\n    scopes,\n    additionalParameters,\n    serviceConfiguration,\n    convertTimeoutForPlatform(Platform.OS, connectionTimeoutSeconds),\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(clientAuthMethod);\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n    nativeMethodArguments.push(customHeaders);\n  }\n\n  if (Platform.OS === 'ios') {\n    nativeMethodArguments.push(additionalHeaders);\n  }\n\n  return RNAppAuth.refresh(...nativeMethodArguments);\n};\n\nexport const revoke = async (\n  { clientId, issuer, serviceConfiguration, clientSecret },\n  { tokenToRevoke, sendClientId = false, includeBasicAuth = false }\n) => {\n  invariant(tokenToRevoke, 'Please include the token to revoke');\n  validateClientId(clientId);\n  validateIssuerOrServiceConfigurationRevocationEndpoint(issuer, serviceConfiguration);\n\n  let revocationEndpoint;\n  if (serviceConfiguration && serviceConfiguration.revocationEndpoint) {\n    revocationEndpoint = serviceConfiguration.revocationEndpoint;\n  } else {\n    const response = await fetch(`${issuer}/.well-known/openid-configuration`);\n    const openidConfig = await response.json();\n\n    invariant(\n      openidConfig.revocation_endpoint,\n      'The openid config does not specify a revocation endpoint'\n    );\n\n    revocationEndpoint = openidConfig.revocation_endpoint;\n  }\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n  if (includeBasicAuth) {\n    headers.Authorization = `Basic ${base64.encode(`${clientId}:${clientSecret}`)}`;\n  }\n  /**\n    Identity Server insists on client_id being passed in the body,\n    but Google does not. According to the spec, Google is right\n    so defaulting to no client_id\n    https://tools.ietf.org/html/rfc7009#section-2.1\n  **/\n  return await fetch(revocationEndpoint, {\n    method: 'POST',\n    headers,\n    body: `token=${tokenToRevoke}${sendClientId ? `&client_id=${clientId}` : ''}`,\n  }).catch(error => {\n    throw new Error('Failed to revoke token', error);\n  });\n};\n\nexport const logout = (\n  {\n    issuer,\n    serviceConfiguration,\n    additionalParameters,\n    dangerouslyAllowInsecureHttpRequests = false,\n  },\n  { idToken, postLogoutRedirectUrl }\n) => {\n  validateIssuerOrServiceConfigurationEndSessionEndpoint(issuer, serviceConfiguration);\n  validateRedirectUrl(postLogoutRedirectUrl);\n  invariant(idToken, 'Please pass in the ID token');\n\n  const nativeMethodArguments = [\n    issuer,\n    idToken,\n    postLogoutRedirectUrl,\n    serviceConfiguration,\n    additionalParameters,\n  ];\n\n  if (Platform.OS === 'android') {\n    nativeMethodArguments.push(dangerouslyAllowInsecureHttpRequests);\n  }\n\n  return RNAppAuth.logout(...nativeMethodArguments);\n};\n"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "module"
}
