{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from \"./NotificationPermissionsModule\";\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (NotificationPermissionsModule.getPermissionsAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(NotificationPermissionsModule.getPermissionsAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync(permissions) {\n  var requestedPermissions, requestedPlatformPermissions;\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (NotificationPermissionsModule.requestPermissionsAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n\n        case 2:\n          requestedPermissions = permissions != null ? permissions : {\n            ios: {\n              allowAlert: true,\n              allowBadge: true,\n              allowSound: true\n            }\n          };\n          requestedPlatformPermissions = requestedPermissions[Platform.OS];\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions));\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync\n});","map":{"version":3,"sources":["../src/NotificationPermissions.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAT,EAA+B,QAA/B,EAAyC,mBAAzC,QAAoE,mBAApE;AAMA,OAAO,6BAAP;AAEA,OAAO,SAAe,mBAAf;EAAA;IAAA;MAAA;QAAA;UAAA,IACA,6BAA6B,CAAC,mBAD9B;YAAA;YAAA;UAAA;;UAAA,MAEG,IAAI,mBAAJ,CAAwB,eAAxB,EAAyC,qBAAzC,CAFH;;QAAA;UAAA;UAAA,iCAKQ,6BAA6B,CAAC,mBAA9B,EALR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAQP,OAAO,SAAe,uBAAf,CAAuC,WAAvC;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IACA,6BAA6B,CAAC,uBAD9B;YAAA;YAAA;UAAA;;UAAA,MAEG,IAAI,mBAAJ,CAAwB,eAAxB,EAAyC,yBAAzC,CAFH;;QAAA;UAKC,oBALD,GAKwB,WALxB,WAKwB,WALxB,GAKuC;YAC1C,GAAG,EAAE;cACH,UAAU,EAAE,IADT;cAEH,UAAU,EAAE,IAFT;cAGH,UAAU,EAAE;YAHT;UADqC,CALvC;UAYC,4BAZD,GAYgC,oBAAoB,CAAC,QAAQ,CAAC,EAAV,CAZpD;UAAA;UAAA,iCAaQ,6BAA6B,CAAC,uBAA9B,CAAsD,4BAAtD,CAbR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AA0BP,OAAO,IAAM,cAAc,GAAG,oBAAoB,CAGhD;EACA,aAAa,EAAE,uBADf;EAEA,SAAS,EAAE;AAFX,CAHgD,CAA3C","sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Notifications.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}