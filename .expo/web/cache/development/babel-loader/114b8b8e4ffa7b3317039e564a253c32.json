{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { DeviceType } from \"./Device.types\";\nimport ExpoDevice from \"./ExpoDevice\";\nexport { DeviceType };\nexport var isDevice = ExpoDevice ? ExpoDevice.isDevice : true;\nexport var brand = ExpoDevice ? ExpoDevice.brand : null;\nexport var manufacturer = ExpoDevice ? ExpoDevice.manufacturer : null;\nexport var modelId = ExpoDevice ? ExpoDevice.modelId || null : null;\nexport var modelName = ExpoDevice ? ExpoDevice.modelName : null;\nexport var designName = ExpoDevice ? ExpoDevice.designName || null : null;\nexport var productName = ExpoDevice ? ExpoDevice.productName || null : null;\nexport var deviceYearClass = ExpoDevice ? ExpoDevice.deviceYearClass : null;\nexport var totalMemory = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport var supportedCpuArchitectures = ExpoDevice ? ExpoDevice.supportedCpuArchitectures : null;\nexport var osName = ExpoDevice ? ExpoDevice.osName : null;\nexport var osVersion = ExpoDevice ? ExpoDevice.osVersion : null;\nexport var osBuildId = ExpoDevice ? ExpoDevice.osBuildId : null;\nexport var osInternalBuildId = ExpoDevice ? ExpoDevice.osInternalBuildId : null;\nexport var osBuildFingerprint = ExpoDevice ? ExpoDevice.osBuildFingerprint || null : null;\nexport var platformApiLevel = ExpoDevice ? ExpoDevice.platformApiLevel || null : null;\nexport var deviceName = ExpoDevice ? ExpoDevice.deviceName : null;\nexport function getDeviceTypeAsync() {\n  return _regeneratorRuntime.async(function getDeviceTypeAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoDevice.getDeviceTypeAsync) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getDeviceTypeAsync());\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUptimeAsync() {\n  return _regeneratorRuntime.async(function getUptimeAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoDevice.getUptimeAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getUptimeAsync());\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getMaxMemoryAsync() {\n  var maxMemory;\n  return _regeneratorRuntime.async(function getMaxMemoryAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoDevice.getMaxMemoryAsync) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getMaxMemoryAsync());\n        case 4:\n          maxMemory = _context3.sent;\n          if (maxMemory === -1) {\n            maxMemory = Number.MAX_SAFE_INTEGER;\n          }\n          return _context3.abrupt(\"return\", maxMemory);\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isRootedExperimentalAsync() {\n  return _regeneratorRuntime.async(function isRootedExperimentalAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoDevice.isRootedExperimentalAsync) {\n            _context4.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.isRootedExperimentalAsync());\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isSideLoadingEnabledAsync() {\n  return _regeneratorRuntime.async(function isSideLoadingEnabledAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoDevice.isSideLoadingEnabledAsync) {\n            _context5.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n        case 2:\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.isSideLoadingEnabledAsync());\n        case 4:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPlatformFeaturesAsync() {\n  return _regeneratorRuntime.async(function getPlatformFeaturesAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (ExpoDevice.getPlatformFeaturesAsync) {\n            _context6.next = 2;\n            break;\n          }\n          return _context6.abrupt(\"return\", []);\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.getPlatformFeaturesAsync());\n        case 4:\n          return _context6.abrupt(\"return\", _context6.sent);\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function hasPlatformFeatureAsync(feature) {\n  return _regeneratorRuntime.async(function hasPlatformFeatureAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (ExpoDevice.hasPlatformFeatureAsync) {\n            _context7.next = 2;\n            break;\n          }\n          return _context7.abrupt(\"return\", false);\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExpoDevice.hasPlatformFeatureAsync(feature));\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":"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","names":["UnavailabilityError","DeviceType","ExpoDevice","isDevice","brand","manufacturer","modelId","modelName","designName","productName","deviceYearClass","totalMemory","supportedCpuArchitectures","osName","osVersion","osBuildId","osInternalBuildId","osBuildFingerprint","platformApiLevel","deviceName","getDeviceTypeAsync","getUptimeAsync","getMaxMemoryAsync","maxMemory","Number","MAX_SAFE_INTEGER","isRootedExperimentalAsync","isSideLoadingEnabledAsync","getPlatformFeaturesAsync","hasPlatformFeatureAsync","feature"],"sourceRoot":"","sources":["../src/Device.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport { DeviceType } from './Device.types';\nimport ExpoDevice from './ExpoDevice';\n\nexport { DeviceType };\n\nexport const isDevice: boolean = ExpoDevice ? ExpoDevice.isDevice : true;\nexport const brand: string | null = ExpoDevice ? ExpoDevice.brand : null;\nexport const manufacturer: string | null = ExpoDevice ? ExpoDevice.manufacturer : null;\nexport const modelId = ExpoDevice ? ExpoDevice.modelId || null : null;\nexport const modelName: string | null = ExpoDevice ? ExpoDevice.modelName : null;\nexport const designName: string | null = ExpoDevice ? ExpoDevice.designName || null : null;\nexport const productName: string | null = ExpoDevice ? ExpoDevice.productName || null : null;\nexport const deviceYearClass: number | null = ExpoDevice ? ExpoDevice.deviceYearClass : null;\nexport const totalMemory: number | null = ExpoDevice ? ExpoDevice.totalMemory : null;\nexport const supportedCpuArchitectures: string[] | null = ExpoDevice\n  ? ExpoDevice.supportedCpuArchitectures\n  : null;\nexport const osName: string | null = ExpoDevice ? ExpoDevice.osName : null;\nexport const osVersion: string | null = ExpoDevice ? ExpoDevice.osVersion : null;\nexport const osBuildId: string | null = ExpoDevice ? ExpoDevice.osBuildId : null;\nexport const osInternalBuildId: string | null = ExpoDevice ? ExpoDevice.osInternalBuildId : null;\nexport const osBuildFingerprint: string | null = ExpoDevice\n  ? ExpoDevice.osBuildFingerprint || null\n  : null;\nexport const platformApiLevel: number | null = ExpoDevice\n  ? ExpoDevice.platformApiLevel || null\n  : null;\nexport const deviceName: string | null = ExpoDevice ? ExpoDevice.deviceName : null;\n\nexport async function getDeviceTypeAsync(): Promise<DeviceType> {\n  if (!ExpoDevice.getDeviceTypeAsync) {\n    throw new UnavailabilityError('expo-device', 'getDeviceTypeAsync');\n  }\n  return await ExpoDevice.getDeviceTypeAsync();\n}\n\nexport async function getUptimeAsync(): Promise<number> {\n  if (!ExpoDevice.getUptimeAsync) {\n    throw new UnavailabilityError('expo-device', 'getUptimeAsync');\n  }\n  return await ExpoDevice.getUptimeAsync();\n}\n\nexport async function getMaxMemoryAsync(): Promise<number> {\n  if (!ExpoDevice.getMaxMemoryAsync) {\n    throw new UnavailabilityError('expo-device', 'getMaxMemoryAsync');\n  }\n  let maxMemory = await ExpoDevice.getMaxMemoryAsync();\n  if (maxMemory === -1) {\n    maxMemory = Number.MAX_SAFE_INTEGER;\n  }\n  return maxMemory;\n}\n\nexport async function isRootedExperimentalAsync(): Promise<boolean> {\n  if (!ExpoDevice.isRootedExperimentalAsync) {\n    throw new UnavailabilityError('expo-device', 'isRootedExperimentalAsync');\n  }\n  return await ExpoDevice.isRootedExperimentalAsync();\n}\n\nexport async function isSideLoadingEnabledAsync(): Promise<boolean> {\n  if (!ExpoDevice.isSideLoadingEnabledAsync) {\n    throw new UnavailabilityError('expo-device', 'isSideLoadingEnabledAsync');\n  }\n  return await ExpoDevice.isSideLoadingEnabledAsync();\n}\n\nexport async function getPlatformFeaturesAsync(): Promise<string[]> {\n  if (!ExpoDevice.getPlatformFeaturesAsync) {\n    return [];\n  }\n  return await ExpoDevice.getPlatformFeaturesAsync();\n}\n\nexport async function hasPlatformFeatureAsync(feature: string): Promise<boolean> {\n  if (!ExpoDevice.hasPlatformFeatureAsync) {\n    return false;\n  }\n  return await ExpoDevice.hasPlatformFeatureAsync(feature);\n}\n"]},"metadata":{},"sourceType":"module"}