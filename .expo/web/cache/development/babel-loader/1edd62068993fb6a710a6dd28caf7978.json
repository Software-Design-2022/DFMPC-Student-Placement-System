{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { firebase } from \"../firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\nexport function getList(onReceiveList) {\n  var notifications, snapshot;\n  return _regeneratorRuntime.async(function getList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          notifications = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"notifications\").get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              notifications.push({\n                key: doc.data().id,\n                userID: doc.data().userID,\n                userName: doc.data().userName,\n                heading: doc.data().heading,\n                message: doc.data().message,\n                time: doc.data().time,\n                date: doc.data().date,\n                day: doc.data().day,\n                body: doc.data().body\n              });\n            });\n          }));\n\n        case 3:\n          snapshot = _context.sent;\n          onReceiveList(notifications);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["firebase","v4","uuidv4","getList","onReceiveList","notifications","firestore","collection","get","then","querySnapshot","forEach","doc","push","key","data","id","userID","userName","heading","message","time","date","day","body","snapshot"],"sources":["/home/cipher73/Coding Projects/Sprint3-final/DFMPC-Student-Placement-System/Screens/notificationHelper.js"],"sourcesContent":["import { firebase } from \"../firebase\";\n\nimport { v4 as uuidv4 } from \"uuid\"; // Generate random UUID\n\n\nexport async function getList(onReceiveList) {\n  // Get list of all items in the database\n  var notifications = []; // Create empty array to store all items in database\n\n  var snapshot = await firebase \n    .firestore()\n    .collection(\"notifications\") \n    .get() \n    .then((querySnapshot) => {\n      querySnapshot.forEach(function (doc) {\n        // For each item in collection\n        notifications.push({\n          // Add item to array\n          key: doc.data().id, \n          userID: doc.data().userID,\n          userName: doc.data().userName, \n          heading: doc.data().heading, \n          message: doc.data().message, \n          time: doc.data().time, \n          date: doc.data().date,  \n          day: doc.data().day, \n          body: doc.data().body,    \n        });\n      });\n    });\n\n  onReceiveList(notifications); // Send array to function that called this function\n}\n"],"mappings":";AAAA,SAASA,QAAT;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAGA,OAAO,SAAeC,OAAf,CAAuBC,aAAvB;EAAA;EAAA;IAAA;MAAA;QAAA;UAEDC,aAFC,GAEe,EAFf;UAAA;UAAA,iCAIgBL,QAAQ,CAC1BM,SADkB,GAElBC,UAFkB,CAEP,eAFO,EAGlBC,GAHkB,GAIlBC,IAJkB,CAIb,UAACC,aAAD,EAAmB;YACvBA,aAAa,CAACC,OAAd,CAAsB,UAAUC,GAAV,EAAe;cAEnCP,aAAa,CAACQ,IAAd,CAAmB;gBAEjBC,GAAG,EAAEF,GAAG,CAACG,IAAJ,GAAWC,EAFC;gBAGjBC,MAAM,EAAEL,GAAG,CAACG,IAAJ,GAAWE,MAHF;gBAIjBC,QAAQ,EAAEN,GAAG,CAACG,IAAJ,GAAWG,QAJJ;gBAKjBC,OAAO,EAAEP,GAAG,CAACG,IAAJ,GAAWI,OALH;gBAMjBC,OAAO,EAAER,GAAG,CAACG,IAAJ,GAAWK,OANH;gBAOjBC,IAAI,EAAET,GAAG,CAACG,IAAJ,GAAWM,IAPA;gBAQjBC,IAAI,EAAEV,GAAG,CAACG,IAAJ,GAAWO,IARA;gBASjBC,GAAG,EAAEX,GAAG,CAACG,IAAJ,GAAWQ,GATC;gBAUjBC,IAAI,EAAEZ,GAAG,CAACG,IAAJ,GAAWS;cAVA,CAAnB;YAYD,CAdD;UAeD,CApBkB,CAJhB;;QAAA;UAIDC,QAJC;UA0BLrB,aAAa,CAACC,aAAD,CAAb;;QA1BK;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}