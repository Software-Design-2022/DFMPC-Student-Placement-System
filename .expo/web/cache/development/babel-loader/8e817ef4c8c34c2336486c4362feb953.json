{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\nimport { getSchedule } from \"../Screens/RetrieveSchedules\";\nimport studentData from \"../dfmpc-student-placement-system.json\";\nimport AppContext from \"../AppContext\";\nimport \"../global.js\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { setStatusBarNetworkActivityIndicatorVisible } from \"expo-status-bar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar buttonHeight = 50;\nvar textPos = buttonHeight / 2;\nvar SPACING = 20;\nvar AVATAR_SIZE = 70;\nvar ICON_SIZE = 80;\nvar dateToPass = \"\";\nvar specialty = \"\";\nvar RANGE = 12;\nvar initialDate = \"2022-01-02\";\nvar usersAgenda = {};\nvar days = \"\";\n\nvar CalendarView = function CalendarView() {\n  var navigation = useNavigation();\n  var myContext = useContext(AppContext);\n\n  var _useState = useState(initialDate),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDate = _useState2[0],\n      setSelectedDate = _useState2[1];\n\n  var _useState3 = useState({\n    scheduleList: [{\n      key: 0,\n      student_id: \"\",\n      SpecialtyName: \"\",\n      hospital_id: \"\",\n      specialty_duration: \"\",\n      start_date: \"\",\n      end_date: \"\",\n      specialty_id: \"\"\n    }]\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var onReceive = function onReceive(scheduleList) {\n    setState(function (prevState) {\n      return {\n        scheduleList: prevState.scheduleList = scheduleList\n      };\n    });\n  };\n\n  getSchedule(onReceive);\n\n  var onDayPress = function onDayPress(day) {\n    console.log(\"Just ran the redundant function\");\n  };\n\n  return _jsx(View, {\n    children: _jsx(CalendarList, {\n      current: initialDate,\n      pastScrollRange: 3,\n      futureScrollRange: RANGE,\n      theme: theme,\n      onDayPress: function onDayPress(day) {\n        setSelectedDate(day.dateString);\n        dateToPass = day.dateString;\n        console.log(\"dateToPass value before navigation:\", dateToPass);\n        navigation.navigate(\"DayAgenda\");\n      },\n      markingType: \"period\",\n      markedDates: generateSchedule(onReceive)\n    })\n  });\n};\n\nvar generateSchedule = function generateSchedule(onReceive) {};\n\nvar getDaysInWeek = function getDaysInWeek(startDate, endDate) {\n  var dates = [];\n  var start = new Date(startDate);\n  var end = new Date(endDate);\n  var time = Date.getTime(start, end);\n  var formattedDate = time.toISOString().split(\"T\")[0];\n  dates.push(formattedDate);\n  return dates;\n};\n\nvar theme = {\n  \"stylesheet.calendar.header\": {\n    dayHeader: {\n      fontWeight: \"600\",\n      color: \"#48BFE3\"\n    }\n  },\n  \"stylesheet.day.basic\": {\n    today: {\n      borderColor: \"#48BFE3\",\n      borderWidth: 0.8\n    },\n    todayText: {\n      color: \"#5390D9\",\n      fontWeight: \"800\"\n    }\n  }\n};\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    backgroundColor: \"white\",\n    marginTop: 10,\n    borderRadius: 20,\n    flex: 1,\n    borderColor: \"rgba(36,50,61,1)\",\n    borderWidth: 5\n  }\n});\nexport default CalendarView;\nexport { dateToPass };\nexport { days };","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigation","Calendar","CalendarList","Agenda","getSchedule","studentData","AppContext","NavigationContainer","setStatusBarNetworkActivityIndicatorVisible","buttonHeight","textPos","SPACING","AVATAR_SIZE","ICON_SIZE","dateToPass","specialty","RANGE","initialDate","usersAgenda","days","CalendarView","navigation","myContext","selectedDate","setSelectedDate","scheduleList","key","student_id","SpecialtyName","hospital_id","specialty_duration","start_date","end_date","specialty_id","state","setState","onReceive","prevState","onDayPress","day","console","log","theme","dateString","navigate","generateSchedule","getDaysInWeek","startDate","endDate","dates","start","Date","end","time","getTime","formattedDate","toISOString","split","push","dayHeader","fontWeight","color","today","borderColor","borderWidth","todayText","styles","StyleSheet","create","container","marginTop","backgroundColor","borderRadius","flex"],"sources":["C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/Screens/CalendarView.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n\r\n  View,\r\n} from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport { getSchedule } from \"../Screens/RetrieveSchedules\";\r\nimport studentData from \"../dfmpc-student-placement-system.json\";\r\nimport AppContext from \"../AppContext\";\r\nimport \"../global.js\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { setStatusBarNetworkActivityIndicatorVisible } from \"expo-status-bar\";\r\n\r\n//constants\r\nconst buttonHeight = 50;\r\nconst textPos = buttonHeight / 2;\r\nconst SPACING = 20;\r\nconst AVATAR_SIZE = 70;\r\nconst ICON_SIZE = 80;\r\nvar dateToPass = \"\";\r\nvar specialty = \"\";\r\nconst RANGE = 12;\r\nconst initialDate = \"2022-01-02\";\r\nvar usersAgenda = {};\r\nconst days=\"\"; //@Noku - this is what I used to fix the Calendar\r\n\r\nconst CalendarView = () => {\r\n  //use navigation\r\n  const navigation = useNavigation();\r\n  const myContext = useContext(AppContext);\r\n  // Keeps track of selected date\r\n  const [selectedDate, setSelectedDate] = useState(initialDate);\r\n\r\n  const [state, setState] = useState({\r\n    //@Noku -  this useState will be used to set the current state of our data\r\n  // sets scheduleList to the data from database (firestore)\r\n    scheduleList: [\r\n      {\r\n      key: 0,\r\n      student_id:\"\",\r\n      SpecialtyName:\"\",\r\n      hospital_id:\"\",\r\n      specialty_duration:\"\",\r\n      start_date:\"\",\r\n      end_date:\"\",\r\n      specialty_id:\"\",\r\n      },\r\n    ],\r\n  })\r\n \r\n  const onReceive = (scheduleList) => {\r\n        // @Noku - when the list is received we set our scheduleList to the current received list (updating)\r\n\r\n    setState((prevState) => ({\r\n      scheduleList: (prevState.scheduleList = scheduleList),\r\n    }));\r\n  };\r\n  // getSchedule is a function from RetrieveSchedules.js\r\n  // it gets the student specific schedule list containing data from firestore\r\n  getSchedule(onReceive);\r\n\r\n  // User's agenda\r\n  // What to do when day is pressed.\r\n  const onDayPress = (day) => {\r\n    console.log(\"Just ran the redundant function\");\r\n  };\r\n\r\n  return (\r\n    <View>\r\n    <CalendarList\r\n      // testID={testIDs.calendarList.CONTAINER}\r\n      current={initialDate}\r\n      pastScrollRange={3}\r\n      futureScrollRange={RANGE}\r\n      // renderHeader={renderCustomHeader}\r\n      theme={theme}\r\n      onDayPress={(day) => {\r\n        setSelectedDate(day.dateString);\r\n        dateToPass = day.dateString;\r\n        console.log(\"dateToPass value before navigation:\", dateToPass);\r\n        navigation.navigate(\"DayAgenda\"); // @Noku Does this js file exist? \r\n      }}\r\n      markingType=\"period\"\r\n      // * The generateSchedule method does way too much at once, really caused issues with understanding\r\n      // I need to add back in the \"created_at\",\"updated_at\", \"hospital_id\", \"specialty_id\" into the generate Schedule function then strip out only the marked dates format.\r\n      markedDates={generateSchedule(onReceive)} // now this function is the wrong format only to include: color, textColor and [startDate,endDate]\r\n    />\r\n    </View>\r\n  );\r\n};\r\n\r\n\r\nconst generateSchedule = (onReceive) => {\r\n   // @Noku - this is the function needs work\r\n};\r\n\r\n// get days that the specialty will run over using specialty duration\r\nconst getDaysInWeek = (startDate, endDate) => {\r\n  //@Noku, I edited this to find the number of days between start and end date\r\n  let dates = [];\r\n\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n  const time = Date.getTime(start, end);\r\n  const formattedDate = time.toISOString().split(\"T\")[0];\r\n  dates.push(formattedDate);\r\n  return dates;\r\n};\r\n\r\n\r\n\r\nconst theme = {\r\n  \"stylesheet.calendar.header\": {\r\n    dayHeader: {\r\n      fontWeight: \"600\",\r\n      color: \"#48BFE3\",\r\n    },\r\n  },\r\n  \"stylesheet.day.basic\": {\r\n    today: {\r\n      borderColor: \"#48BFE3\",\r\n      borderWidth: 0.8,\r\n    },\r\n    todayText: {\r\n      color: \"#5390D9\",\r\n      fontWeight: \"800\",\r\n    },\r\n  },\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 20,\r\n    backgroundColor: \"white\",\r\n    marginTop: 10,\r\n    borderRadius: 20,\r\n    flex: 1,\r\n    borderColor: \"rgba(36,50,61,1)\",\r\n    borderWidth: 5,\r\n  },\r\n});\r\n\r\nexport default CalendarView;\r\n\r\nexport { dateToPass };\r\nexport{ days};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}