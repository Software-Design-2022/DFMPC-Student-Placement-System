{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"onPress\", \"theme\", \"status\", \"value\", \"testID\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { RadioButtonContext } from \"./RadioButtonGroup\";\nimport { handlePress, isChecked } from \"./utils\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar RadioButtonIOS = function RadioButtonIOS(_ref) {\n  var disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      status = _ref.status,\n      value = _ref.value,\n      testID = _ref.testID,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  var rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return React.createElement(RadioButtonContext.Consumer, null, function (context) {\n    var checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status: status,\n      value: value\n    }) === 'checked';\n    return React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : function () {\n        handlePress({\n          onPress: onPress,\n          value: value,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange\n        });\n      },\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled: disabled,\n        checked: checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), React.createElement(View, {\n      style: {\n        opacity: checked ? 1 : 0\n      }\n    }, React.createElement(MaterialCommunityIcon, {\n      allowFontScaling: false,\n      name: \"check\",\n      size: 24,\n      color: checkedColor,\n      direction: \"ltr\"\n    })));\n  });\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(RadioButtonIOS);\nvar RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };","map":{"version":3,"mappings":"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","names":["React","color","RadioButtonContext","handlePress","isChecked","MaterialCommunityIcon","TouchableRipple","withTheme","RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","Consumer","context","checked","contextValue","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","opacity","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","RadioButtonIOSWithTheme"],"sources":["RadioButtonIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}