{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport mergeOptions from 'merge-options';\nvar merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\n\nvar mergeLocalStorageItem = function mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n  var oldObject = JSON.parse(oldValue);\n  var newObject = JSON.parse(value);\n  var nextValue = JSON.stringify(merge(oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nvar createPromise = function createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n\n      if (callback) {\n        callback(null, value);\n      }\n\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n\n      reject(err);\n    }\n  });\n};\n\nvar createPromiseAll = function createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var value = processResult ? processResult(result) : null;\n    callback && callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback && callback(errors);\n    return Promise.reject(errors);\n  });\n};\n\nvar AsyncStorage = function () {\n  function AsyncStorage() {\n    _classCallCheck(this, AsyncStorage);\n  }\n\n  _createClass(AsyncStorage, null, [{\n    key: \"getItem\",\n    value: function getItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.getItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value, callback) {\n      return createPromise(function () {\n        window.localStorage.setItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.removeItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"mergeItem\",\n    value: function mergeItem(key, value, callback) {\n      return createPromise(function () {\n        mergeLocalStorageItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(callback) {\n      return createPromise(function () {\n        window.localStorage.clear();\n      }, callback);\n    }\n  }, {\n    key: \"getAllKeys\",\n    value: function getAllKeys(callback) {\n      return createPromise(function () {\n        var numberOfKeys = window.localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < numberOfKeys; i += 1) {\n          var key = window.localStorage.key(i);\n          keys.push(key);\n        }\n\n        return keys;\n      }, callback);\n    }\n  }, {\n    key: \"flushGetRequests\",\n    value: function flushGetRequests() {}\n  }, {\n    key: \"multiGet\",\n    value: function multiGet(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.getItem(key);\n      });\n\n      var processResult = function processResult(result) {\n        return result.map(function (value, i) {\n          return [keys[i], value];\n        });\n      };\n\n      return createPromiseAll(promises, callback, processResult);\n    }\n  }, {\n    key: \"multiSet\",\n    value: function multiSet(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.setItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiRemove\",\n    value: function multiRemove(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.removeItem(key);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiMerge\",\n    value: function multiMerge(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.mergeItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }]);\n\n  return AsyncStorage;\n}();\n\nexport { AsyncStorage as default };","map":{"version":3,"sources":["AsyncStorage.js"],"names":["merge","concatArrays","ignoreUndefined","mergeLocalStorageItem","oldValue","window","oldObject","JSON","newObject","nextValue","createPromise","value","getValue","callback","resolve","reject","createPromiseAll","result","processResult","Promise","errors","getItem","setItem","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","keys","i","key","flushGetRequests","multiGet","promises","AsyncStorage","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport mergeOptions from 'merge-options';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nconst mergeLocalStorageItem = (key, value) => {\n  const oldValue = window.localStorage.getItem(key);\n  const oldObject = JSON.parse(oldValue);\n  const newObject = JSON.parse(value);\n  const nextValue = JSON.stringify(merge(oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nconst createPromise = (getValue, callback): Promise<*> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\n\nconst createPromiseAll = (promises, callback, processResult): Promise<*> => {\n  return Promise.all(promises).then(\n    result => {\n      const value = processResult ? processResult(result) : null;\n      callback && callback(null, value);\n      return Promise.resolve(value);\n    },\n    errors => {\n      callback && callback(errors);\n      return Promise.reject(errors);\n    }\n  );\n};\n\nexport default class AsyncStorage {\n\n  /**\n   * Fetches `key` value.\n   */\n  static getItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.getItem(key);\n    }, callback);\n  }\n\n  /**\n   * Sets `value` for `key`.\n   */\n  static setItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.setItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Removes a `key`\n   */\n  static removeItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  }\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  static mergeItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      mergeLocalStorageItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  static clear(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.clear();\n    }, callback);\n  }\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  static getAllKeys(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i);\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  }\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  static flushGetRequests() {}\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  static multiGet(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  }\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiSet(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  static multiRemove(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiMerge(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}