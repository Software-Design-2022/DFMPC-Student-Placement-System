{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { firebase } from \"../firebase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport function getList(onReceiveList) {\n  var protocols, snapshot;\n  return _regeneratorRuntime.async(function getList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          protocols = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"emergency_protocols\").get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              protocols.push({\n                key: protocols.length + 1,\n                Protocol: doc.id,\n                content: doc.data().protocol_1.split(\"~\")\n              });\n            });\n          }));\n        case 3:\n          snapshot = _context.sent;\n          onReceiveList(protocols);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["firebase","v4","uuidv4","getList","onReceiveList","protocols","firestore","collection","get","then","querySnapshot","forEach","doc","push","key","length","Protocol","id","content","data","protocol_1","split","snapshot"],"sources":["D:/repos/DFMPC-Student-Placement-System/Screens/ListApi.js"],"sourcesContent":["import { firebase } from \"../firebase\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\"; // Generate random UUID\r\n\r\nexport async function getList(onReceiveList) {\r\n  // Get list of all items in the database\r\n  var protocols = []; // Create empty array to store all items in database\r\n\r\n  var snapshot = await firebase // Get all items in database\r\n    .firestore()\r\n    .collection(\"emergency_protocols\") // Get collection of protocols\r\n    .get() // Get all items in collection\r\n    .then((querySnapshot) => {\r\n      // For each item in collection\r\n      querySnapshot.forEach(function (doc) {\r\n        // For each item in collection\r\n        protocols.push({\r\n          // Add item to array\r\n          key: protocols.length + 1, // Add key to item\r\n          Protocol: doc.id, // Add item to array\r\n          content: doc.data().protocol_1.split(\"~\"), // Format item using split and join\r\n        });\r\n      });\r\n    });\r\n\r\n  onReceiveList(protocols); // Send array to function that called this function\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ;AAEjB,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;;AAEnC,OAAO,SAAeC,OAAO,CAACC,aAAa;EAAA;EAAA;IAAA;MAAA;QAAA;UAErCC,SAAS,GAAG,EAAE;UAAA;UAAA,iCAEGL,QAAQ,CAC1BM,SAAS,EAAE,CACXC,UAAU,CAAC,qBAAqB,CAAC,CACjCC,GAAG,EAAE,CACLC,IAAI,CAAC,UAACC,aAAa,EAAK;YAEvBA,aAAa,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;cAEnCP,SAAS,CAACQ,IAAI,CAAC;gBAEbC,GAAG,EAAET,SAAS,CAACU,MAAM,GAAG,CAAC;gBACzBC,QAAQ,EAAEJ,GAAG,CAACK,EAAE;gBAChBC,OAAO,EAAEN,GAAG,CAACO,IAAI,EAAE,CAACC,UAAU,CAACC,KAAK,CAAC,GAAG;cAC1C,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;QAAA;UAfAC,QAAQ;UAiBZlB,aAAa,CAACC,SAAS,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}