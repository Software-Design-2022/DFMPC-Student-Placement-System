{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar lastSetBadgeCount = 0;\nvar badgeModule = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function getBadgeCountAsync() {\n    return _regeneratorRuntime.async(function getBadgeCountAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", lastSetBadgeCount);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setBadgeCountAsync: function setBadgeCountAsync(badgeCount, options) {\n    var badgin;\n    return _regeneratorRuntime.async(function setBadgeCountAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof window === 'undefined')) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 2:\n            badgin = require('badgin');\n\n            if (badgeCount > 0) {\n              badgin.set(badgeCount, options);\n            } else {\n              badgin.clear();\n            }\n\n            lastSetBadgeCount = badgeCount;\n            return _context2.abrupt(\"return\", true);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default badgeModule;","map":{"version":3,"mappings":";AAEA,IAAIA,iBAAiB,GAAG,CAAxB;AAEA,IAAMC,WAAW,GAAgB;EAC/BC,WAAW,EAAE,uBAAK,CAAG,CADU;EAE/BC,eAAe,EAAE,2BAAK,CAAG,CAFM;EAG/BC,kBAAkB,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA,iCACXJ,iBADW;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAHW;EAM/BK,kBAAkB,EAAE,4BAAOC,UAAP,EAAmBC,OAAnB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAGd,OAAOC,MAAP,KAAkB,WAHJ;cAAA;cAAA;YAAA;;YAAA,kCAIT,KAJS;;UAAA;YAMZC,MANY,GAMHC,OAAO,CAAC,QAAD,CANJ;;YAOlB,IAAIJ,UAAU,GAAG,CAAjB,EAAoB;cAClBG,MAAM,CAACE,GAAP,CAAWL,UAAX,EAAuBC,OAAvB;YACD,CAFD,MAEO;cACLE,MAAM,CAACG,KAAP;YACD;;YACDZ,iBAAiB,GAAGM,UAApB;YAZkB,kCAaX,IAbW;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AANW,CAAjC;AAuBA,eAAeL,WAAf","names":["lastSetBadgeCount","badgeModule","addListener","removeListeners","getBadgeCountAsync","setBadgeCountAsync","badgeCount","options","window","badgin","require","set","clear"],"sourceRoot":"","sources":["../src/BadgeModule.web.ts"],"sourcesContent":["import { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nconst badgeModule: BadgeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount, options) => {\n    // If this module is loaded in SSR (NextJS), we can't modify the badge.\n    // It also can't load the badgin module, that instantly invokes methods on window.\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    const badgin = require('badgin');\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n};\n\nexport default badgeModule;\n"]},"metadata":{},"sourceType":"module"}