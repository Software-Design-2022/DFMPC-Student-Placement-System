{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\nexport default function getDevicePushTokenAsync() {\n  var data;\n  return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(_subscribeDeviceToPushNotificationsAsync());\n\n        case 2:\n          data = _context.sent;\n          SyntheticPlatformEmitter.emit('onDevicePushToken', {\n            devicePushToken: data\n          });\n          return _context.abrupt(\"return\", {\n            type: Platform.OS,\n            data: data\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n\n  if (!navigator.serviceWorker) {\n    throw new CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n\n  if (Notification.permission !== 'granted') {\n    throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', \"Cannot use web notifications without permissions granted. Request permissions with \\\"expo-permissions\\\".\");\n  }\n}\n\nfunction _subscribeDeviceToPushNotificationsAsync() {\n  var _Constants$manifest$n, _Constants$manifest, _Constants$manifest$n2, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest2$3, _Constants$manifest$n3, _Constants$manifest3, _Constants$manifest4, _Constants$manifest4$, _Constants$manifest4$2, _Constants$manifest4$3, _ref, _Constants$manifest$n4, _Constants$manifest5, _Constants$manifest6, _Constants$manifest6$, _Constants$manifest6$2;\n\n  var vapidPublicKey, serviceWorkerPath, registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regeneratorRuntime.async(function _subscribeDeviceToPushNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          vapidPublicKey = (_Constants$manifest$n = (_Constants$manifest = Constants.manifest) == null ? void 0 : (_Constants$manifest$n2 = _Constants$manifest.notification) == null ? void 0 : _Constants$manifest$n2.vapidPublicKey) != null ? _Constants$manifest$n : (_Constants$manifest2 = Constants.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) == null ? void 0 : (_Constants$manifest2$3 = _Constants$manifest2$2.notification) == null ? void 0 : _Constants$manifest2$3.vapidPublicKey;\n\n          if (vapidPublicKey) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n\n        case 3:\n          serviceWorkerPath = (_Constants$manifest$n3 = (_Constants$manifest3 = Constants.manifest) == null ? void 0 : _Constants$manifest3.notification.serviceWorkerPath) != null ? _Constants$manifest$n3 : (_Constants$manifest4 = Constants.manifest2) == null ? void 0 : (_Constants$manifest4$ = _Constants$manifest4.extra) == null ? void 0 : (_Constants$manifest4$2 = _Constants$manifest4$.expoClient) == null ? void 0 : (_Constants$manifest4$3 = _Constants$manifest4$2.notification) == null ? void 0 : _Constants$manifest4$3.serviceWorkerPath;\n\n          if (serviceWorkerPath) {\n            _context2.next = 6;\n            break;\n          }\n\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.');\n\n        case 6:\n          guardPermission();\n          registration = null;\n          _context2.prev = 8;\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.register(serviceWorkerPath));\n\n        case 11:\n          registration = _context2.sent;\n          _context2.next = 17;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.t0 = _context2[\"catch\"](8);\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', \"Could not register this device for push notifications because the service worker (\" + serviceWorkerPath + \") could not be registered: \" + _context2.t0);\n\n        case 17:\n          _context2.next = 19;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);\n\n        case 19:\n          if (registration.active) {\n            _context2.next = 21;\n            break;\n          }\n\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n\n        case 21:\n          subscribeOptions = {\n            userVisibleOnly: true,\n            applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey)\n          };\n          pushSubscription = null;\n          _context2.prev = 23;\n          _context2.next = 26;\n          return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions));\n\n        case 26:\n          pushSubscription = _context2.sent;\n          _context2.next = 32;\n          break;\n\n        case 29:\n          _context2.prev = 29;\n          _context2.t1 = _context2[\"catch\"](23);\n          throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + _context2.t1 + ')');\n\n        case 32:\n          pushSubscriptionJson = pushSubscription.toJSON();\n          subscriptionObject = {\n            endpoint: pushSubscriptionJson.endpoint,\n            keys: {\n              p256dh: pushSubscriptionJson.keys.p256dh,\n              auth: pushSubscriptionJson.keys.auth\n            }\n          };\n          notificationIcon = ((_ref = (_Constants$manifest$n4 = (_Constants$manifest5 = Constants.manifest) == null ? void 0 : _Constants$manifest5.notification) != null ? _Constants$manifest$n4 : (_Constants$manifest6 = Constants.manifest2) == null ? void 0 : (_Constants$manifest6$ = _Constants$manifest6.extra) == null ? void 0 : (_Constants$manifest6$2 = _Constants$manifest6$.expoClient) == null ? void 0 : _Constants$manifest6$2.notification) != null ? _ref : {}).icon;\n          _context2.next = 37;\n          return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({\n            fromExpoWebClient: {\n              notificationIcon: notificationIcon\n            }\n          })));\n\n        case 37:\n          return _context2.abrupt(\"return\", subscriptionObject);\n\n        case 38:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[8, 14], [23, 29]], Promise);\n}\n\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"sources":["../src/getDevicePushTokenAsync.web.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform, SyntheticPlatformEmitter } from 'expo-modules-core';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  SyntheticPlatformEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  const vapidPublicKey: string | null =\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest?.notification?.vapidPublicKey ??\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest2?.extra?.expoClient?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const serviceWorkerPath =\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest?.notification.serviceWorkerPath ??\n    // @ts-expect-error: TODO: not on the schema\n    Constants.manifest2?.extra?.expoClient?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Please provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (\n    Constants.manifest?.notification ??\n    Constants.manifest2?.extra?.expoClient?.notification ??\n    {}\n  ).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}