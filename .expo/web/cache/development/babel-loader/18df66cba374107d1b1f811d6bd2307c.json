{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { db } from \"../firebase\";\nimport { v4 as uuidv4 } from 'uuid';\nexport function getSchedule(onReceiveList) {\n  var schedules, ref, snapshot;\n  return _regeneratorRuntime.async(function getSchedule$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          schedules = [];\n          ref = db.collection(\"schedules\");\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(ref.get());\n\n        case 4:\n          snapshot = _context.sent;\n          snapshot.forEach(function (doc) {\n            querySnapshot.forEach(function (doc) {\n              schedules.push({\n                key1: schedules.length + 1,\n                student_id: doc.data().student_id,\n                SpecialtyName: doc.data().SpecialtyName,\n                hospital_ID: doc.data().hospital_id,\n                specialty_duration: doc.data().specialty_duration,\n                start_date: doc.data().start_date,\n                end_date: doc.data().end_date,\n                specialty_id: doc.data().specialty_id,\n                updated_at: doc.data().updated_at,\n                week_no: doc.data().week_no\n              });\n            });\n          });\n          onReceiveList(schedules);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["db","v4","uuidv4","getSchedule","onReceiveList","schedules","ref","collection","get","snapshot","forEach","doc","querySnapshot","push","key1","length","student_id","data","SpecialtyName","hospital_ID","hospital_id","specialty_duration","start_date","end_date","specialty_id","updated_at","week_no"],"sources":["C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/Screens/RetrieveSchedules.js"],"sourcesContent":["import {db} from \"../firebase\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n\r\n\r\nexport async function getSchedule(onReceiveList) {\r\n    var schedules = [];\r\n    const ref = db.collection(\"schedules\");\r\n    var snapshot = await ref.get();\r\n    \r\n    snapshot.forEach((doc) => {\r\n        querySnapshot.forEach((doc) => {\r\n            schedules.push({\r\n                key1: schedules.length + 1,\r\n                student_id: doc.data().student_id,\r\n                SpecialtyName: doc.data().SpecialtyName,\r\n                hospital_ID: doc.data().hospital_id,\r\n                specialty_duration: doc.data().specialty_duration,\r\n                start_date: doc.data().start_date,\r\n                end_date: doc.data().end_date,\r\n                specialty_id: doc.data().specialty_id,\r\n                updated_at: doc.data().updated_at,\r\n                week_no: doc.data().week_no,\r\n            });\r\n    });\r\n});\r\n\r\n   onReceiveList(schedules);\r\n}"],"mappings":";AAAA,SAAQA,EAAR;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAMA,OAAO,SAAeC,WAAf,CAA2BC,aAA3B;EAAA;EAAA;IAAA;MAAA;QAAA;UACCC,SADD,GACa,EADb;UAEGC,GAFH,GAESN,EAAE,CAACO,UAAH,CAAc,WAAd,CAFT;UAAA;UAAA,iCAGkBD,GAAG,CAACE,GAAJ,EAHlB;;QAAA;UAGCC,QAHD;UAKHA,QAAQ,CAACC,OAAT,CAAiB,UAACC,GAAD,EAAS;YACtBC,aAAa,CAACF,OAAd,CAAsB,UAACC,GAAD,EAAS;cAC3BN,SAAS,CAACQ,IAAV,CAAe;gBACXC,IAAI,EAAET,SAAS,CAACU,MAAV,GAAmB,CADd;gBAEXC,UAAU,EAAEL,GAAG,CAACM,IAAJ,GAAWD,UAFZ;gBAGXE,aAAa,EAAEP,GAAG,CAACM,IAAJ,GAAWC,aAHf;gBAIXC,WAAW,EAAER,GAAG,CAACM,IAAJ,GAAWG,WAJb;gBAKXC,kBAAkB,EAAEV,GAAG,CAACM,IAAJ,GAAWI,kBALpB;gBAMXC,UAAU,EAAEX,GAAG,CAACM,IAAJ,GAAWK,UANZ;gBAOXC,QAAQ,EAAEZ,GAAG,CAACM,IAAJ,GAAWM,QAPV;gBAQXC,YAAY,EAAEb,GAAG,CAACM,IAAJ,GAAWO,YARd;gBASXC,UAAU,EAAEd,GAAG,CAACM,IAAJ,GAAWQ,UATZ;gBAUXC,OAAO,EAAEf,GAAG,CAACM,IAAJ,GAAWS;cAVT,CAAf;YAYP,CAbG;UAcP,CAfG;UAiBDtB,aAAa,CAACC,SAAD,CAAb;;QAtBI;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}