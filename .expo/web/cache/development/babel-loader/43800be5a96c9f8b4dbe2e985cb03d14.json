{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from \"./Device.types\";\nvar result = null;\n\nif (Platform.isDOMAvailable) {\n  var parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib) {\n  return Math.round(gib * Math.pow(1024, 3));\n}\n\nexport default {\n  get isDevice() {\n    return true;\n  },\n\n  get brand() {\n    return null;\n  },\n\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n\n  get modelName() {\n    return result && result.device.model || null;\n  },\n\n  get deviceYearClass() {\n    return null;\n  },\n\n  get totalMemory() {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      var _navigator = navigator,\n          deviceMemory = _navigator.deviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n\n    return null;\n  },\n\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n\n  get osName() {\n    return result && result.os.name || '';\n  },\n\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n\n  get osBuildId() {\n    return null;\n  },\n\n  get osInternalBuildId() {\n    return null;\n  },\n\n  get deviceName() {\n    return null;\n  },\n\n  getDeviceTypeAsync: function getDeviceTypeAsync() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = result.device.type;\n              _context.next = _context.t0 === 'mobile' ? 3 : _context.t0 === 'tablet' ? 4 : _context.t0 === 'smarttv' ? 5 : _context.t0 === 'console' ? 6 : _context.t0 === 'embedded' ? 6 : _context.t0 === 'wearable' ? 6 : 7;\n              break;\n\n            case 3:\n              return _context.abrupt(\"return\", DeviceType.PHONE);\n\n            case 4:\n              return _context.abrupt(\"return\", DeviceType.TABLET);\n\n            case 5:\n              return _context.abrupt(\"return\", DeviceType.TV);\n\n            case 6:\n              return _context.abrupt(\"return\", DeviceType.UNKNOWN);\n\n            case 7:\n              return _context.abrupt(\"return\", DeviceType.DESKTOP);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  isRootedExperimentalAsync: function isRootedExperimentalAsync() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", false);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,QAAP,MAAqB,cAArB;AAEA,SAASC,UAAT;AAIA,IAAIC,MAAM,GAAQ,IAAlB;;AACA,IAAIH,QAAQ,CAACI,cAAb,EAA6B;EAC3B,IAAMC,MAAM,GAAG,IAAIJ,QAAJ,CAAaK,MAAM,CAACC,SAAP,CAAiBC,SAA9B,CAAf;EACAL,MAAM,GAAGE,MAAM,CAACI,SAAP,EAAT;AACD;;AAED,SAASC,iBAAT,CAA2BC,GAA3B,EAAsC;EACpC,OAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,YAAG,IAAH,EAAW,CAAX,CAAd,CAAP;AACD;;AAED,eAAe;EACb,IAAIG,QAAJ,GAAY;IACV,OAAO,IAAP;EACD,CAHY;;EAIb,IAAIC,KAAJ,GAAS;IACP,OAAO,IAAP;EACD,CANY;;EAOb,IAAIC,YAAJ,GAAgB;IACd,OAAQb,MAAM,IAAIA,MAAM,CAACc,MAAP,CAAcC,MAAzB,IAAoC,IAA3C;EACD,CATY;;EAUb,IAAIC,SAAJ,GAAa;IACX,OAAQhB,MAAM,IAAIA,MAAM,CAACc,MAAP,CAAcG,KAAzB,IAAmC,IAA1C;EACD,CAZY;;EAab,IAAIC,eAAJ,GAAmB;IACjB,OAAO,IAAP;EACD,CAfY;;EAgBb,IAAIC,WAAJ,GAAe;IACb,IAAItB,QAAQ,CAACI,cAAT,IAA2B,kBAAkBG,SAAjD,EAA4D;MAC1D,iBAAyBA,SAAzB;MAAA,IAAQgB,YAAR,cAAQA,YAAR;MACA,OAAOb,iBAAiB,CAACa,YAAD,CAAxB;IACD;;IACD,OAAO,IAAP;EACD,CAtBY;;EAuBb,IAAIC,yBAAJ,GAA6B;IAC3B,OAAOrB,MAAM,IAAIA,MAAM,CAACsB,GAAP,CAAWC,YAArB,GAAoC,CAACvB,MAAM,CAACsB,GAAP,CAAWC,YAAZ,CAApC,GAAgE,IAAvE;EACD,CAzBY;;EA0Bb,IAAIC,MAAJ,GAAU;IACR,OAAQxB,MAAM,IAAIA,MAAM,CAACyB,EAAP,CAAUC,IAArB,IAA8B,EAArC;EACD,CA5BY;;EA6Bb,IAAIC,SAAJ,GAAa;IACX,OAAQ3B,MAAM,IAAIA,MAAM,CAACyB,EAAP,CAAUG,OAArB,IAAiC,EAAxC;EACD,CA/BY;;EAgCb,IAAIC,SAAJ,GAAa;IACX,OAAO,IAAP;EACD,CAlCY;;EAmCb,IAAIC,iBAAJ,GAAqB;IACnB,OAAO,IAAP;EACD,CArCY;;EAsCb,IAAIC,UAAJ,GAAc;IACZ,OAAO,IAAP;EACD,CAxCY;;EAyCPC,kBAzCO,gCAyCW;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,cACdhC,MAAM,CAACc,MAAP,CAAcmB,IADA;cAAA,gCAEf,QAFe,uBAIf,QAJe,uBAMf,SANe,uBAQf,SARe,uBASf,UATe,uBAUf,UAVe;cAAA;;YAAA;cAAA,iCAGXlC,UAAU,CAACmC,KAHA;;YAAA;cAAA,iCAKXnC,UAAU,CAACoC,MALA;;YAAA;cAAA,iCAOXpC,UAAU,CAACqC,EAPA;;YAAA;cAAA,iCAWXrC,UAAU,CAACsC,OAXA;;YAAA;cAAA,iCAaXtC,UAAU,CAACuC,OAbA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAevB,CAxDY;EAyDPC,yBAzDO,uCAyDkB;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,kCACtB,KADsB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAE9B;AA3DY,CAAf","names":["Platform","UAParser","DeviceType","result","isDOMAvailable","parser","window","navigator","userAgent","getResult","convertGiBtoBytes","gib","Math","round","isDevice","brand","manufacturer","device","vendor","modelName","model","deviceYearClass","totalMemory","deviceMemory","supportedCpuArchitectures","cpu","architecture","osName","os","name","osVersion","version","osBuildId","osInternalBuildId","deviceName","getDeviceTypeAsync","type","PHONE","TABLET","TV","UNKNOWN","DESKTOP","isRootedExperimentalAsync"],"sourceRoot":"","sources":["../src/ExpoDevice.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\ntype NavigatorWithDeviceMemory = Navigator & { deviceMemory: number };\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib: number): number {\n  return Math.round(gib * 1024 ** 3);\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): number | null {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const { deviceMemory } = navigator as NavigatorWithDeviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}