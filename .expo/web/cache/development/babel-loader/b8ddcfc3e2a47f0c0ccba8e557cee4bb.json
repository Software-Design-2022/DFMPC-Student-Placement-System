{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport { getList } from \"./ListApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Protocols = function Protocols() {\n  var _useState = useState({\n    protocolList: [{\n      key: 0,\n      Protocol: \"\",\n      content: \"\"\n    }]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onReceive = function onReceive(protocolList) {\n    setState(function (prevState) {\n      return {\n        protocolList: prevState.protocolList = protocolList\n      };\n    });\n  };\n\n  getList(onReceive);\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var toggle = function toggle(i) {\n    if (selected == i) {\n      return setSelected(null);\n    }\n\n    setSelected(i);\n  };\n\n  LogBox.ignoreLogs([\"Setting a timer\"]);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsx(ScrollView, {\n        style: styles.container,\n        children: state.protocolList.map(function (item, key) {\n          return _jsxs(View, {\n            children: [_jsxs(TouchableOpacity, {\n              style: styles.item,\n              onPress: function onPress() {\n                return toggle(key);\n              },\n              children: [_jsx(Text, {\n                style: styles.itemText,\n                children: item.Protocol\n              }), _jsx(Text, {\n                style: styles.itemText,\n                children: selected === key ? \"-\" : \"+\"\n              })]\n            }), _jsx(View, {\n              style: selected === key ? styles.content_show : styles.contentHide,\n              children: _jsx(Text, {\n                style: {\n                  color: \"white\"\n                },\n                children: item.content\n              })\n            })]\n          }, state.protocolList.Protocol);\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"rgba(18,33,65,0.8)\"\n  },\n  header: {\n    flexDirection: \"row\",\n    padding: 10\n  },\n  item: {\n    backgroundColor: \"rgba(18,33,65,0.8)\",\n    padding: 20\n  },\n  itemText: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"white\"\n  },\n  contentHide: {\n    color: \"white\",\n    backgroundColor: \"rgba(44,59,92,255)\",\n    overflow: \"hidden\",\n    maxHeight: 0\n  },\n  content_show: {\n    color: \"white\",\n    backgroundColor: \"rgba(44,59,92,255)\",\n    marginBottom: 10,\n    marginTop: 10,\n    padding: 30,\n    opacity: 1,\n    maxHeight: 9999\n  }\n});\nexport default Protocols;",
  "map": {
    "version": 3,
    "names": [
      "React",
      "useState",
      "getList",
      "Protocols",
      "protocolList",
      "key",
      "Protocol",
      "content",
      "state",
      "setState",
      "onReceive",
      "prevState",
      "selected",
      "setSelected",
      "toggle",
      "i",
      "LogBox",
      "ignoreLogs",
      "flex",
      "styles",
      "container",
      "map",
      "item",
      "itemText",
      "content_show",
      "contentHide",
      "color",
      "StyleSheet",
      "create",
      "backgroundColor",
      "header",
      "flexDirection",
      "padding",
      "fontSize",
      "fontWeight",
      "overflow",
      "maxHeight",
      "marginBottom",
      "marginTop",
      "opacity"
    ],
    "sources": [
      "/home/cipher73/Coding Projects/SDproject/DFMPC-Student-Placement-System/Screens/Protocols.js"
    ],
    "sourcesContent": [
      "import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  Text,\n  View,\n  TouchableOpacity,\n  ScrollView,\n  LogBox,\n} from \"react-native\";\nimport { getList } from \"./ListApi\";\n\nconst Protocols = () => {\n  // this useState will be used to set the current state of our data\n  // sets protocolList to the dat from database (firestore)\n  const [state, setState] = useState({\n    protocolList: [\n      {\n        key: 0,\n        Protocol: \"\",\n        content: \"\",\n      },\n    ],\n  });\n\n  const onReceive = (protocolList) => {\n    // when the list is received we set our protocolLIst to the current received list (updating)\n    setState((prevState) => ({\n      protocolList: (prevState.protocolList = protocolList),\n    }));\n  };\n  // getList is a function from LIstApi.js\n  // it gets the list containing data from firestore\n  getList(onReceive);\n\n  // this will allow the app to know which on the Views containg the data is clicked\n  // we need to keep track of what is currently selected\n  const [selected, setSelected] = useState(null);\n\n  const toggle = (i) => {\n    if (selected == i) {\n      return setSelected(null);\n    }\n    setSelected(i);\n  };\n\n  LogBox.ignoreLogs([\"Setting a timer\"]);\n\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <View style={styles.container}>\n        <ScrollView style={styles.container}>\n          {\n            // map is Calls a defined callback function on each element of an array,\n            //and returns an array that contains the results.\n            // with the {+,-} we toggle between the two depending on which one is currently selected\n            state.protocolList.map((item, key) => (\n              <View key={state.protocolList.Protocol}>\n                <TouchableOpacity\n                  style={styles.item}\n                  onPress={() => toggle(key)}\n                >\n                  <Text style={styles.itemText}>{item.Protocol}</Text>\n                  <Text style={styles.itemText}>\n                    {selected === key ? \"-\" : \"+\"}\n                  </Text>\n                </TouchableOpacity>\n                <View\n                  style={\n                    selected === key ? styles.content_show : styles.contentHide\n                  }\n                >\n                  <Text style={{ color: \"white\" }}>{item.content}</Text>\n                </View>\n              </View>\n            ))\n          }\n        </ScrollView>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"rgba(18,33,65,0.8)\",\n  },\n  header: {\n    flexDirection: \"row\",\n    padding: 10,\n  },\n  item: {\n    backgroundColor: \"rgba(18,33,65,0.8)\",\n    padding: 20,\n  },\n  itemText: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"white\",\n  },\n  contentHide: {\n    color: \"white\",\n    backgroundColor: \"rgba(44,59,92,255)\",\n    overflow: \"hidden\",\n    maxHeight: 0,\n  },\n  content_show: {\n    color: \"white\",\n    backgroundColor: \"rgba(44,59,92,255)\",\n    marginBottom: 10,\n    marginTop: 10,\n    padding: 30,\n    opacity: 1,\n    maxHeight: 9999,\n  },\n});\nexport default Protocols;\n"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "module"
}
