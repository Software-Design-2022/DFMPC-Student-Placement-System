{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { white, black } from \"../../styles/colors\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\nimport CardCover from \"./CardCover\";\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      _ref$mode = _ref.mode,\n      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n      elevationDarkAdaptive = _React$useRef2.current;\n\n  var animation = theme.animation,\n      dark = theme.dark,\n      mode = theme.mode,\n      roundness = theme.roundness;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = color(dark ? white : black).alpha(0.12).rgb().string();\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: computedElevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = CardContent;\nCard.Actions = CardActions;\nCard.Cover = CardCover;\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"mappings":"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","names":["React","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","useRef","Animated","Value","current","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","computedElevation","borderRadius","styles","outlined","TouchableWithoutFeedback","delayPressIn","disabled","onPressIn","undefined","onPressOut","View","innerContainer","index","cloneElement","Content","Actions","Cover","Title","StyleSheet","create","flexGrow","flexShrink","borderWidth"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}