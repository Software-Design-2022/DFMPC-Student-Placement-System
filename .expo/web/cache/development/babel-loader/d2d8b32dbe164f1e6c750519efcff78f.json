{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport { getList } from \"./ListApi\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Protocols = function Protocols() {\n  var _useState = useState({\n    protocolList: [{\n      key: 0,\n      Protocol: \"\",\n      content: \"\"\n    }]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onReceive = function onReceive(protocolList) {\n    setState(function (prevState) {\n      return {\n        protocolList: prevState.protocolList = protocolList\n      };\n    });\n  };\n\n  getList(onReceive);\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var toggle = function toggle(i) {\n    if (selected == i) {\n      return setSelected(null);\n    }\n\n    setSelected(i);\n  };\n\n  LogBox.ignoreLogs([\"Setting a timer\"]);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(View, {\n      style: styles.container,\n      children: _jsx(ScrollView, {\n        style: styles.container,\n        children: state.protocolList.map(function (item, key) {\n          return _jsxs(View, {\n            children: [_jsxs(TouchableOpacity, {\n              style: styles.item,\n              onPress: function onPress() {\n                return toggle(key);\n              },\n              children: [_jsx(Text, {\n                style: styles.itemText,\n                children: item.Protocol\n              }), _jsx(Text, {\n                style: styles.itemText,\n                children: selected === key ? \"-\" : \"+\"\n              })]\n            }), _jsx(View, {\n              style: selected === key ? styles.content_show : styles.contentHide,\n              children: _jsx(Text, {\n                style: {\n                  color: \"white\"\n                },\n                children: item.content\n              })\n            })]\n          }, state.protocolList.Protocol);\n        })\n      })\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"rgba(18,33,65,0.8)\"\n  },\n  header: {\n    flexDirection: \"row\",\n    padding: 10\n  },\n  item: {\n    backgroundColor: \"rgba(18,33,65,0.8)\",\n    padding: 20\n  },\n  itemText: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"white\"\n  },\n  contentHide: {\n    color: \"white\",\n    backgroundColor: \"rgba(44,59,92,255)\",\n    overflow: \"hidden\",\n    maxHeight: 0\n  },\n  content_show: {\n    color: \"white\",\n    backgroundColor: \"rgba(44,59,92,255)\",\n    marginBottom: 10,\n    marginTop: 10,\n    padding: 30,\n    opacity: 1,\n    maxHeight: 9999\n  }\n});\nexport default Protocols;","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/Screens/Protocols.js"],"names":["React","useState","getList","Protocols","protocolList","key","Protocol","content","state","setState","onReceive","prevState","selected","setSelected","toggle","i","LogBox","ignoreLogs","flex","styles","container","map","item","itemText","content_show","contentHide","color","StyleSheet","create","backgroundColor","header","flexDirection","padding","fontSize","fontWeight","overflow","maxHeight","marginBottom","marginTop","opacity"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n  LogBox,\r\n} from \"react-native\";\r\nimport { getList } from \"./ListApi\";\r\n\r\nconst Protocols = () => {\r\n  // this useState will be used to set the current state of our data\r\n  // sets protocolList to the dat from database (firestore)\r\n  const [state, setState] = useState({\r\n    protocolList: [\r\n      {\r\n        key: 0,\r\n        Protocol: \"\",\r\n        content: \"\",\r\n      },\r\n    ],\r\n  });\r\n\r\n  const onReceive = (protocolList) => {\r\n    // when the list is received we set our protocolLIst to the current received list (updating)\r\n    setState((prevState) => ({\r\n      protocolList: (prevState.protocolList = protocolList),\r\n    }));\r\n  };\r\n  // getList is a function from LIstApi.js\r\n  // it gets the list containing data from firestore\r\n  getList(onReceive);\r\n\r\n  // this will allow the app to know which on the Views containg the data is clicked\r\n  // we need to keep track of what is currently selected\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  const toggle = (i) => {\r\n    if (selected == i) {\r\n      return setSelected(null);\r\n    }\r\n    setSelected(i);\r\n  };\r\n\r\n  LogBox.ignoreLogs([\"Setting a timer\"]);\r\n\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <View style={styles.container}>\r\n        <ScrollView style={styles.container}>\r\n          {\r\n            // map is Calls a defined callback function on each element of an array,\r\n            //and returns an array that contains the results.\r\n            // with the {+,-} we toggle between the two depending on which one is currently selected\r\n            state.protocolList.map((item, key) => (\r\n              <View key={state.protocolList.Protocol}>\r\n                <TouchableOpacity\r\n                  style={styles.item}\r\n                  onPress={() => toggle(key)}\r\n                >\r\n                  <Text style={styles.itemText}>{item.Protocol}</Text>\r\n                  <Text style={styles.itemText}>\r\n                    {selected === key ? \"-\" : \"+\"}\r\n                  </Text>\r\n                </TouchableOpacity>\r\n                <View\r\n                  style={\r\n                    selected === key ? styles.content_show : styles.contentHide\r\n                  }\r\n                >\r\n                  <Text style={{ color: \"white\" }}>{item.content}</Text>\r\n                </View>\r\n              </View>\r\n            ))\r\n          }\r\n        </ScrollView>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"rgba(18,33,65,0.8)\",\r\n  },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    padding: 10,\r\n  },\r\n  item: {\r\n    backgroundColor: \"rgba(18,33,65,0.8)\",\r\n    padding: 20,\r\n  },\r\n  itemText: {\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n    color: \"white\",\r\n  },\r\n  contentHide: {\r\n    color: \"white\",\r\n    backgroundColor: \"rgba(44,59,92,255)\",\r\n    overflow: \"hidden\",\r\n    maxHeight: 0,\r\n  },\r\n  content_show: {\r\n    color: \"white\",\r\n    backgroundColor: \"rgba(44,59,92,255)\",\r\n    marginBottom: 10,\r\n    marginTop: 10,\r\n    padding: 30,\r\n    opacity: 1,\r\n    maxHeight: 9999,\r\n  },\r\n});\r\nexport default Protocols;\r\n"]},"metadata":{},"sourceType":"module"}