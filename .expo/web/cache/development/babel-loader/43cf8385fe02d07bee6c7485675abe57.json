{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default function useLayout() {\n  var _React$useState = React.useState({\n      height: 0,\n      width: 0,\n      measured: false\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var onLayout = React.useCallback(function (e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n    setLayout({\n      height: height,\n      width: width,\n      measured: true\n    });\n  }, [layout.height, layout.width]);\n  return [layout, onLayout];\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,eAAe,SAASC,SAAT,GAAqB;EAClC,sBAA4BD,KAAK,CAACE,QAAN,CAIzB;MAAEC,MAAM,EAAE,CAAV;MAAaC,KAAK,EAAE,CAApB;MAAuBC,QAAQ,EAAE;IAAjC,CAJyB,CAA5B;IAAA;IAAOC,MAAD;IAASC,SAAT;EAMN,IAAMC,QAAQ,GAAGR,KAAK,CAACS,WAAN,CACdC,WAAD,EAA0B;IACxB,4BAA0BA,CAAC,CAACC,WAAF,CAAcL,MAAxC;MAAQH,MAAF,yBAAEA,MAAF;MAAUC;IAEhB,IAAID,MAAM,KAAKG,MAAM,CAACH,MAAlB,IAA4BC,KAAK,KAAKE,MAAM,CAACF,KAAjD,EAAwD;MACtD;IACD;IAEDG,SAAS,CAAC;MACRJ,MADQ,EACRA,MADQ;MAERC,KAFQ,EAERA,KAFQ;MAGRC,QAAQ,EAAE;IAHF,CAAD,CAAT;EAKD,CAbc,EAcf,CAACC,MAAM,CAACH,MAAR,EAAgBG,MAAM,CAACF,KAAvB,CAde,CAAjB;EAiBA,OAAO,CAACE,MAAD,EAASE,QAAT,CAAP;AACD","names":["React","useLayout","useState","height","width","measured","layout","setLayout","onLayout","useCallback","e","nativeEvent"],"sources":["useLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\n\nexport default function useLayout() {\n  const [layout, setLayout] = React.useState<{\n    height: number;\n    width: number;\n    measured: boolean;\n  }>({ height: 0, width: 0, measured: false });\n\n  const onLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      const { height, width } = e.nativeEvent.layout;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      setLayout({\n        height,\n        width,\n        measured: true,\n      });\n    },\n    [layout.height, layout.width]\n  );\n\n  return [layout, onLayout] as const;\n}\n"]},"metadata":{},"sourceType":"module"}