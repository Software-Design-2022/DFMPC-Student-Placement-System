{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default function setNotificationChannelGroupAsync(groupId, group) {\n  return _regeneratorRuntime.async(function setNotificationChannelGroupAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.debug('Notification channels feature is only supported on Android.');\n          return _context.abrupt(\"return\", null);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";AAKA,eAAe,SAAeA,gCAAf,CACbC,OADa,EAEbC,KAFa;EAAA;IAAA;MAAA;QAAA;UAIbC,OAAO,CAACC,KAAR,CAAc,6DAAd;UAJa,iCAKN,IALM;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["setNotificationChannelGroupAsync","groupId","group","console","debug"],"sourceRoot":"","sources":["../src/setNotificationChannelGroupAsync.ts"],"sourcesContent":["import {\n  NotificationChannelGroup,\n  NotificationChannelGroupInput,\n} from './NotificationChannelGroupManager.types';\n\nexport default async function setNotificationChannelGroupAsync(\n  groupId: string,\n  group: NotificationChannelGroupInput\n): Promise<NotificationChannelGroup | null> {\n  console.debug('Notification channels feature is only supported on Android.');\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}