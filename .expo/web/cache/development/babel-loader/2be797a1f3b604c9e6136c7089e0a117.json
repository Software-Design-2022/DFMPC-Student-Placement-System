{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport XDate from 'xdate';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TEXT_LINE_HEIGHT = 17;\n\nvar EventBlock = function EventBlock(props) {\n  var index = props.index,\n      event = props.event,\n      renderEvent = props.renderEvent,\n      onPress = props.onPress,\n      format24h = props.format24h,\n      styles = props.styles;\n  var numberOfLines = Math.floor(event.height / TEXT_LINE_HEIGHT);\n  var formatTime = format24h ? 'HH:mm' : 'hh:mm A';\n  var eventStyle = useMemo(function () {\n    return {\n      left: event.left,\n      height: event.height,\n      width: event.width,\n      top: event.top,\n      backgroundColor: event.color ? event.color : '#add8e6'\n    };\n  }, [event]);\n\n  var _onPress = useCallback(function () {\n    onPress(index);\n  }, [index, onPress]);\n\n  return _jsx(TouchableOpacity, {\n    activeOpacity: 0.9,\n    onPress: _onPress,\n    style: [styles.event, eventStyle],\n    children: renderEvent ? renderEvent(event) : _jsxs(View, {\n      children: [_jsx(Text, {\n        numberOfLines: 1,\n        style: styles.eventTitle,\n        children: event.title || 'Event'\n      }), numberOfLines > 1 ? _jsx(Text, {\n        numberOfLines: numberOfLines - 1,\n        style: [styles.eventSummary],\n        children: event.summary || ' '\n      }) : null, numberOfLines > 2 ? _jsxs(Text, {\n        style: styles.eventTimes,\n        numberOfLines: 1,\n        children: [new XDate(event.start).toString(formatTime), \" - \", new XDate(event.end).toString(formatTime)]\n      }) : null]\n    })\n  });\n};\n\nexport default EventBlock;","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/node_modules/react-native-calendars/src/timeline/EventBlock.js"],"names":["React","useCallback","useMemo","XDate","TEXT_LINE_HEIGHT","EventBlock","props","index","event","renderEvent","onPress","format24h","styles","numberOfLines","Math","floor","height","formatTime","eventStyle","left","width","top","backgroundColor","color","_onPress","eventTitle","title","eventSummary","summary","eventTimes","start","toString","end"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;;AACA,IAAMC,gBAAgB,GAAG,EAAzB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC1B,MAAQC,KAAR,GAAkED,KAAlE,CAAQC,KAAR;AAAA,MAAeC,KAAf,GAAkEF,KAAlE,CAAeE,KAAf;AAAA,MAAsBC,WAAtB,GAAkEH,KAAlE,CAAsBG,WAAtB;AAAA,MAAmCC,OAAnC,GAAkEJ,KAAlE,CAAmCI,OAAnC;AAAA,MAA4CC,SAA5C,GAAkEL,KAAlE,CAA4CK,SAA5C;AAAA,MAAuDC,MAAvD,GAAkEN,KAAlE,CAAuDM,MAAvD;AAGA,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACQ,MAAN,GAAeZ,gBAA1B,CAAtB;AACA,MAAMa,UAAU,GAAGN,SAAS,GAAG,OAAH,GAAa,SAAzC;AACA,MAAMO,UAAU,GAAGhB,OAAO,CAAC,YAAM;AAC7B,WAAO;AACHiB,MAAAA,IAAI,EAAEX,KAAK,CAACW,IADT;AAEHH,MAAAA,MAAM,EAAER,KAAK,CAACQ,MAFX;AAGHI,MAAAA,KAAK,EAAEZ,KAAK,CAACY,KAHV;AAIHC,MAAAA,GAAG,EAAEb,KAAK,CAACa,GAJR;AAKHC,MAAAA,eAAe,EAAEd,KAAK,CAACe,KAAN,GAAcf,KAAK,CAACe,KAApB,GAA4B;AAL1C,KAAP;AAOH,GARyB,EAQvB,CAACf,KAAD,CARuB,CAA1B;;AASA,MAAMgB,QAAQ,GAAGvB,WAAW,CAAC,YAAM;AAC/BS,IAAAA,OAAO,CAACH,KAAD,CAAP;AACH,GAF2B,EAEzB,CAACA,KAAD,EAAQG,OAAR,CAFyB,CAA5B;;AAGA,SAAQ,KAAC,gBAAD;AAAkB,IAAA,aAAa,EAAE,GAAjC;AAAsC,IAAA,OAAO,EAAEc,QAA/C;AAAyD,IAAA,KAAK,EAAE,CAACZ,MAAM,CAACJ,KAAR,EAAeU,UAAf,CAAhE;AAAA,cACLT,WAAW,GAAIA,WAAW,CAACD,KAAD,CAAf,GAA2B,MAAC,IAAD;AAAA,iBACnC,KAAC,IAAD;AAAM,QAAA,aAAa,EAAE,CAArB;AAAwB,QAAA,KAAK,EAAEI,MAAM,CAACa,UAAtC;AAAA,kBACGjB,KAAK,CAACkB,KAAN,IAAe;AADlB,QADmC,EAIlCb,aAAa,GAAG,CAAhB,GAAqB,KAAC,IAAD;AAAM,QAAA,aAAa,EAAEA,aAAa,GAAG,CAArC;AAAwC,QAAA,KAAK,EAAE,CAACD,MAAM,CAACe,YAAR,CAA/C;AAAA,kBACjBnB,KAAK,CAACoB,OAAN,IAAiB;AADA,QAArB,GAEY,IANsB,EAOlCf,aAAa,GAAG,CAAhB,GAAqB,MAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACiB,UAApB;AAAgC,QAAA,aAAa,EAAE,CAA/C;AAAA,mBACjB,IAAI1B,KAAJ,CAAUK,KAAK,CAACsB,KAAhB,EAAuBC,QAAvB,CAAgCd,UAAhC,CADiB,SAC+B,IAAId,KAAJ,CAAUK,KAAK,CAACwB,GAAhB,EAAqBD,QAArB,CAA8Bd,UAA9B,CAD/B;AAAA,QAArB,GAEY,IATsB;AAAA;AADjC,IAAR;AAaH,CA/BD;;AAgCA,eAAeZ,UAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { View, Text, TouchableOpacity } from 'react-native';\nimport XDate from 'xdate';\nconst TEXT_LINE_HEIGHT = 17;\nconst EventBlock = (props) => {\n    const { index, event, renderEvent, onPress, format24h, styles } = props;\n    // Fixing the number of lines for the event title makes this calculation easier.\n    // However it would make sense to overflow the title to a new line if needed\n    const numberOfLines = Math.floor(event.height / TEXT_LINE_HEIGHT);\n    const formatTime = format24h ? 'HH:mm' : 'hh:mm A';\n    const eventStyle = useMemo(() => {\n        return {\n            left: event.left,\n            height: event.height,\n            width: event.width,\n            top: event.top,\n            backgroundColor: event.color ? event.color : '#add8e6'\n        };\n    }, [event]);\n    const _onPress = useCallback(() => {\n        onPress(index);\n    }, [index, onPress]);\n    return (<TouchableOpacity activeOpacity={0.9} onPress={_onPress} style={[styles.event, eventStyle]}>\n      {renderEvent ? (renderEvent(event)) : (<View>\n          <Text numberOfLines={1} style={styles.eventTitle}>\n            {event.title || 'Event'}\n          </Text>\n          {numberOfLines > 1 ? (<Text numberOfLines={numberOfLines - 1} style={[styles.eventSummary]}>\n              {event.summary || ' '}\n            </Text>) : null}\n          {numberOfLines > 2 ? (<Text style={styles.eventTimes} numberOfLines={1}>\n              {new XDate(event.start).toString(formatTime)} - {new XDate(event.end).toString(formatTime)}\n            </Text>) : null}\n        </View>)}\n    </TouchableOpacity>);\n};\nexport default EventBlock;\n"]},"metadata":{},"sourceType":"module"}