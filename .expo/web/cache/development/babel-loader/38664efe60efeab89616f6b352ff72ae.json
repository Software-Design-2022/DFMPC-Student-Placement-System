{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from \"./NotificationPermissionsModule\";\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (NotificationPermissionsModule.getPermissionsAsync) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(NotificationPermissionsModule.getPermissionsAsync());\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync(permissions) {\n  var requestedPermissions, requestedPlatformPermissions;\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (NotificationPermissionsModule.requestPermissionsAsync) {\n            _context2.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n        case 2:\n          requestedPermissions = permissions != null ? permissions : {\n            ios: {\n              allowAlert: true,\n              allowBadge: true,\n              allowSound: true\n            }\n          };\n          requestedPlatformPermissions = requestedPermissions[Platform.OS];\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions));\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync\n});","map":{"version":3,"mappings":";AAAA,SAASA,oBAAoB,EAAEC,QAAQ,EAAEC,mBAAmB,QAAQ,mBAAmB;AAMvF,OAAOC,6BAA6B;AAEpC,OAAO,SAAeC,mBAAmB;EAAA;IAAA;MAAA;QAAA;UAAA,IAClCD,6BAA6B,CAACC,mBAAmB;YAAA;YAAA;UAAA;UAAA,MAC9C,IAAIF,mBAAmB,CAAC,eAAe,EAAE,qBAAqB,CAAC;QAAA;UAAA;UAAA,iCAG1DC,6BAA6B,CAACC,mBAAmB,EAAE;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAGlE,OAAO,SAAeC,uBAAuB,CAACC,WAA4C;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IACnFH,6BAA6B,CAACE,uBAAuB;YAAA;YAAA;UAAA;UAAA,MAClD,IAAIH,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC;QAAA;UAGrEK,oBAAoB,GAAGD,WAAW,WAAXA,WAAW,GAAI;YAC1CE,GAAG,EAAE;cACHC,UAAU,EAAE,IAAI;cAChBC,UAAU,EAAE,IAAI;cAChBC,UAAU,EAAE;;WAEf;UACKC,4BAA4B,GAAGL,oBAAoB,CAACN,QAAQ,CAACY,EAAE,CAAC;UAAA;UAAA,iCACzDV,6BAA6B,CAACE,uBAAuB,CAACO,4BAA4B,CAAC;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAalG,OAAO,IAAME,cAAc,GAAGd,oBAAoB,CAGhD;EACAe,aAAa,EAAEV,uBAAuB;EACtCW,SAAS,EAAEZ;CACZ,CAAC","names":["createPermissionHook","Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS","usePermissions","requestMethod","getMethod"],"sourceRoot":"","sources":["../src/NotificationPermissions.ts"],"sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Notifications.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"]},"metadata":{},"sourceType":"module"}