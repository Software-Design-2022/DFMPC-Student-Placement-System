{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\nimport { DeviceType } from \"./Device.types\";\nvar result = null;\nif (Platform.isDOMAvailable) {\n  var parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\nfunction convertGiBtoBytes(gib) {\n  return Math.round(gib * Math.pow(1024, 3));\n}\nexport default {\n  get isDevice() {\n    return true;\n  },\n  get brand() {\n    return null;\n  },\n  get manufacturer() {\n    return result && result.device.vendor || null;\n  },\n  get modelName() {\n    return result && result.device.model || null;\n  },\n  get deviceYearClass() {\n    return null;\n  },\n  get totalMemory() {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      var _navigator = navigator,\n        deviceMemory = _navigator.deviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures() {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName() {\n    return result && result.os.name || '';\n  },\n  get osVersion() {\n    return result && result.os.version || '';\n  },\n  get osBuildId() {\n    return null;\n  },\n  get osInternalBuildId() {\n    return null;\n  },\n  get deviceName() {\n    return null;\n  },\n  getDeviceTypeAsync: function getDeviceTypeAsync() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = result.device.type;\n              _context.next = _context.t0 === 'mobile' ? 3 : _context.t0 === 'tablet' ? 4 : _context.t0 === 'smarttv' ? 5 : _context.t0 === 'console' ? 6 : _context.t0 === 'embedded' ? 6 : _context.t0 === 'wearable' ? 6 : 7;\n              break;\n            case 3:\n              return _context.abrupt(\"return\", DeviceType.PHONE);\n            case 4:\n              return _context.abrupt(\"return\", DeviceType.TABLET);\n            case 5:\n              return _context.abrupt(\"return\", DeviceType.TV);\n            case 6:\n              return _context.abrupt(\"return\", DeviceType.UNKNOWN);\n            case 7:\n              return _context.abrupt(\"return\", DeviceType.DESKTOP);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  isRootedExperimentalAsync: function isRootedExperimentalAsync() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", false);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,QAAQ,MAAM,cAAc;AAEnC,SAASC,UAAU;AAInB,IAAIC,MAAM,GAAQ,IAAI;AACtB,IAAIH,QAAQ,CAACI,cAAc,EAAE;EAC3B,IAAMC,MAAM,GAAG,IAAIJ,QAAQ,CAACK,MAAM,CAACC,SAAS,CAACC,SAAS,CAAC;EACvDL,MAAM,GAAGE,MAAM,CAACI,SAAS,EAAE;;AAG7B,SAASC,iBAAiB,CAACC,GAAW;EACpC,OAAOC,IAAI,CAACC,KAAK,CAACF,GAAG,YAAG,IAAI,EAAI,CAAC,EAAC;AACpC;AAEA,eAAe;EACb,IAAIG,QAAQ;IACV,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,KAAK;IACP,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,YAAY;IACd,OAAQb,MAAM,IAAIA,MAAM,CAACc,MAAM,CAACC,MAAM,IAAK,IAAI;EACjD,CAAC;EACD,IAAIC,SAAS;IACX,OAAQhB,MAAM,IAAIA,MAAM,CAACc,MAAM,CAACG,KAAK,IAAK,IAAI;EAChD,CAAC;EACD,IAAIC,eAAe;IACjB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,WAAW;IACb,IAAItB,QAAQ,CAACI,cAAc,IAAI,cAAc,IAAIG,SAAS,EAAE;MAC1D,iBAAyBA,SAAsC;QAAvDgB,YAAY,cAAZA,YAAY;MACpB,OAAOb,iBAAiB,CAACa,YAAY,CAAC;;IAExC,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,yBAAyB;IAC3B,OAAOrB,MAAM,IAAIA,MAAM,CAACsB,GAAG,CAACC,YAAY,GAAG,CAACvB,MAAM,CAACsB,GAAG,CAACC,YAAY,CAAC,GAAG,IAAI;EAC7E,CAAC;EACD,IAAIC,MAAM;IACR,OAAQxB,MAAM,IAAIA,MAAM,CAACyB,EAAE,CAACC,IAAI,IAAK,EAAE;EACzC,CAAC;EACD,IAAIC,SAAS;IACX,OAAQ3B,MAAM,IAAIA,MAAM,CAACyB,EAAE,CAACG,OAAO,IAAK,EAAE;EAC5C,CAAC;EACD,IAAIC,SAAS;IACX,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,iBAAiB;IACnB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,UAAU;IACZ,OAAO,IAAI;EACb,CAAC;EACKC,kBAAkB;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,cACdhC,MAAM,CAACc,MAAM,CAACmB,IAAI;cAAA,gCACnB,QAAQ,uBAER,QAAQ,uBAER,SAAS,uBAET,SAAS,uBACT,UAAU,uBACV,UAAU;cAAA;YAAA;cAAA,iCAPNlC,UAAU,CAACmC,KAAK;YAAA;cAAA,iCAEhBnC,UAAU,CAACoC,MAAM;YAAA;cAAA,iCAEjBpC,UAAU,CAACqC,EAAE;YAAA;cAAA,iCAIbrC,UAAU,CAACsC,OAAO;YAAA;cAAA,iCAElBtC,UAAU,CAACuC,OAAO;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAE/B,CAAC;EACKC,yBAAyB;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,kCACtB,KAAK;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACd;CACD","names":["Platform","UAParser","DeviceType","result","isDOMAvailable","parser","window","navigator","userAgent","getResult","convertGiBtoBytes","gib","Math","round","isDevice","brand","manufacturer","device","vendor","modelName","model","deviceYearClass","totalMemory","deviceMemory","supportedCpuArchitectures","cpu","architecture","osName","os","name","osVersion","version","osBuildId","osInternalBuildId","deviceName","getDeviceTypeAsync","type","PHONE","TABLET","TV","UNKNOWN","DESKTOP","isRootedExperimentalAsync"],"sourceRoot":"","sources":["../src/ExpoDevice.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport UAParser from 'ua-parser-js';\n\nimport { DeviceType } from './Device.types';\n\ntype NavigatorWithDeviceMemory = Navigator & { deviceMemory: number };\n\nlet result: any = null;\nif (Platform.isDOMAvailable) {\n  const parser = new UAParser(window.navigator.userAgent);\n  result = parser.getResult();\n}\n\nfunction convertGiBtoBytes(gib: number): number {\n  return Math.round(gib * 1024 ** 3);\n}\n\nexport default {\n  get isDevice(): boolean {\n    return true;\n  },\n  get brand(): null {\n    return null;\n  },\n  get manufacturer(): null {\n    return (result && result.device.vendor) || null;\n  },\n  get modelName(): string | null {\n    return (result && result.device.model) || null;\n  },\n  get deviceYearClass(): null {\n    return null;\n  },\n  get totalMemory(): number | null {\n    if (Platform.isDOMAvailable && 'deviceMemory' in navigator) {\n      const { deviceMemory } = navigator as NavigatorWithDeviceMemory;\n      return convertGiBtoBytes(deviceMemory);\n    }\n    return null;\n  },\n  get supportedCpuArchitectures(): string[] | null {\n    return result && result.cpu.architecture ? [result.cpu.architecture] : null;\n  },\n  get osName(): string {\n    return (result && result.os.name) || '';\n  },\n  get osVersion(): string {\n    return (result && result.os.version) || '';\n  },\n  get osBuildId(): null {\n    return null;\n  },\n  get osInternalBuildId(): null {\n    return null;\n  },\n  get deviceName(): null {\n    return null;\n  },\n  async getDeviceTypeAsync(): Promise<DeviceType> {\n    switch (result.device.type) {\n      case 'mobile':\n        return DeviceType.PHONE;\n      case 'tablet':\n        return DeviceType.TABLET;\n      case 'smarttv':\n        return DeviceType.TV;\n      case 'console':\n      case 'embedded':\n      case 'wearable':\n        return DeviceType.UNKNOWN;\n      default:\n        return DeviceType.DESKTOP;\n    }\n  },\n  async isRootedExperimentalAsync(): Promise<boolean> {\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}