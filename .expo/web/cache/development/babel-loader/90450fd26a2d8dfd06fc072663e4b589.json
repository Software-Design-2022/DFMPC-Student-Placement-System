{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\n\nfunction AnimatedText(_ref) {\n  var style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n  return React.createElement(Animated.Text, _extends({}, rest, {\n    style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n      color: theme.colors.text,\n      writingDirection: writingDirection\n    }), style]\n  }));\n}\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(AnimatedText);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAQA,SAASC,SAAT;;AAeA,SAASC,YAAT,OAAwD;EAAA,IAAhCC,KAAF,GAAkCC,KAAhCD,KAAF;IAASE,KAAT,GAAkCD,KAAzBC,KAAT;IAAmBC,gCAAeF;EACtD,IAAMG,gBAAgB,GAAGC,WAAW,CAACC,KAAZ,GAAoB,KAApB,GAA4B,KAArD;EAEA,OACET,oBAACU,QAAD,CAAUC,IAAV,eACML,IADN;IAEEH,KAAK,EAAE,CACLS,MAAM,CAACC,IADF,kCAGAR,KAAK,CAACS,KAAN,CAAYC,OADjB;MAEEC,KAAK,EAAEX,KAAK,CAACY,MAAN,CAAaJ,IAFtB;MAGEN;IAAAA,IAEFJ,KAPK;EAFT,GADF;AAcD;AAED,IAAMS,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;EAC/BN,IAAI,EAAE;IACJO,SAAS,EAAE;EADP;AADyB,CAAlB,CAAf;AAMA,eAAenB,SAAS,CAACC,YAAD,CAAxB","names":["React","withTheme","AnimatedText","style","_ref","theme","rest","writingDirection","I18nManager","isRTL","Animated","Text","styles","text","fonts","regular","color","colors","StyleSheet","create","textAlign"],"sources":["AnimatedText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextStyle,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof Animated.Text> & {\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://reactnative.dev/docs/text#props\n */\nfunction AnimatedText({ style, theme, ...rest }: Props) {\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Animated.Text\n      {...rest}\n      style={[\n        styles.text,\n        {\n          ...theme.fonts.regular,\n          color: theme.colors.text,\n          writingDirection,\n        },\n        style,\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(AnimatedText);\n"]},"metadata":{},"sourceType":"module"}