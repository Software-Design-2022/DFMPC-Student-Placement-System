{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport shadow from \"../styles/shadow\";\nimport { withTheme } from \"../core/theming\";\nimport overlay from \"../styles/overlay\";\n\nvar Surface = function Surface(_ref) {\n  var style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$elevation = _ref2.elevation,\n    elevation = _ref2$elevation === void 0 ? 4 : _ref2$elevation;\n  var isDarkTheme = theme.dark,\n    mode = theme.mode,\n    colors = theme.colors;\n  return React.createElement(Animated.View, _extends({}, rest, {\n    style: [{\n      backgroundColor: isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.surface\n    }, elevation ? shadow(elevation) : null, style]\n  }));\n};\nexport default withTheme(Surface);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAEA,OAAOC,MAAP;AACA,SAASC,SAAT;AACA,OAAOC,OAAP;;AAyDA,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAGC,MAAsC;EAAA,IAAnCC,KAAF,GAAqCD,KAAnCC,KAAF;IAASC,KAAT,GAAqCF,KAA5BE,KAAT;IAAmBC,gCAAkBH;EACpD,YAA2BI,UAAU,CAACC,OAAX,CAAmBJ,KAAnB,KAA6B,EAAxD;IAAA,wBAAQK,SAAS;IAATA,SAAS,gCAAG;EACpB,IAAcC,WAAR,GAAsCL,KAA5C,CAAQM,IAAI;IAAeC,IAArB,GAAsCP,KAA5C,CAA2BO,IAArB;IAA2BC,SAAWR,KAA5C,CAAiCQ;EACjC,OACEf,oBAACgB,QAAD,CAAUC,IAAV,eACMT,IADN;IAEEF,KAAK,EAAE,CACL;MACEY,eAAe,EACbN,WAAW,IAAIE,IAAI,KAAK,UAAxB,GACIX,OAAO,CAACQ,SAAD,EAAYI,MAAM,CAACI,OAAnB,CADX,GAEIJ,MAAM,CAACI;IAJf,CADK,EAOLR,SAAS,GAAGV,MAAM,CAACU,SAAD,CAAT,GAAuB,IAP3B,EAQLL,KARK;EAFT,GADF;AAeD,CAlBD;AAoBA,eAAeJ,SAAS,CAACE,OAAD,CAAxB","names":["React","shadow","withTheme","overlay","Surface","_ref","style","theme","rest","StyleSheet","flatten","elevation","isDarkTheme","dark","mode","colors","Animated","View","backgroundColor","surface"],"sources":["Surface.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport overlay from '../styles/overlay';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nconst Surface = ({ style, theme, ...rest }: Props) => {\n  const { elevation = 4 } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const { dark: isDarkTheme, mode, colors } = theme;\n  return (\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors.surface)\n              : colors.surface,\n        },\n        elevation ? shadow(elevation) : null,\n        style,\n      ]}\n    />\n  );\n};\n\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"module"}