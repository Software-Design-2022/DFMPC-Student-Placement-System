{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"state\", \"navigation\", \"descriptors\"],\n  _excluded2 = [\"navigationState\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\nexport default function TabBarTop(_ref) {\n  var _focusedOptions$tabBa, _focusedOptions$tabBa2;\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  var activeColor = (_focusedOptions$tabBa = focusedOptions.tabBarActiveTintColor) !== null && _focusedOptions$tabBa !== void 0 ? _focusedOptions$tabBa : colors.text;\n  var inactiveColor = (_focusedOptions$tabBa2 = focusedOptions.tabBarInactiveTintColor) !== null && _focusedOptions$tabBa2 !== void 0 ? _focusedOptions$tabBa2 : Color(activeColor).alpha(0.5).rgb().string();\n  return React.createElement(TabBar, _extends({}, rest, {\n    navigationState: state,\n    scrollEnabled: focusedOptions.tabBarScrollEnabled,\n    bounces: focusedOptions.tabBarBounces,\n    activeColor: activeColor,\n    inactiveColor: inactiveColor,\n    pressColor: focusedOptions.tabBarPressColor,\n    pressOpacity: focusedOptions.tabBarPressOpacity,\n    tabStyle: focusedOptions.tabBarItemStyle,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, focusedOptions.tabBarIndicatorStyle],\n    indicatorContainerStyle: focusedOptions.tabBarIndicatorContainerStyle,\n    contentContainerStyle: focusedOptions.tabBarContentContainerStyle,\n    style: [{\n      backgroundColor: colors.card\n    }, focusedOptions.tabBarStyle],\n    getAccessibilityLabel: function getAccessibilityLabel(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref3) {\n      var route = _ref3.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref4) {\n      var route = _ref4.route,\n        preventDefault = _ref4.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: function onTabLongPress(_ref5) {\n      var route = _ref5.route;\n      return navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    },\n    renderIcon: function renderIcon(_ref6) {\n      var route = _ref6.route,\n        focused = _ref6.focused,\n        color = _ref6.color;\n      var options = descriptors[route.key].options;\n      if (options.tabBarShowIcon === false) {\n        return null;\n      }\n      if (options.tabBarIcon !== undefined) {\n        var icon = options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n        return React.createElement(View, {\n          style: [styles.icon, options.tabBarIconStyle]\n        }, icon);\n      }\n      return null;\n    },\n    renderLabel: function renderLabel(_ref7) {\n      var route = _ref7.route,\n        focused = _ref7.focused,\n        color = _ref7.color;\n      var options = descriptors[route.key].options;\n      if (options.tabBarShowLabel === false) {\n        return null;\n      }\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n      if (typeof label === 'string') {\n        return React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, options.tabBarLabelStyle],\n          allowFontScaling: options.tabBarAllowFontScaling\n        }, label);\n      }\n      return label({\n        focused: focused,\n        color: color\n      });\n    },\n    renderBadge: function renderBadge(_ref8) {\n      var _tabBarBadge;\n      var route = _ref8.route;\n      var tabBarBadge = descriptors[route.key].options.tabBarBadge;\n      return (_tabBarBadge = tabBarBadge === null || tabBarBadge === void 0 ? void 0 : tabBarBadge()) !== null && _tabBarBadge !== void 0 ? _tabBarBadge : null;\n    },\n    renderIndicator: function renderIndicator(_ref9) {\n      var state = _ref9.navigationState,\n        rest = _objectWithoutProperties(_ref9, _excluded2);\n      return focusedOptions.tabBarIndicator ? focusedOptions.tabBarIndicator(_objectSpread({\n        state: state\n      }, rest)) : React.createElement(TabBarIndicator, _extends({\n        navigationState: state\n      }, rest));\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"mappings":"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","names":["useTheme","Color","React","TabBar","TabBarIndicator","TabBarTop","state","_ref","navigation","descriptors","rest","colors","focusedOptions","routes","index","key","options","activeColor","tabBarActiveTintColor","text","inactiveColor","tabBarInactiveTintColor","alpha","rgb","string","navigationState","scrollEnabled","tabBarScrollEnabled","bounces","tabBarBounces","pressColor","tabBarPressColor","pressOpacity","tabBarPressOpacity","tabStyle","tabBarItemStyle","indicatorStyle","backgroundColor","primary","tabBarIndicatorStyle","indicatorContainerStyle","tabBarIndicatorContainerStyle","contentContainerStyle","tabBarContentContainerStyle","style","card","tabBarStyle","getAccessibilityLabel","route","_ref2","tabBarAccessibilityLabel","getTestID","_ref3","tabBarTestID","onTabPress","_ref4","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","onTabLongPress","_ref5","renderIcon","_ref6","focused","color","tabBarShowIcon","tabBarIcon","undefined","icon","View","styles","tabBarIconStyle","renderLabel","_ref7","tabBarShowLabel","label","tabBarLabel","title","name","Text","tabBarLabelStyle","allowFontScaling","tabBarAllowFontScaling","renderBadge","_ref8","tabBarBadge","renderIndicator","_ref9","tabBarIndicator","StyleSheet","create","height","width","textAlign","textTransform","fontSize","margin"],"sources":["MaterialTopTabBar.tsx"],"sourcesContent":["import {\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  const activeColor = focusedOptions.tabBarActiveTintColor ?? colors.text;\n  const inactiveColor =\n    focusedOptions.tabBarInactiveTintColor ??\n    Color(activeColor).alpha(0.5).rgb().string();\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      scrollEnabled={focusedOptions.tabBarScrollEnabled}\n      bounces={focusedOptions.tabBarBounces}\n      activeColor={activeColor}\n      inactiveColor={inactiveColor}\n      pressColor={focusedOptions.tabBarPressColor}\n      pressOpacity={focusedOptions.tabBarPressOpacity}\n      tabStyle={focusedOptions.tabBarItemStyle}\n      indicatorStyle={[\n        { backgroundColor: colors.primary },\n        focusedOptions.tabBarIndicatorStyle,\n      ]}\n      indicatorContainerStyle={focusedOptions.tabBarIndicatorContainerStyle}\n      contentContainerStyle={focusedOptions.tabBarContentContainerStyle}\n      style={[{ backgroundColor: colors.card }, focusedOptions.tabBarStyle]}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowIcon === false) {\n          return null;\n        }\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return (\n            <View style={[styles.icon, options.tabBarIconStyle]}>{icon}</View>\n          );\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowLabel === false) {\n          return null;\n        }\n\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, options.tabBarLabelStyle]}\n              allowFontScaling={options.tabBarAllowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n      renderBadge={({ route }) => {\n        const { tabBarBadge } = descriptors[route.key].options;\n\n        return tabBarBadge?.() ?? null;\n      }}\n      renderIndicator={({ navigationState: state, ...rest }) => {\n        return focusedOptions.tabBarIndicator ? (\n          focusedOptions.tabBarIndicator({\n            state: state as TabNavigationState<ParamListBase>,\n            ...rest,\n          })\n        ) : (\n          <TabBarIndicator navigationState={state} {...rest} />\n        );\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}