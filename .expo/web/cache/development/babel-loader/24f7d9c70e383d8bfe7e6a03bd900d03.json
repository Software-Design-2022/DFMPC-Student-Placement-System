{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Calendar, Agenda } from \"react-native-calendars\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport { Card, Avatar } from \"react-native-paper\";\nimport { firebase, db } from \"../firebase\";\nimport { getCurrentDate } from \"../HelperFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar days = \"\";\nvar initialDate = getCurrentDate();\nfunction getSchedule(onReceiveList) {\n  var schedules, snapshot;\n  return _regeneratorRuntime.async(function getSchedule$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          schedules = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"schedules\").where(\"student_id\", \"==\", authUserID).get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              schedules.push({\n                key: schedules.length + 1,\n                student_id: doc.data().student_id,\n                SpecialtyName: doc.data().SpecialtyName,\n                hospital_ID: doc.data().hospital_id,\n                specialty_duration: doc.data().specialty_duration,\n                start: doc.data().start_date,\n                end: doc.data().end_date,\n                specialty_id: doc.data().specialty_id\n              });\n            });\n          }));\n        case 3:\n          snapshot = _context.sent;\n          onReceiveList(schedules);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nLogBox.ignoreLogs([\"Setting a timer\"]);\nvar AgendaCalendar = function (_React$Component) {\n  _inherits(AgendaCalendar, _React$Component);\n  var _super = _createSuper(AgendaCalendar);\n  function AgendaCalendar(props) {\n    var _this;\n    _classCallCheck(this, AgendaCalendar);\n    _this = _super.call(this, props);\n    _this.state = {\n      items: {},\n      events: []\n    };\n    return _this;\n  }\n  _createClass(AgendaCalendar, [{\n    key: \"render\",\n    value: function render() {\n      return _jsx(Agenda, {\n        theme: {\n          calendarBackground: \"white\",\n          agendaKnobColor: \"rgba(28,56,107,0.9)\",\n          backgroundColor: \"rgba(28,56,107,0.9)\",\n          agendaDayTextColor: \"rgba(28,56,107,0.9)\",\n          agendaDayNumColor: \"rgba(28,56,107,0.9)\",\n          agendaTodayColor: \"rgba(28,56,107,0.9)\",\n          monthTextColor: \"rgba(28,56,107,0.9)\",\n          todayBackgroundColor: \"rgba(28,56,107,0.9)\",\n          textSectionTitleColor: \"rgba(28,56,107,0.9)\",\n          selectedDayBackgroundColor: \"rgba(28,56,107,0.9)\",\n          dayTextColor: \"rgba(28,56,107,0.9)\",\n          dotColor: \"green\"\n        },\n\n        items: this.state.items,\n        selected: new Date(),\n        loadItemsForMonth: this.loadFromList.bind(this),\n        renderItem: this.renderItem.bind(this),\n        renderEmptyDate: this.renderEmptyDate.bind(this),\n        rowHasChanged: this.rowHasChanged.bind(this)\n      });\n    }\n  }, {\n    key: \"loadFromList\",\n    value: function loadFromList() {\n      var _this2 = this;\n      var onReceive = function onReceive(data) {\n        _this2.setState({\n          events: data\n        });\n      };\n      getSchedule(onReceive);\n      this.state.events.map(function (key, index) {\n        var day = key.start;\n        if (!_this2.state.items[day]) {\n          _this2.state.items[day] = [];\n          _this2.state.items[day].push({\n            specialty: \"Specialty: \" + key.SpecialtyName,\n            start: \"start day: \" + key.start,\n            end: \"end day: \" + key.end,\n            hospital: \"hospital: \" + \"Baragwanath Hospital\",\n            height: Math.max(50, Math.floor(Math.random() * 150))\n          });\n        }\n        var newItems = {};\n        Object.keys(_this2.state.items).forEach(function (key) {\n          newItems[key] = _this2.state.items[key];\n        });\n        _this2.setState({\n          items: newItems\n        });\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item) {\n      return _jsxs(View, {\n        style: [styles.item, {\n          height: item.height\n        }],\n        children: [_jsx(Text, {\n          children: item.specialty\n        }), _jsx(Text, {\n          children: item.start\n        }), _jsx(Text, {\n          children: item.end\n        }), _jsx(Text, {\n          children: item.hospital\n        })]\n      });\n    }\n  }, {\n    key: \"renderEmptyDate\",\n    value: function renderEmptyDate() {\n      return _jsx(View, {\n        style: styles.emptyDate,\n        children: _jsx(Text, {\n          children: \"No Agenda On this day!\"\n        })\n      });\n    }\n  }, {\n    key: \"rowHasChanged\",\n    value: function rowHasChanged(r1, r2) {\n      return r1.name !== r2.name;\n    }\n  }]);\n  return AgendaCalendar;\n}(React.Component);\nAgendaCalendar.navigationOptions = {\n  headerTitle: \"Calendar\",\n  headerRight: _jsx(Button, {\n    onPress: function onPress() {\n      return navigator.navigate(\"EventsCalendar\");\n    },\n    title: \"View Events\",\n    color: \"#000\"\n  })\n};\nexport { AgendaCalendar as default };\nvar styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"white\",\n    flex: 1,\n    borderRadius: 5,\n    padding: 10,\n    marginRight: 10,\n    marginTop: 17\n  },\n  emptyDate: {\n    height: 15,\n    flex: 1,\n    paddingTop: 30\n  }\n});\nexport { days };","map":{"version":3,"names":["Calendar","Agenda","React","useState","Card","Avatar","firebase","db","getCurrentDate","days","initialDate","getSchedule","onReceiveList","schedules","firestore","collection","where","authUserID","get","then","querySnapshot","forEach","doc","push","key","length","student_id","data","SpecialtyName","hospital_ID","hospital_id","specialty_duration","start","start_date","end","end_date","specialty_id","snapshot","LogBox","ignoreLogs","AgendaCalendar","props","state","items","events","calendarBackground","agendaKnobColor","backgroundColor","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","monthTextColor","todayBackgroundColor","textSectionTitleColor","selectedDayBackgroundColor","dayTextColor","dotColor","Date","loadFromList","bind","renderItem","renderEmptyDate","rowHasChanged","onReceive","setState","map","index","day","specialty","hospital","height","Math","max","floor","random","newItems","Object","keys","item","styles","emptyDate","r1","r2","name","Component","navigationOptions","headerTitle","headerRight","navigator","navigate","StyleSheet","create","flex","borderRadius","padding","marginRight","marginTop","paddingTop"],"sources":["D:/repos/DFMPC-Student-Placement-System/Screens/CalendarView.js"],"sourcesContent":["import { Calendar, Agenda } from \"react-native-calendars\"; // 1.5.3\r\nimport React, { useState } from \"react\";\r\nimport { View, StyleSheet, TouchableOpacity, Text, LogBox } from \"react-native\";\r\nimport { Card, Avatar } from \"react-native-paper\";\r\nimport { firebase, db } from \"../firebase\";\r\nimport { getCurrentDate } from \"../HelperFunctions\";\r\n\r\nconst days = \"\";\r\nconst initialDate = getCurrentDate();\r\nasync function getSchedule(onReceiveList) {\r\n  const schedules = [];\r\n  var snapshot = await firebase\r\n    .firestore()\r\n    .collection(\"schedules\")\r\n    .where(\"student_id\", \"==\", authUserID) //@Noku - this is where we are filtering the data to be specific to the student logged in\r\n    .get()\r\n    .then((querySnapshot) => {\r\n      querySnapshot.forEach(function (doc) {\r\n        //push the required data to the array\r\n        schedules.push({\r\n          key: schedules.length + 1,\r\n          student_id: doc.data().student_id,\r\n          SpecialtyName: doc.data().SpecialtyName,\r\n          hospital_ID: doc.data().hospital_id,\r\n          specialty_duration: doc.data().specialty_duration,\r\n          start: doc.data().start_date,\r\n          end: doc.data().end_date,\r\n          specialty_id: doc.data().specialty_id,\r\n        });\r\n      });\r\n    });\r\n\r\n  onReceiveList(schedules);\r\n}\r\n\r\nLogBox.ignoreLogs([\"Setting a timer\"]);\r\n\r\nexport default class AgendaCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: {},\r\n      events: [],\r\n    };\r\n  }\r\n\r\n  static navigationOptions = {\r\n    headerTitle: \"Calendar\",\r\n    headerRight: (\r\n      <Button\r\n        onPress={() => navigator.navigate(\"EventsCalendar\")}\r\n        title=\"View Events\"\r\n        color=\"#000\"\r\n      />\r\n    ),\r\n  };\r\n  render() {\r\n    return (\r\n      <Agenda\r\n        theme={{\r\n          calendarBackground: \"white\", //agenda background\r\n          agendaKnobColor: \"rgba(28,56,107,0.9)\", // knob color\r\n          backgroundColor: \"rgba(28,56,107,0.9)\", // background color below agenda\r\n          agendaDayTextColor: \"rgba(28,56,107,0.9)\", // day name\r\n          agendaDayNumColor: \"rgba(28,56,107,0.9)\", // day number\r\n          agendaTodayColor: \"rgba(28,56,107,0.9)\", // today in list\r\n          monthTextColor: \"rgba(28,56,107,0.9)\", // name in calendar\r\n          todayBackgroundColor: \"rgba(28,56,107,0.9)\",\r\n          textSectionTitleColor: \"rgba(28,56,107,0.9)\",\r\n          selectedDayBackgroundColor: \"rgba(28,56,107,0.9)\", // calendar sel date\r\n          dayTextColor: \"rgba(28,56,107,0.9)\", // calendar day\r\n          dotColor: \"green\", // dots\r\n        }}\r\n        items={this.state.items}\r\n        selected={new Date()}\r\n        loadItemsForMonth={this.loadFromList.bind(this)}\r\n        renderItem={this.renderItem.bind(this)}\r\n        renderEmptyDate={this.renderEmptyDate.bind(this)}\r\n        rowHasChanged={this.rowHasChanged.bind(this)}\r\n      />\r\n    );\r\n  }\r\n\r\n  loadFromList() {\r\n    const onReceive = (data) => {\r\n      this.setState({\r\n        events: data,\r\n      });\r\n    };\r\n    getSchedule(onReceive);\r\n    this.state.events.map((key, index) => {\r\n      const day = key.start;\r\n\r\n      if (!this.state.items[day]) {\r\n        this.state.items[day] = [];\r\n        this.state.items[day].push({\r\n          specialty: \"Specialty: \" + key.SpecialtyName,\r\n          start: \"start day: \" + key.start,\r\n          end: \"end day: \" + key.end,\r\n          hospital: \"hospital: \" + \"Baragwanath Hospital\",\r\n          height: Math.max(50, Math.floor(Math.random() * 150)),\r\n        });\r\n      }\r\n      //console.log(this.state.items);\r\n      const newItems = {};\r\n      Object.keys(this.state.items).forEach((key) => {\r\n        newItems[key] = this.state.items[key];\r\n      });\r\n      this.setState({\r\n        items: newItems,\r\n      });\r\n    });\r\n  }\r\n\r\n  renderItem(item) {\r\n    return (\r\n      <View style={[styles.item, { height: item.height }]}>\r\n        <Text>{item.specialty}</Text>\r\n        <Text>{item.start}</Text>\r\n        <Text>{item.end}</Text>\r\n        <Text>{item.hospital}</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  renderEmptyDate() {\r\n    return (\r\n      <View style={styles.emptyDate}>\r\n        <Text>No Agenda On this day!</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  rowHasChanged(r1, r2) {\r\n    return r1.name !== r2.name;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginRight: 10,\r\n    marginTop: 17,\r\n  },\r\n  emptyDate: {\r\n    height: 15,\r\n    flex: 1,\r\n    paddingTop: 30,\r\n  },\r\n});\r\n\r\nexport { days };\r\n"],"mappings":";;;;;;;;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,wBAAwB;AACzD,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAExC,SAASC,IAAI,EAAEC,MAAM,QAAQ,oBAAoB;AACjD,SAASC,QAAQ,EAAEC,EAAE;AACrB,SAASC,cAAc;AAA6B;AAAA;AAEpD,IAAMC,IAAI,GAAG,EAAE;AACf,IAAMC,WAAW,GAAGF,cAAc,EAAE;AACpC,SAAeG,WAAW,CAACC,aAAa;EAAA;EAAA;IAAA;MAAA;QAAA;UAChCC,SAAS,GAAG,EAAE;UAAA;UAAA,iCACCP,QAAQ,CAC1BQ,SAAS,EAAE,CACXC,UAAU,CAAC,WAAW,CAAC,CACvBC,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEC,UAAU,CAAC,CACrCC,GAAG,EAAE,CACLC,IAAI,CAAC,UAACC,aAAa,EAAK;YACvBA,aAAa,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;cAEnCT,SAAS,CAACU,IAAI,CAAC;gBACbC,GAAG,EAAEX,SAAS,CAACY,MAAM,GAAG,CAAC;gBACzBC,UAAU,EAAEJ,GAAG,CAACK,IAAI,EAAE,CAACD,UAAU;gBACjCE,aAAa,EAAEN,GAAG,CAACK,IAAI,EAAE,CAACC,aAAa;gBACvCC,WAAW,EAAEP,GAAG,CAACK,IAAI,EAAE,CAACG,WAAW;gBACnCC,kBAAkB,EAAET,GAAG,CAACK,IAAI,EAAE,CAACI,kBAAkB;gBACjDC,KAAK,EAAEV,GAAG,CAACK,IAAI,EAAE,CAACM,UAAU;gBAC5BC,GAAG,EAAEZ,GAAG,CAACK,IAAI,EAAE,CAACQ,QAAQ;gBACxBC,YAAY,EAAEd,GAAG,CAACK,IAAI,EAAE,CAACS;cAC3B,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;QAAA;UAnBAC,QAAQ;UAqBZzB,aAAa,CAACC,SAAS,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAG3ByB,MAAM,CAACC,UAAU,CAAC,CAAC,iBAAiB,CAAC,CAAC;AAAC,IAElBC,cAAc;EAAA;EAAA;EACjC,wBAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IACX,MAAKC,KAAK,GAAG;MACXC,KAAK,EAAE,CAAC,CAAC;MACTC,MAAM,EAAE;IACV,CAAC;IAAC;EACJ;EAAC;IAAA;IAAA,OAYD,kBAAS;MACP,OACE,KAAC,MAAM;QACL,KAAK,EAAE;UACLC,kBAAkB,EAAE,OAAO;UAC3BC,eAAe,EAAE,qBAAqB;UACtCC,eAAe,EAAE,qBAAqB;UACtCC,kBAAkB,EAAE,qBAAqB;UACzCC,iBAAiB,EAAE,qBAAqB;UACxCC,gBAAgB,EAAE,qBAAqB;UACvCC,cAAc,EAAE,qBAAqB;UACrCC,oBAAoB,EAAE,qBAAqB;UAC3CC,qBAAqB,EAAE,qBAAqB;UAC5CC,0BAA0B,EAAE,qBAAqB;UACjDC,YAAY,EAAE,qBAAqB;UACnCC,QAAQ,EAAE;QACZ,CAAE;;QACF,KAAK,EAAE,IAAI,CAACd,KAAK,CAACC,KAAM;QACxB,QAAQ,EAAE,IAAIc,IAAI,EAAG;QACrB,iBAAiB,EAAE,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,IAAI,CAAE;QAChD,UAAU,EAAE,IAAI,CAACC,UAAU,CAACD,IAAI,CAAC,IAAI,CAAE;QACvC,eAAe,EAAE,IAAI,CAACE,eAAe,CAACF,IAAI,CAAC,IAAI,CAAE;QACjD,aAAa,EAAE,IAAI,CAACG,aAAa,CAACH,IAAI,CAAC,IAAI;MAAE,EAC7C;IAEN;EAAC;IAAA;IAAA,OAED,wBAAe;MAAA;MACb,IAAMI,SAAS,GAAG,SAAZA,SAAS,CAAIpC,IAAI,EAAK;QAC1B,MAAI,CAACqC,QAAQ,CAAC;UACZpB,MAAM,EAAEjB;QACV,CAAC,CAAC;MACJ,CAAC;MACDhB,WAAW,CAACoD,SAAS,CAAC;MACtB,IAAI,CAACrB,KAAK,CAACE,MAAM,CAACqB,GAAG,CAAC,UAACzC,GAAG,EAAE0C,KAAK,EAAK;QACpC,IAAMC,GAAG,GAAG3C,GAAG,CAACQ,KAAK;QAErB,IAAI,CAAC,MAAI,CAACU,KAAK,CAACC,KAAK,CAACwB,GAAG,CAAC,EAAE;UAC1B,MAAI,CAACzB,KAAK,CAACC,KAAK,CAACwB,GAAG,CAAC,GAAG,EAAE;UAC1B,MAAI,CAACzB,KAAK,CAACC,KAAK,CAACwB,GAAG,CAAC,CAAC5C,IAAI,CAAC;YACzB6C,SAAS,EAAE,aAAa,GAAG5C,GAAG,CAACI,aAAa;YAC5CI,KAAK,EAAE,aAAa,GAAGR,GAAG,CAACQ,KAAK;YAChCE,GAAG,EAAE,WAAW,GAAGV,GAAG,CAACU,GAAG;YAC1BmC,QAAQ,EAAE,YAAY,GAAG,sBAAsB;YAC/CC,MAAM,EAAEC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAED,IAAI,CAACE,KAAK,CAACF,IAAI,CAACG,MAAM,EAAE,GAAG,GAAG,CAAC;UACtD,CAAC,CAAC;QACJ;QAEA,IAAMC,QAAQ,GAAG,CAAC,CAAC;QACnBC,MAAM,CAACC,IAAI,CAAC,MAAI,CAACnC,KAAK,CAACC,KAAK,CAAC,CAACtB,OAAO,CAAC,UAACG,GAAG,EAAK;UAC7CmD,QAAQ,CAACnD,GAAG,CAAC,GAAG,MAAI,CAACkB,KAAK,CAACC,KAAK,CAACnB,GAAG,CAAC;QACvC,CAAC,CAAC;QACF,MAAI,CAACwC,QAAQ,CAAC;UACZrB,KAAK,EAAEgC;QACT,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EAAC;IAAA;IAAA,OAED,oBAAWG,IAAI,EAAE;MACf,OACE,MAAC,IAAI;QAAC,KAAK,EAAE,CAACC,MAAM,CAACD,IAAI,EAAE;UAAER,MAAM,EAAEQ,IAAI,CAACR;QAAO,CAAC,CAAE;QAAA,WAClD,KAAC,IAAI;UAAA,UAAEQ,IAAI,CAACV;QAAS,EAAQ,EAC7B,KAAC,IAAI;UAAA,UAAEU,IAAI,CAAC9C;QAAK,EAAQ,EACzB,KAAC,IAAI;UAAA,UAAE8C,IAAI,CAAC5C;QAAG,EAAQ,EACvB,KAAC,IAAI;UAAA,UAAE4C,IAAI,CAACT;QAAQ,EAAQ;MAAA,EACvB;IAEX;EAAC;IAAA;IAAA,OAED,2BAAkB;MAChB,OACE,KAAC,IAAI;QAAC,KAAK,EAAEU,MAAM,CAACC,SAAU;QAAA,UAC5B,KAAC,IAAI;UAAA;QAAA;MAA8B,EAC9B;IAEX;EAAC;IAAA;IAAA,OAED,uBAAcC,EAAE,EAAEC,EAAE,EAAE;MACpB,OAAOD,EAAE,CAACE,IAAI,KAAKD,EAAE,CAACC,IAAI;IAC5B;EAAC;EAAA;AAAA,EAlGyCjF,KAAK,CAACkF,SAAS;AAAtC5C,cAAc,CAS1B6C,iBAAiB,GAAG;EACzBC,WAAW,EAAE,UAAU;EACvBC,WAAW,EACT,KAAC,MAAM;IACL,OAAO,EAAE;MAAA,OAAMC,SAAS,CAACC,QAAQ,CAAC,gBAAgB,CAAC;IAAA,CAAC;IACpD,KAAK,EAAC,aAAa;IACnB,KAAK,EAAC;EAAM;AAGlB,CAAC;AAAA,SAlBkBjD,cAAc;AAqGnC,IAAMuC,MAAM,GAAGW,UAAU,CAACC,MAAM,CAAC;EAC/Bb,IAAI,EAAE;IACJ/B,eAAe,EAAE,OAAO;IACxB6C,IAAI,EAAE,CAAC;IACPC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE;EACb,CAAC;EACDhB,SAAS,EAAE;IACTV,MAAM,EAAE,EAAE;IACVsB,IAAI,EAAE,CAAC;IACPK,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,SAASxF,IAAI"},"metadata":{},"sourceType":"module"}