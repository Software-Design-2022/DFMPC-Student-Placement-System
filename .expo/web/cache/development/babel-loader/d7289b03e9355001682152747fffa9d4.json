{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\nimport { getEvents } from \"../Screens/RetrieveEvents\";\nimport AppContext from \"../AppContext\";\nimport \"../global.js\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { setStatusBarNetworkActivityIndicatorVisible } from \"expo-status-bar\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar buttonHeight = 50;\nvar textPos = buttonHeight / 2;\nvar SPACING = 20;\nvar AVATAR_SIZE = 70;\nvar ICON_SIZE = 80;\nvar dateToPass = \"\";\nvar specialty = \"\";\nvar RANGE = 12;\nvar initialDate = \"2022-01-02\";\nvar usersAgenda = {};\nvar days = \"\";\n\nvar EventCalendar = function EventCalendar() {\n  var navigation = useNavigation();\n  var myContext = useContext(AppContext);\n\n  var _useState = useState(initialDate),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDate = _useState2[0],\n      setSelectedDate = _useState2[1];\n\n  var _useState3 = useState({\n    EventList: [{\n      key: 0,\n      name: \"\",\n      programme: \"\",\n      ID: \"\",\n      start_date: \"\",\n      end_date: \"\"\n    }]\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var onReceive = function onReceive(EventList) {\n    setState(function (prevState) {\n      return {\n        EventList: prevState.EventList = EventList\n      };\n    });\n  };\n\n  getEvents(onReceive);\n\n  var fetchData = function fetchData() {\n    var resp, data;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(getEvents(onReceive)));\n\n          case 2:\n            resp = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(resp.json());\n\n          case 5:\n            data = _context.sent;\n            setData(data);\n            setLoading(false);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onDayPress = function onDayPress(day) {\n    console.log(\"Just ran the redundant function\");\n  };\n\n  return _jsx(View, {\n    children: _jsx(CalendarList, {\n      current: initialDate,\n      pastScrollRange: 3,\n      futureScrollRange: RANGE,\n      theme: theme,\n      onDayPress: function onDayPress(day) {\n        setSelectedDate(day.dateString);\n        dateToPass = day.dateString;\n        console.log(\"dateToPass value before navigation:\", dateToPass);\n        navigation.navigate(\"DayAgenda\");\n      },\n      markingType: \"period\",\n      markedDates: generateSchedule(onReceive)\n    })\n  });\n};\n\nvar generateSchedule = function generateSchedule(onReceive) {};\n\nvar theme = {\n  \"stylesheet.calendar.header\": {\n    dayHeader: {\n      fontWeight: \"600\",\n      color: \"#48BFE3\"\n    }\n  },\n  \"stylesheet.day.basic\": {\n    today: {\n      borderColor: \"#48BFE3\",\n      borderWidth: 0.8\n    },\n    todayText: {\n      color: \"#5390D9\",\n      fontWeight: \"800\"\n    }\n  }\n};\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 20,\n    backgroundColor: \"white\",\n    marginTop: 10,\n    borderRadius: 20,\n    flex: 1,\n    borderColor: \"rgba(36,50,61,1)\",\n    borderWidth: 5\n  }\n});\nexport default EventCalendar;\nexport { dateToPass };\nexport { days };",
  "map": {
    "version": 3,
    "names": [
      "React",
      "useState",
      "useEffect",
      "useContext",
      "useNavigation",
      "Calendar",
      "CalendarList",
      "Agenda",
      "getEvents",
      "AppContext",
      "NavigationContainer",
      "setStatusBarNetworkActivityIndicatorVisible",
      "buttonHeight",
      "textPos",
      "SPACING",
      "AVATAR_SIZE",
      "ICON_SIZE",
      "dateToPass",
      "specialty",
      "RANGE",
      "initialDate",
      "usersAgenda",
      "days",
      "EventCalendar",
      "navigation",
      "myContext",
      "selectedDate",
      "setSelectedDate",
      "EventList",
      "key",
      "name",
      "programme",
      "ID",
      "start_date",
      "end_date",
      "state",
      "setState",
      "onReceive",
      "prevState",
      "fetchData",
      "fetch",
      "resp",
      "json",
      "data",
      "setData",
      "setLoading",
      "onDayPress",
      "day",
      "console",
      "log",
      "theme",
      "dateString",
      "navigate",
      "generateSchedule",
      "dayHeader",
      "fontWeight",
      "color",
      "today",
      "borderColor",
      "borderWidth",
      "todayText",
      "styles",
      "StyleSheet",
      "create",
      "container",
      "marginTop",
      "backgroundColor",
      "borderRadius",
      "flex"
    ],
    "sources": [
      "C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/Screens/EventsCalendar.js"
    ],
    "sourcesContent": [
      "import React, { useState, useEffect, useContext } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\nimport { Calendar, CalendarList, Agenda } from \"react-native-calendars\";\r\nimport { getEvents } from \"../Screens/RetrieveEvents\";\r\nimport AppContext from \"../AppContext\";\r\nimport \"../global.js\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { setStatusBarNetworkActivityIndicatorVisible } from \"expo-status-bar\";\r\n\r\n//constants\r\nconst buttonHeight = 50;\r\nconst textPos = buttonHeight / 2;\r\nconst SPACING = 20;\r\nconst AVATAR_SIZE = 70;\r\nconst ICON_SIZE = 80;\r\nvar dateToPass = \"\";\r\nvar specialty = \"\";\r\nconst RANGE = 12;\r\nconst initialDate = \"2022-01-02\";\r\nvar usersAgenda = {};\r\nconst days = \"\"; //@Noku - this is what I used to fix the Calendar\r\n\r\nconst EventCalendar = () => {\r\n  //use navigation\r\n  const navigation = useNavigation();\r\n  const myContext = useContext(AppContext);\r\n  // Keeps track of selected date\r\n  const [selectedDate, setSelectedDate] = useState(initialDate);\r\n\r\n  const [state, setState] = useState({\r\n    //@Noku -  this useState will be used to set the current state of our data\r\n    // sets scheduleList to the data from database (firestore)\r\n    EventList: [\r\n      {\r\n        key: 0,\r\n        name: \"\",\r\n        programme: \"\",\r\n        ID: \"\",\r\n        start_date: \"\",\r\n        end_date: \"\",\r\n      },\r\n    ],\r\n  });\r\n\r\n  const onReceive = (EventList) => {\r\n    // @Noku - when the list is received we set our scheduleList to the current received list (updating)\r\n\r\n    setState((prevState) => ({\r\n      EventList: (prevState.EventList = EventList),\r\n    }));\r\n  };\r\n  // getEvents is a function from RetrieveEvents.js\r\n  // it gets the list containing Events data from firestore\r\n  getEvents(onReceive);\r\n  const fetchData = async () => {\r\n    const resp = await fetch(getEvents(onReceive));\r\n    const data = await resp.json();\r\n    setData(data);\r\n    setLoading(false);\r\n  };\r\n\r\n  // User's agenda\r\n  // What to do when day is pressed.\r\n  const onDayPress = (day) => {\r\n    console.log(\"Just ran the redundant function\");\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <CalendarList\r\n        // testID={testIDs.calendarList.CONTAINER}\r\n        current={initialDate}\r\n        pastScrollRange={3}\r\n        futureScrollRange={RANGE}\r\n        // renderHeader={renderCustomHeader}\r\n        theme={theme}\r\n        onDayPress={(day) => {\r\n          setSelectedDate(day.dateString);\r\n          dateToPass = day.dateString;\r\n          console.log(\"dateToPass value before navigation:\", dateToPass);\r\n          navigation.navigate(\"DayAgenda\"); // @Noku Does this js file exist?\r\n        }}\r\n        markingType=\"period\"\r\n        // * The generateSchedule method does way too much at once, really caused issues with understanding\r\n        // I need to add back in the \"created_at\",\"updated_at\", \"hospital_id\", \"specialty_id\" into the generate Schedule function then strip out only the marked dates format.\r\n        markedDates={generateSchedule(onReceive)} // now this function is the wrong format only to include: color, textColor and [startDate,endDate]\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst generateSchedule = (onReceive) => {\r\n  /**\r\n   * Function to generate the schedule for the calendar\r\n   * TODO: Create a calendar with the student's ID as their schedule.\r\n   * For loop through the Event List and add the dates to the calendar as followed.\r\n   * Create .saveEvent() function to save the event to the database.\r\n   * RNCalendarEvents.saveEvent(specialtyName, {\r\n   * calendarId: studentID,\r\n   * startDate: start_date, \\\\ Correct format '2016-08-19T19:26:00.000Z'\r\n   * recurrenceRule: {\r\n   * frequency: 'weekly',\r\n   * endDate: end_date,\r\n   * }\r\n   * location:  hospitalID,\r\n   * notes: 'Bring sunglasses'\r\n   * }\r\n   */\r\n  // @Noku - this is the function needs work\r\n};\r\n\r\nconst theme = {\r\n  \"stylesheet.calendar.header\": {\r\n    dayHeader: {\r\n      fontWeight: \"600\",\r\n      color: \"#48BFE3\",\r\n    },\r\n  },\r\n  \"stylesheet.day.basic\": {\r\n    today: {\r\n      borderColor: \"#48BFE3\",\r\n      borderWidth: 0.8,\r\n    },\r\n    todayText: {\r\n      color: \"#5390D9\",\r\n      fontWeight: \"800\",\r\n    },\r\n  },\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 20,\r\n    backgroundColor: \"white\",\r\n    marginTop: 10,\r\n    borderRadius: 20,\r\n    flex: 1,\r\n    borderColor: \"rgba(36,50,61,1)\",\r\n    borderWidth: 5,\r\n  },\r\n});\r\n\r\nexport default EventCalendar;\r\n\r\nexport { dateToPass };\r\nexport { days };\r\n"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "module"
}
