{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError, Platform } from 'expo-modules-core';\nimport BadgeModule from \"./BadgeModule\";\nexport default function setBadgeCountAsync(badgeCount, options) {\n  return _regeneratorRuntime.async(function setBadgeCountAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (BadgeModule.setBadgeCountAsync) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(BadgeModule.setBadgeCountAsync(badgeCount, options == null ? void 0 : options[Platform.OS]));\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":";AAAA,SAASA,mBAAmB,EAAEC,QAAQ,QAAQ,mBAAmB;AAEjE,OAAOC,WAAW;AAOlB,eAAe,SAAeC,kBAAkB,CAC9CC,UAAkB,EAClBC,OAA8B;EAAA;IAAA;MAAA;QAAA;UAAA,IAEzBH,WAAW,CAACC,kBAAkB;YAAA;YAAA;UAAA;UAAA,MAC3B,IAAIH,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC;QAAA;UAAA;UAAA,iCAG7DE,WAAW,CAACC,kBAAkB,CAACC,UAAU,EAAEC,OAAO,oBAAPA,OAAO,CAAGJ,QAAQ,CAACK,EAAE,CAAC,CAAC;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","names":["UnavailabilityError","Platform","BadgeModule","setBadgeCountAsync","badgeCount","options","OS"],"sourceRoot":"","sources":["../src/setBadgeCountAsync.ts"],"sourcesContent":["import { UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport BadgeModule from './BadgeModule';\nimport { WebSetBadgeCountOptions } from './BadgeModule.types';\n\nexport interface SetBadgeCountOptions {\n  web?: WebSetBadgeCountOptions;\n}\n\nexport default async function setBadgeCountAsync(\n  badgeCount: number,\n  options?: SetBadgeCountOptions\n): Promise<boolean> {\n  if (!BadgeModule.setBadgeCountAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n  }\n\n  return await BadgeModule.setBadgeCountAsync(badgeCount, options?.[Platform.OS]);\n}\n"]},"metadata":{},"sourceType":"module"}