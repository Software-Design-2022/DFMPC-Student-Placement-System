{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"action\", \"duration\", \"onDismiss\", \"children\", \"wrapperStyle\", \"style\", \"theme\"],\n  _excluded2 = [\"style\", \"label\", \"onPress\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"./Button\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport { withTheme } from \"../core/theming\";\nvar DURATION_SHORT = 4000;\nvar DURATION_MEDIUM = 7000;\nvar DURATION_LONG = 10000;\n\nvar Snackbar = function Snackbar(_ref) {\n  var visible = _ref.visible,\n    action = _ref.action,\n    _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? DURATION_MEDIUM : _ref$duration,\n    onDismiss = _ref.onDismiss,\n    children = _ref.children,\n    wrapperStyle = _ref.wrapperStyle,\n    style = _ref.style,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(0.0)),\n    opacity = _React$useRef.current;\n  var _React$useState = React.useState(!visible),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    hidden = _React$useState2[0],\n    setHidden = _React$useState2[1];\n  var hideTimeout = React.useRef(undefined);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    return function () {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n    };\n  }, []);\n  React.useLayoutEffect(function () {\n    if (visible) {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      setHidden(false);\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          var isInfinity = duration === Number.POSITIVE_INFINITY || duration === Number.NEGATIVE_INFINITY;\n          if (finished && !isInfinity) {\n            hideTimeout.current = setTimeout(onDismiss, duration);\n          }\n        }\n      });\n    } else {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(function (_ref3) {\n        var finished = _ref3.finished;\n        if (finished) setHidden(true);\n      });\n    }\n  }, [visible, duration, opacity, scale, onDismiss]);\n  var colors = theme.colors,\n    roundness = theme.roundness;\n  if (hidden) return null;\n  var _ref4 = action || {},\n    actionStyle = _ref4.style,\n    actionLabel = _ref4.label,\n    onPressAction = _ref4.onPress,\n    actionProps = _objectWithoutProperties(_ref4, _excluded2);\n  return React.createElement(SafeAreaView, {\n    pointerEvents: \"box-none\",\n    style: [styles.wrapper, wrapperStyle]\n  }, React.createElement(Surface, _extends({\n    pointerEvents: \"box-none\",\n    accessibilityLiveRegion: \"polite\",\n    style: [styles.container, {\n      borderRadius: roundness,\n      opacity: opacity,\n      transform: [{\n        scale: visible ? opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.9, 1]\n        }) : 1\n      }]\n    }, {\n      backgroundColor: colors.onSurface\n    }, style]\n  }, rest), React.createElement(Text, {\n    style: [styles.content, {\n      marginRight: action ? 0 : 16,\n      color: colors.surface\n    }]\n  }, children), action ? React.createElement(Button, _extends({\n    onPress: function onPress() {\n      onPressAction === null || onPressAction === void 0 ? void 0 : onPressAction();\n      onDismiss();\n    },\n    style: [styles.button, actionStyle],\n    color: colors.accent,\n    compact: true,\n    mode: \"text\"\n  }, actionProps), actionLabel) : null));\n};\n\nSnackbar.DURATION_SHORT = DURATION_SHORT;\n\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\n\nSnackbar.DURATION_LONG = DURATION_LONG;\nvar styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%'\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6\n  }\n});\nexport default withTheme(Snackbar);","map":{"version":3,"mappings":"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","names":["React","Button","Surface","Text","withTheme","DURATION_SHORT","DURATION_MEDIUM","DURATION_LONG","Snackbar","_ref","visible","action","duration","onDismiss","children","wrapperStyle","style","theme","rest","useRef","Animated","Value","opacity","current","useState","hidden","setHidden","hideTimeout","undefined","scale","animation","useEffect","clearTimeout","useLayoutEffect","timing","toValue","useNativeDriver","start","finished","_ref2","isInfinity","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","setTimeout","_ref3","colors","roundness","actionStyle","actionLabel","label","onPressAction","onPress","actionProps","SafeAreaView","pointerEvents","styles","wrapper","accessibilityLiveRegion","container","borderRadius","transform","interpolate","inputRange","outputRange","backgroundColor","onSurface","content","marginRight","color","surface","button","accent","compact","mode","StyleSheet","create","position","bottom","width","elevation","flexDirection","justifyContent","alignItems","margin","marginLeft","marginVertical","flexWrap","flex","marginHorizontal"],"sources":["Snackbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  SafeAreaView,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport Button from './Button';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport { withTheme } from '../core/theming';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Whether the Snackbar is currently visible.\n   */\n  visible: boolean;\n  /**\n   * Label and press callback for the action button. It should contain the following properties:\n   * - `label` - Label of the action button\n   * - `onPress` - Callback that is called when action button is pressed.\n   */\n  action?: Omit<React.ComponentProps<typeof Button>, 'children'> & {\n    label: string;\n  };\n  /**\n   * The duration for which the Snackbar is shown.\n   */\n  duration?: number;\n  /**\n   * Callback called when Snackbar is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Text content of the Snackbar.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the wrapper of the snackbar\n   */\n  wrapperStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DURATION_SHORT = 4000;\nconst DURATION_MEDIUM = 7000;\nconst DURATION_LONG = 10000;\n\n/**\n * Snackbars provide brief feedback about an operation through a message at the bottom of the screen.\n * Snackbar by default uses `onSurface` color from theme.\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/snackbar.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View, StyleSheet } from 'react-native';\n * import { Button, Snackbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const onToggleSnackBar = () => setVisible(!visible);\n *\n *   const onDismissSnackBar = () => setVisible(false);\n *\n *   return (\n *     <View style={styles.container}>\n *       <Button onPress={onToggleSnackBar}>{visible ? 'Hide' : 'Show'}</Button>\n *       <Snackbar\n *         visible={visible}\n *         onDismiss={onDismissSnackBar}\n *         action={{\n *           label: 'Undo',\n *           onPress: () => {\n *             // Do something\n *           },\n *         }}>\n *         Hey there! I'm a Snackbar.\n *       </Snackbar>\n *     </View>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     justifyContent: 'space-between',\n *   },\n * });\n *\n * export default MyComponent;\n * ```\n */\nconst Snackbar = ({\n  visible,\n  action,\n  duration = DURATION_MEDIUM,\n  onDismiss,\n  children,\n  wrapperStyle,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(0.0)\n  );\n  const [hidden, setHidden] = React.useState<boolean>(!visible);\n\n  const hideTimeout = React.useRef<NodeJS.Timeout | undefined>(undefined);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    return () => {\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n    };\n  }, []);\n\n  React.useLayoutEffect(() => {\n    if (visible) {\n      // show\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n      setHidden(false);\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) {\n          const isInfinity =\n            duration === Number.POSITIVE_INFINITY ||\n            duration === Number.NEGATIVE_INFINITY;\n\n          if (finished && !isInfinity) {\n            hideTimeout.current = setTimeout(\n              onDismiss,\n              duration\n            ) as unknown as NodeJS.Timeout;\n          }\n        }\n      });\n    } else {\n      // hide\n      if (hideTimeout.current) clearTimeout(hideTimeout.current);\n\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 100 * scale,\n        useNativeDriver: true,\n      }).start(({ finished }) => {\n        if (finished) setHidden(true);\n      });\n    }\n  }, [visible, duration, opacity, scale, onDismiss]);\n\n  const { colors, roundness } = theme;\n\n  if (hidden) return null;\n\n  const {\n    style: actionStyle,\n    label: actionLabel,\n    onPress: onPressAction,\n    ...actionProps\n  } = action || {};\n\n  return (\n    <SafeAreaView\n      pointerEvents=\"box-none\"\n      style={[styles.wrapper, wrapperStyle]}\n    >\n      <Surface\n        pointerEvents=\"box-none\"\n        accessibilityLiveRegion=\"polite\"\n        style={\n          [\n            styles.container,\n            {\n              borderRadius: roundness,\n              opacity: opacity,\n              transform: [\n                {\n                  scale: visible\n                    ? opacity.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.9, 1],\n                      })\n                    : 1,\n                },\n              ],\n            },\n            { backgroundColor: colors.onSurface },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <Text\n          style={[\n            styles.content,\n            { marginRight: action ? 0 : 16, color: colors.surface },\n          ]}\n        >\n          {children}\n        </Text>\n        {action ? (\n          <Button\n            onPress={() => {\n              onPressAction?.();\n              onDismiss();\n            }}\n            style={[styles.button, actionStyle]}\n            color={colors.accent}\n            compact\n            mode=\"text\"\n            {...actionProps}\n          >\n            {actionLabel}\n          </Button>\n        ) : null}\n      </Surface>\n    </SafeAreaView>\n  );\n};\n\n/**\n * Show the Snackbar for a short duration.\n */\nSnackbar.DURATION_SHORT = DURATION_SHORT;\n\n/**\n * Show the Snackbar for a medium duration.\n */\nSnackbar.DURATION_MEDIUM = DURATION_MEDIUM;\n\n/**\n * Show the Snackbar for a long duration.\n */\nSnackbar.DURATION_LONG = DURATION_LONG;\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n    bottom: 0,\n    width: '100%',\n  },\n  container: {\n    elevation: 6,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    margin: 8,\n    borderRadius: 4,\n  },\n  content: {\n    marginLeft: 16,\n    marginVertical: 14,\n    flexWrap: 'wrap',\n    flex: 1,\n  },\n  button: {\n    marginHorizontal: 8,\n    marginVertical: 6,\n  },\n});\n\nexport default withTheme(Snackbar);\n"]},"metadata":{},"sourceType":"module"}