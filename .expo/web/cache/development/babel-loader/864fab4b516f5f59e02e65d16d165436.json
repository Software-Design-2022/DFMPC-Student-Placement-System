{"ast":null,"code":"var _require = require(\"./dateutils\"),\n    isToday = _require.isToday,\n    isDateNotInTheRange = _require.isDateNotInTheRange,\n    sameMonth = _require.sameMonth;\n\nvar _require2 = require(\"./interface\"),\n    parseDate = _require2.parseDate,\n    toMarkingFormat = _require2.toMarkingFormat;\n\nexport function getState(day, current, props) {\n  var minDate = props.minDate,\n      maxDate = props.maxDate,\n      disabledByDefault = props.disabledByDefault,\n      context = props.context;\n\n  var _minDate = parseDate(minDate);\n\n  var _maxDate = parseDate(maxDate);\n\n  var state = '';\n\n  if ((context == null ? void 0 : context.date) === toMarkingFormat(day)) {\n    state = 'selected';\n  } else if (isToday(day)) {\n    state = 'today';\n  }\n\n  if (disabledByDefault) {\n    state = 'disabled';\n  } else if (isDateNotInTheRange(_minDate, _maxDate, day)) {\n    state = 'disabled';\n  } else if (!sameMonth(day, current)) {\n    state = 'disabled';\n  }\n\n  return state;\n}","map":{"version":3,"names":["require","isToday","isDateNotInTheRange","sameMonth","parseDate","toMarkingFormat","getState","day","current","props","minDate","maxDate","disabledByDefault","context","_minDate","_maxDate","state","date"],"sources":["C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/node_modules/react-native-calendars/src/day-state-manager.js"],"sourcesContent":["const { isToday, isDateNotInTheRange, sameMonth } = require('./dateutils');\nconst { parseDate, toMarkingFormat } = require('./interface');\nexport function getState(day, current, props) {\n    const { minDate, maxDate, disabledByDefault, context } = props;\n    const _minDate = parseDate(minDate);\n    const _maxDate = parseDate(maxDate);\n    let state = '';\n    if (context?.date === toMarkingFormat(day)) {\n        state = 'selected';\n    }\n    else if (isToday(day)) {\n        state = 'today';\n    }\n    if (disabledByDefault) {\n        state = 'disabled';\n    }\n    else if (isDateNotInTheRange(_minDate, _maxDate, day)) {\n        state = 'disabled';\n    }\n    else if (!sameMonth(day, current)) {\n        state = 'disabled';\n    }\n    return state;\n}\n"],"mappings":"AAAA,eAAoDA,OAAO,eAA3D;AAAA,IAAQC,OAAR,YAAQA,OAAR;AAAA,IAAiBC,mBAAjB,YAAiBA,mBAAjB;AAAA,IAAsCC,SAAtC,YAAsCA,SAAtC;;AACA,gBAAuCH,OAAO,eAA9C;AAAA,IAAQI,SAAR,aAAQA,SAAR;AAAA,IAAmBC,eAAnB,aAAmBA,eAAnB;;AACA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgCC,KAAhC,EAAuC;EAC1C,IAAQC,OAAR,GAAyDD,KAAzD,CAAQC,OAAR;EAAA,IAAiBC,OAAjB,GAAyDF,KAAzD,CAAiBE,OAAjB;EAAA,IAA0BC,iBAA1B,GAAyDH,KAAzD,CAA0BG,iBAA1B;EAAA,IAA6CC,OAA7C,GAAyDJ,KAAzD,CAA6CI,OAA7C;;EACA,IAAMC,QAAQ,GAAGV,SAAS,CAACM,OAAD,CAA1B;;EACA,IAAMK,QAAQ,GAAGX,SAAS,CAACO,OAAD,CAA1B;;EACA,IAAIK,KAAK,GAAG,EAAZ;;EACA,IAAI,CAAAH,OAAO,QAAP,YAAAA,OAAO,CAAEI,IAAT,MAAkBZ,eAAe,CAACE,GAAD,CAArC,EAA4C;IACxCS,KAAK,GAAG,UAAR;EACH,CAFD,MAGK,IAAIf,OAAO,CAACM,GAAD,CAAX,EAAkB;IACnBS,KAAK,GAAG,OAAR;EACH;;EACD,IAAIJ,iBAAJ,EAAuB;IACnBI,KAAK,GAAG,UAAR;EACH,CAFD,MAGK,IAAId,mBAAmB,CAACY,QAAD,EAAWC,QAAX,EAAqBR,GAArB,CAAvB,EAAkD;IACnDS,KAAK,GAAG,UAAR;EACH,CAFI,MAGA,IAAI,CAACb,SAAS,CAACI,GAAD,EAAMC,OAAN,CAAd,EAA8B;IAC/BQ,KAAK,GAAG,UAAR;EACH;;EACD,OAAOA,KAAP;AACH"},"metadata":{},"sourceType":"module"}