{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"size\", \"style\", \"theme\", \"visible\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { white, black } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nimport getContrastingColor from \"../utils/getContrastingColor\";\nvar defaultSize = 20;\n\nvar Badge = function Badge(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      opacity = _React$useRef.current;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      fontScale = _useWindowDimensions.fontScale;\n\n  var isFirstRendering = React.useRef(true);\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [visible, opacity, scale]);\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = getContrastingColor(backgroundColor, white, black);\n  var borderRadius = size / 2;\n  return React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [_objectSpread(_objectSpread({\n      opacity: opacity,\n      backgroundColor: backgroundColor,\n      color: textColor,\n      fontSize: size * 0.5\n    }, theme.fonts.regular), {}, {\n      lineHeight: size / fontScale,\n      height: size,\n      minWidth: size,\n      borderRadius: borderRadius\n    }), styles.container, restStyle]\n  }, rest), children);\n};\n\nexport default withTheme(Badge);\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAQA,SAASC,KAAT,EAAgBC,KAAhB;AACA,SAASC,SAAT;AACA,OAAOC,mBAAP;AAEA,IAAMC,WAAW,GAAG,EAApB;;AAkDA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOD;EAAA,IANXC,QAMW,QANXA,QAMW;EAAA,qBALXC,IAKW;EAAA,IALXA,IAKW,0BALJH,WAKI;EAAA,IAJXI,KAIW,QAJXA,KAIW;EAAA,IAHXC,KAGW,QAHXA,KAGW;EAAA,wBAFXC,OAEW;EAAA,IAFXA,OAEW,6BAFD,IAEC;EAAA,IADRC,IACQ;;EACX,oBAA6BZ,KAAK,CAACa,MAANb,CAC3B,IAAIc,QAAQ,CAACC,KAAb,CAAmBJ,OAAO,GAAG,CAAH,GAAO,CAAjC,CAD2BX,CAA7B;EAAA,IAAiBgB,OAAjB,iBAAQC,OAAR;;EAGA,2BAAsBC,mBAAmB,EAAzC;EAAA,IAAQC,SAAR,wBAAQA,SAAR;;EAEA,IAAMC,gBAAgB,GAAGpB,KAAK,CAACa,MAANb,CAAsB,IAAtBA,CAAzB;EAEA,IACeqB,KADf,GAEIX,KAFJ,CACEY,SADF,CACeD,KADf;EAIArB,KAAK,CAACuB,SAANvB,CAAgB,YAAM;IAEpB,IAAIoB,gBAAgB,CAACH,OAArB,EAA8B;MAC5BG,gBAAgB,CAACH,OAAjBG,GAA2B,KAA3BA;MACA;IACD;;IAEDN,QAAQ,CAACU,MAATV,CAAgBE,OAAhBF,EAAyB;MACvBW,OAAO,EAAEd,OAAO,GAAG,CAAH,GAAO,CADA;MAEvBe,QAAQ,EAAE,MAAML,KAFO;MAGvBM,eAAe,EAAE;IAHM,CAAzBb,EAIGc,KAJHd;EAPF,GAYG,CAACH,OAAD,EAAUK,OAAV,EAAmBK,KAAnB,CAZHrB;;EAcA,YACG6B,UAAU,CAACC,OAAXD,CAAmBpB,KAAnBoB,KAA6B,EADhC;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAA0BrB,KAAK,CAACsB,MAANtB,CAAauB,YAAvC;EAAA,IAAwDC,SAAxD;;EAGA,IAAMC,SAAS,GAAG/B,mBAAmB,CAAC2B,eAAD,EAAkB9B,KAAlB,EAAyBC,KAAzB,CAArC;EAEA,IAAMkC,YAAY,GAAG5B,IAAI,GAAG,CAA5B;EAEA,OACER,oBAACc,QAAD,CAAUuB,IAAV;IACEC,aAAa,EAAE,CADjB;IAEE7B,KAAK,EAAE;MAEHO,OADF,EACEA,OAFG;MAGHe,eAFF,EAEEA,eAHG;MAIHQ,KAAK,EAAEJ,SAJJ;MAKHK,QAAQ,EAAEhC,IAAI,GAAG;IALd,GAMAE,KAAK,CAAC+B,KAAN/B,CAAYgC,OANZ;MAOHC,UAAU,EAAEnC,IAAI,GAAGW,SAPhB;MAQHyB,MAAM,EAAEpC,IARL;MASHqC,QAAQ,EAAErC,IATP;MAUH4B;IAVG,IAYLU,MAAM,CAACC,SAZF,EAaLb,SAbK;EAFT,GAiBMtB,IAjBN,GAmBGL,QAnBH,CADF;AAxCF;;AAiEA,eAAeJ,SAAS,CAACG,KAAD,CAAxB;AAEA,IAAMwC,MAAM,GAAGjB,UAAU,CAACmB,MAAXnB,CAAkB;EAC/BkB,SAAS,EAAE;IACTE,SAAS,EAAE,UADF;IAETC,SAAS,EAAE,QAFF;IAGTC,iBAAiB,EAAE,QAHV;IAITC,iBAAiB,EAAE,CAJV;IAKTC,QAAQ,EAAE;EALD;AADoB,CAAlBxB,CAAf","names":["React","white","black","withTheme","getContrastingColor","defaultSize","Badge","children","size","style","theme","visible","rest","useRef","Animated","Value","opacity","current","useWindowDimensions","fontScale","isFirstRendering","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","borderRadius","Text","numberOfLines","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"sources":["Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  useWindowDimensions,\n} from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { fontScale } = useWindowDimensions();\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size / fontScale,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}