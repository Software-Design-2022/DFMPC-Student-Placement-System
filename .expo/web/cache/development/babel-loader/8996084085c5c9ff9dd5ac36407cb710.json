{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Calendar, Agenda } from \"react-native-calendars\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Card, Avatar } from \"react-native-paper\";\nimport { firebase, db } from \"../firebase\";\nimport { getCurrentDate } from \"../HelperFunctions\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar data = [];\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar SPACING = 20;\nvar ICON_SIZE = 75;\nvar initialDate = getCurrentDate();\n\nfunction eventsData(onReceiveList) {\n  var events, snapshot;\n  return _regeneratorRuntime.async(function eventsData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          events = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"events\").get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              var start = doc.data().start_date,\n                  end = doc.data().end_date,\n                  name = doc.data().name,\n                  id = doc.data().id,\n                  programme = doc.data().programme,\n                  key = events.length + 1;\n              events.push({\n                key: key,\n                start: start,\n                end: end,\n                id: id,\n                programme: programme,\n                name: name\n              });\n            });\n          }));\n\n        case 3:\n          snapshot = _context.sent;\n          onReceiveList(events);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nLogBox.ignoreLogs([\"Setting a timer\"]);\n\nvar EventsCalendar = function (_React$Component) {\n  _inherits(EventsCalendar, _React$Component);\n\n  var _super = _createSuper(EventsCalendar);\n\n  function EventsCalendar(props) {\n    var _this;\n\n    _classCallCheck(this, EventsCalendar);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      items: {},\n      events: []\n    };\n    return _this;\n  }\n\n  _createClass(EventsCalendar, [{\n    key: \"render\",\n    value: function render() {\n      return _jsxs(View, {\n        style: {\n          flex: 1\n        },\n        children: [_jsx(View, {\n          children: _jsx(TouchableOpacity, {\n            underlayColor: \"rgba(0,0,0,0)\",\n            style: {\n              flex: 1,\n              width: ICON_SIZE,\n              height: ICON_SIZE,\n              right: 20,\n              top: 100,\n              position: \"absolute\",\n              borderRadius: ICON_SIZE,\n              marginBottom: SPACING / 2,\n              zIndex: 1\n            },\n            onPress: function onPress() {\n              navigation.navigate(\"EmergencyPage\");\n            },\n            children: _jsx(Image, {\n              style: {\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                position: \"absolute\",\n                resizeMode: \"cover\",\n                borderRadius: ICON_SIZE,\n                shadowRadius: 20,\n                zIndex: 1\n              },\n              source: require(\"./images/emergency.png\")\n            })\n          })\n        }), _jsx(Agenda, {\n          theme: {\n            calendarBackground: \"white\",\n            agendaKnobColor: \"rgba(28,56,107,0.9)\",\n            backgroundColor: \"rgba(28,56,107,0.9)\",\n            agendaDayTextColor: \"white\",\n            agendaDayNumColor: \"white\",\n            agendaTodayColor: \"rgba(255,255,255,0.9)\",\n            monthTextColor: \"rgba(28,56,107,0.9)\",\n            todayBackgroundColor: \"rgba(28,56,107,0.9)\",\n            textSectionTitleColor: \"rgba(28,56,107,0.9)\",\n            selectedDayBackgroundColor: \"rgba(28,56,107,0.9)\",\n            dayTextColor: \"rgba(28,56,107,0.9)\",\n            dotColor: \"black\"\n          },\n          items: this.state.items,\n          selected: new Date(),\n          renderItem: this.renderItem.bind(this),\n          renderEmptyDate: this.renderEmptyDate.bind(this),\n          rowHasChanged: this.rowHasChanged.bind(this)\n        })]\n      });\n    }\n  }, {\n    key: \"loadFromList\",\n    value: function loadFromList() {\n      var _this2 = this;\n\n      var onReceive = function onReceive(data) {\n        _this2.setState({\n          events: data\n        });\n      };\n\n      eventsData(onReceive);\n      this.state.events.map(function (key, index) {\n        var day = key.start;\n\n        if (!_this2.state.items[day]) {\n          _this2.state.items[day] = [];\n\n          _this2.state.items[day].push({\n            Name: \"Event: \" + key.name,\n            Programme: \"Programme: \" + key.programme,\n            start: \"start day: \" + key.start,\n            end: \"end day: \" + key.end,\n            height: Math.max(50, Math.floor(Math.random() * 150))\n          });\n        }\n\n        var newItems = {};\n        Object.keys(_this2.state.items).forEach(function (key) {\n          newItems[key] = _this2.state.items[key];\n        });\n\n        _this2.setState({\n          items: newItems\n        });\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(item) {\n      return _jsxs(View, {\n        style: [styles.item, {\n          height: 100\n        }],\n        children: [_jsx(Text, {\n          children: item.Name\n        }), _jsx(Text, {\n          children: item.Programme\n        }), _jsx(Text, {\n          children: item.start\n        }), _jsx(Text, {\n          children: item.end\n        })]\n      });\n    }\n  }, {\n    key: \"renderEmptyDate\",\n    value: function renderEmptyDate() {\n      return _jsx(View, {\n        children: _jsx(View, {\n          style: styles.emptyDate,\n          children: _jsx(Text, {\n            children: \"No events on this day!\"\n          })\n        })\n      });\n    }\n  }, {\n    key: \"rowHasChanged\",\n    value: function rowHasChanged(r1, r2) {\n      return r1.name !== r2.name;\n    }\n  }]);\n\n  return EventsCalendar;\n}(React.Component);\n\nexport { EventsCalendar as default };\nvar styles = StyleSheet.create({\n  item: {\n    backgroundColor: \"white\",\n    flex: 1,\n    borderRadius: 5,\n    padding: 10,\n    marginRight: 10,\n    marginTop: 17\n  },\n  emptyDate: {\n    height: 15,\n    flex: 1,\n    paddingTop: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/Screens/EventsCalendar.js"],"names":["Calendar","Agenda","React","useState","Card","Avatar","firebase","db","getCurrentDate","useNavigation","AntDesign","data","Dimensions","get","width","height","SPACING","ICON_SIZE","initialDate","eventsData","onReceiveList","events","firestore","collection","then","querySnapshot","forEach","doc","start","start_date","end","end_date","name","id","programme","key","length","push","snapshot","LogBox","ignoreLogs","EventsCalendar","props","state","items","flex","right","top","position","borderRadius","marginBottom","zIndex","navigation","navigate","resizeMode","shadowRadius","require","calendarBackground","agendaKnobColor","backgroundColor","agendaDayTextColor","agendaDayNumColor","agendaTodayColor","monthTextColor","todayBackgroundColor","textSectionTitleColor","selectedDayBackgroundColor","dayTextColor","dotColor","Date","renderItem","bind","renderEmptyDate","rowHasChanged","onReceive","setState","map","index","day","Name","Programme","Math","max","floor","random","newItems","Object","keys","item","styles","emptyDate","r1","r2","Component","StyleSheet","create","padding","marginRight","marginTop","paddingTop"],"mappings":"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","sourcesContent":["import { Calendar, Agenda } from \"react-native-calendars\"; // 1.5.3\r\nimport React, { useState } from \"react\";\r\nimport { View, StyleSheet, TouchableOpacity, Text, LogBox, TouchableHighlight,Image,  Dimensions, } from \"react-native\";\r\nimport { Card, Avatar } from \"react-native-paper\";\r\nimport { firebase, db } from \"../firebase\";\r\nimport { getCurrentDate } from \"../HelperFunctions\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\nimport { AntDesign } from '@expo/vector-icons';\r\n\r\nconst data=[];\r\nconst { width, height } = Dimensions.get(\"screen\");\r\nconst SPACING = 20;\r\nconst ICON_SIZE = 75;\r\nconst initialDate = getCurrentDate();\r\nasync function eventsData(onReceiveList) {\r\n  const events = [];\r\n  var snapshot = await firebase\r\n    .firestore()\r\n    .collection(\"events\")\r\n    .get()\r\n    .then((querySnapshot) => {\r\n      querySnapshot.forEach(function (doc) {\r\n        let start = doc.data().start_date,\r\n          end = doc.data().end_date,\r\n          name = doc.data().name,\r\n          id = doc.data().id,\r\n          programme = doc.data().programme,\r\n          key = events.length + 1;\r\n        // events.push(JSON.stringify({key, start, end, name, id, programme})); //this is an array of strings\r\n        events.push({\r\n          key: key,\r\n          start: start,\r\n          end: end,\r\n          id: id,\r\n          programme: programme,\r\n          name: name,\r\n        });\r\n      });\r\n    });\r\n\r\n  onReceiveList(events);\r\n}\r\n\r\nLogBox.ignoreLogs([\"Setting a timer\"]);\r\n\r\nexport default class EventsCalendar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      items: {},\r\n      events: [],\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={{flex:1}}>\r\n      <View>\r\n      <TouchableOpacity\r\n          underlayColor=\"rgba(0,0,0,0)\"\r\n          style={{\r\n            flex: 1,\r\n            width: ICON_SIZE,\r\n            height: ICON_SIZE,\r\n            right: 20,\r\n            top: 100,\r\n            position: \"absolute\",\r\n            borderRadius: ICON_SIZE,\r\n            marginBottom:SPACING/2,\r\n            zIndex:1\r\n          }}\r\n          onPress={() => {\r\n            navigation.navigate(\"EmergencyPage\");\r\n          }}\r\n        >\r\n          <Image\r\n            style={{\r\n              width: ICON_SIZE,\r\n              height: ICON_SIZE,\r\n              position: \"absolute\",\r\n              resizeMode: \"cover\",\r\n              borderRadius: ICON_SIZE,\r\n              shadowRadius: 20,\r\n              zIndex:1\r\n            }}\r\n            source={require(\"./images/emergency.png\")}\r\n          />\r\n        </TouchableOpacity>\r\n      </View>\r\n      <Agenda \r\n        theme={{ \r\n          calendarBackground: \"white\", //agenda background\r\n          agendaKnobColor: \"rgba(28,56,107,0.9)\", // knob color\r\n          backgroundColor: \"rgba(28,56,107,0.9)\", // background color below agenda\r\n          agendaDayTextColor: \"white\", // day name\r\n          agendaDayNumColor: \"white\", // day number\r\n          agendaTodayColor: \"rgba(255,255,255,0.9)\", // today in list\r\n          monthTextColor: \"rgba(28,56,107,0.9)\", // name in calendar\r\n          todayBackgroundColor: \"rgba(28,56,107,0.9)\",\r\n          textSectionTitleColor: \"rgba(28,56,107,0.9)\",\r\n          selectedDayBackgroundColor: \"rgba(28,56,107,0.9)\", // calendar sel date\r\n          dayTextColor: \"rgba(28,56,107,0.9)\", // calendar day\r\n          dotColor: \"black\", // dots\r\n        }}\r\n        items={this.state.items}\r\n        selected={new Date()}\r\n        //loadItemsForMonth={data}\r\n        renderItem={this.renderItem.bind(this)}\r\n        renderEmptyDate={this.renderEmptyDate.bind(this)}\r\n        rowHasChanged={this.rowHasChanged.bind(this)}\r\n      />\r\n      </View>\r\n      \r\n    );\r\n  }\r\n\r\n  loadFromList() {\r\n    const onReceive = (data) => {\r\n      this.setState({\r\n        events: data,\r\n      });\r\n    };\r\n    eventsData(onReceive);\r\n    this.state.events.map((key, index) => {\r\n      const day = key.start;\r\n\r\n      if (!this.state.items[day]) {\r\n        this.state.items[day] = [];\r\n        this.state.items[day].push({\r\n          Name: \"Event: \" + key.name,\r\n          Programme: \"Programme: \" + key.programme,\r\n          start: \"start day: \" + key.start,\r\n          end: \"end day: \" + key.end,\r\n          height: Math.max(50, Math.floor(Math.random() * 150)),\r\n        });\r\n      }\r\n      //console.log(this.state.items);\r\n      const newItems = {};\r\n      Object.keys(this.state.items).forEach((key) => {\r\n        newItems[key] = this.state.items[key];\r\n      });\r\n      this.setState({\r\n        items: newItems,\r\n      });\r\n    });\r\n  }\r\n\r\n  renderItem(item) {\r\n    return (\r\n      <View style={[styles.item, { height:100 }]}>\r\n        <Text>{item.Name}</Text>\r\n        <Text>{item.Programme}</Text>\r\n        <Text>{item.start}</Text>\r\n        <Text>{item.end}</Text>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  renderEmptyDate() {\r\n    return (\r\n      <View>\r\n      <View style={styles.emptyDate}>\r\n        <Text>No events on this day!</Text>\r\n      </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  rowHasChanged(r1, r2) {\r\n    return r1.name !== r2.name;\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  item: {\r\n    backgroundColor: \"white\",\r\n    flex: 1,\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginRight: 10,\r\n    marginTop: 17,\r\n  },\r\n  emptyDate: {\r\n    height: 15,\r\n    flex: 1,\r\n    paddingTop: 30,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}