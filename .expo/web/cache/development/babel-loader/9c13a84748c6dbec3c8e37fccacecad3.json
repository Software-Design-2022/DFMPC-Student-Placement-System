{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from \"./TextInputIcon\";\nimport TextInputAffix, { AffixAdornment } from \"./TextInputAffix\";\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from \"../constants\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./enums\";\nexport function getAdornmentConfig(_ref) {\n  var left = _ref.left,\n      right = _ref.right;\n  var adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(function (_ref2) {\n      var side = _ref2.side,\n          adornment = _ref2.adornment;\n\n      if (adornment && React.isValidElement(adornment)) {\n        var type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side: side,\n          type: type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  var adornmentConfig = _ref3.adornmentConfig,\n      leftAffixWidth = _ref3.leftAffixWidth,\n      rightAffixWidth = _ref3.rightAffixWidth,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      _ref3$inputOffset = _ref3.inputOffset,\n      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,\n      mode = _ref3.mode;\n\n  if (adornmentConfig.length) {\n    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {\n      var _ref7;\n\n      var type = _ref4.type,\n          side = _ref4.side;\n      var isLeftSide = side === AdornmentSide.Left;\n      var inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      var paddingKey = \"padding\" + captalize(side);\n      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      var offset = affixWidth + padding;\n      var isAffix = type === AdornmentType.Affix;\n      var marginKey = \"margin\" + captalize(side);\n      return _ref7 = {}, _defineProperty(_ref7, marginKey, isAffix ? 0 : offset), _defineProperty(_ref7, paddingKey, isAffix ? offset : inputOffset), _ref7;\n    });\n    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {\n      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nvar captalize = function captalize(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\nvar TextInputAdornment = function TextInputAdornment(_ref5) {\n  var adornmentConfig = _ref5.adornmentConfig,\n      left = _ref5.left,\n      right = _ref5.right,\n      onAffixChange = _ref5.onAffixChange,\n      textStyle = _ref5.textStyle,\n      visible = _ref5.visible,\n      topPosition = _ref5.topPosition,\n      isTextInputFocused = _ref5.isTextInputFocused,\n      forceFocus = _ref5.forceFocus,\n      paddingHorizontal = _ref5.paddingHorizontal,\n      maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier;\n\n  if (adornmentConfig.length) {\n    return React.createElement(React.Fragment, null, adornmentConfig.map(function (_ref6) {\n      var type = _ref6.type,\n          side = _ref6.side;\n      var inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      var commonProps = {\n        key: side,\n        side: side,\n        testID: side + \"-\" + type + \"-adornment\",\n        isTextInputFocused: isTextInputFocused,\n        paddingHorizontal: paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"mappings":"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","names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","key","testID","icon","affix","onLayout"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}