{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport { white, black } from \"../../styles/colors\";\nimport CardContent from \"./CardContent\";\nimport CardActions from \"./CardActions\";\n\nimport CardCover from \"./CardCover\";\n\nimport CardTitle from \"./CardTitle\";\nimport Surface from \"../Surface\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n    cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n    onLongPress = _ref.onLongPress,\n    onPress = _ref.onPress,\n    _ref$mode = _ref.mode,\n    cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n    children = _ref.children,\n    style = _ref.style,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    accessible = _ref.accessible,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useRef = React.useRef(new Animated.Value(cardElevation)),\n    elevation = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(new Animated.Value(cardElevation)),\n    elevationDarkAdaptive = _React$useRef2.current;\n  var animation = theme.animation,\n    dark = theme.dark,\n    mode = theme.mode,\n    roundness = theme.roundness;\n  var prevDarkRef = React.useRef(dark);\n  React.useEffect(function () {\n    prevDarkRef.current = dark;\n  });\n  var prevDark = prevDarkRef.current;\n  var isAdaptiveMode = mode === 'adaptive';\n  var animationDuration = 150 * animation.scale;\n  React.useEffect(function () {\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n  var runElevationAnimation = function runElevationAnimation(pressType) {\n    var isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n  var handlePressIn = function handlePressIn() {\n    runElevationAnimation('in');\n  };\n  var handlePressOut = function handlePressOut() {\n    runElevationAnimation('out');\n  };\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = color(dark ? white : black).alpha(0.12).rgb().string();\n  var computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  return React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: computedElevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = CardContent;\n\nCard.Actions = CardActions;\n\nCard.Cover = CardCover;\n\nCard.Title = CardTitle;\nvar styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"mappings":"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","names":["React","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","_ref","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","useRef","Animated","Value","current","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","computedElevation","borderRadius","styles","outlined","TouchableWithoutFeedback","delayPressIn","disabled","onPressIn","undefined","onPressOut","View","innerContainer","index","cloneElement","Content","Actions","Cover","Title","StyleSheet","create","flexGrow","flexShrink","borderWidth"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\nexport type Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}