{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar lastSetBadgeCount = 0;\nvar badgeModule = {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getBadgeCountAsync: function getBadgeCountAsync() {\n    return _regeneratorRuntime.async(function getBadgeCountAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", lastSetBadgeCount);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setBadgeCountAsync: function setBadgeCountAsync(badgeCount, options) {\n    var badgin;\n    return _regeneratorRuntime.async(function setBadgeCountAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof window === 'undefined')) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 2:\n            badgin = require('badgin');\n\n            if (badgeCount > 0) {\n              badgin.set(badgeCount, options);\n            } else {\n              badgin.clear();\n            }\n\n            lastSetBadgeCount = badgeCount;\n            return _context2.abrupt(\"return\", true);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};\nexport default badgeModule;","map":{"version":3,"sources":["../src/BadgeModule.web.ts"],"names":[],"mappings":";AAEA,IAAI,iBAAiB,GAAG,CAAxB;AAEA,IAAM,WAAW,GAAgB;EAC/B,WAAW,EAAE,uBAAK,CAAG,CADU;EAE/B,eAAe,EAAE,2BAAK,CAAG,CAFM;EAG/B,kBAAkB,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA,iCACX,iBADW;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAHW;EAM/B,kBAAkB,EAAE,4BAAO,UAAP,EAAmB,OAAnB;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MAGd,OAAO,MAAP,KAAkB,WAHJ;cAAA;cAAA;YAAA;;YAAA,kCAIT,KAJS;;UAAA;YAMZ,MANY,GAMH,OAAO,CAAC,QAAD,CANJ;;YAOlB,IAAI,UAAU,GAAG,CAAjB,EAAoB;cAClB,MAAM,CAAC,GAAP,CAAW,UAAX,EAAuB,OAAvB;YACD,CAFD,MAEO;cACL,MAAM,CAAC,KAAP;YACD;;YACD,iBAAiB,GAAG,UAApB;YAZkB,kCAaX,IAbW;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AANW,CAAjC;AAuBA,eAAe,WAAf","sourcesContent":["import { BadgeModule } from './BadgeModule.types';\n\nlet lastSetBadgeCount = 0;\n\nconst badgeModule: BadgeModule = {\n  addListener: () => {},\n  removeListeners: () => {},\n  getBadgeCountAsync: async () => {\n    return lastSetBadgeCount;\n  },\n  setBadgeCountAsync: async (badgeCount, options) => {\n    // If this module is loaded in SSR (NextJS), we can't modify the badge.\n    // It also can't load the badgin module, that instantly invokes methods on window.\n    if (typeof window === 'undefined') {\n      return false;\n    }\n    const badgin = require('badgin');\n    if (badgeCount > 0) {\n      badgin.set(badgeCount, options);\n    } else {\n      badgin.clear();\n    }\n    lastSetBadgeCount = badgeCount;\n    return true;\n  },\n};\n\nexport default badgeModule;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}