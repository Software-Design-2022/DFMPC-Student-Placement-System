{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, Platform } from 'expo-modules-core';\n\nfunction convertPermissionStatus(status) {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true\n      };\n\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false\n      };\n\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false\n      };\n  }\n}\n\nfunction resolvePermissionAsync(_ref) {\n  var _navigator, _navigator$permission;\n\n  var shouldAsk, _window, _window$Notification, Notification, status, query;\n\n  return _regeneratorRuntime.async(function resolvePermissionAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          shouldAsk = _ref.shouldAsk;\n\n          if (Platform.isDOMAvailable) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\", convertPermissionStatus('denied'));\n\n        case 3:\n          _window = window, _window$Notification = _window.Notification, Notification = _window$Notification === void 0 ? {} : _window$Notification;\n\n          if (!(typeof Notification.requestPermission !== 'undefined')) {\n            _context.next = 13;\n            break;\n          }\n\n          status = Notification.permission;\n\n          if (!shouldAsk) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            var _Notification$request, _Notification$request2;\n\n            var resolved = false;\n\n            function resolveOnce(status) {\n              if (!resolved) {\n                resolved = true;\n                resolve(status);\n              }\n            }\n\n            (_Notification$request = Notification.requestPermission(resolveOnce)) == null ? void 0 : (_Notification$request2 = _Notification$request.then(resolveOnce)) == null ? void 0 : _Notification$request2.catch(reject);\n          }));\n\n        case 9:\n          status = _context.sent;\n\n        case 10:\n          return _context.abrupt(\"return\", convertPermissionStatus(status));\n\n        case 13:\n          if (!(typeof navigator !== 'undefined' && (_navigator = navigator) != null && (_navigator$permission = _navigator.permissions) != null && _navigator$permission.query)) {\n            _context.next = 18;\n            break;\n          }\n\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(navigator.permissions.query({\n            name: 'notifications'\n          }));\n\n        case 16:\n          query = _context.sent;\n          return _context.abrupt(\"return\", convertPermissionStatus(query.state));\n\n        case 18:\n          return _context.abrupt(\"return\", convertPermissionStatus('denied'));\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default {\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {},\n  getPermissionsAsync: function getPermissionsAsync() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", resolvePermissionAsync({\n                shouldAsk: false\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  requestPermissionsAsync: function requestPermissionsAsync(request) {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", resolvePermissionAsync({\n                shouldAsk: true\n              }));\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,gBAAT,EAA2BC,QAA3B,QAA2C,mBAA3C;;AAQA,SAASC,uBAAT,CACEC,MADF,EAC4C;EAE1C,QAAQA,MAAR;IACE,KAAK,SAAL;MACE,OAAO;QACLA,MAAM,EAAEH,gBAAgB,CAACI,OADpB;QAELC,OAAO,EAAE,OAFJ;QAGLC,WAAW,EAAE,KAHR;QAILC,OAAO,EAAE;MAJJ,CAAP;;IAMF,KAAK,QAAL;MACE,OAAO;QACLJ,MAAM,EAAEH,gBAAgB,CAACQ,MADpB;QAELH,OAAO,EAAE,OAFJ;QAGLC,WAAW,EAAE,KAHR;QAILC,OAAO,EAAE;MAJJ,CAAP;;IAMF;MACE,OAAO;QACLJ,MAAM,EAAEH,gBAAgB,CAACS,YADpB;QAELJ,OAAO,EAAE,OAFJ;QAGLC,WAAW,EAAE,IAHR;QAILC,OAAO,EAAE;MAJJ,CAAP;EAhBJ;AAuBD;;AAED,SAAeG,sBAAf;EAAA;;EAAA;;EAAA;IAAA;MAAA;QAAA;UACEC,SADF,QACEA,SADF;;UAAA,IAKOV,QAAQ,CAACW,cALhB;YAAA;YAAA;UAAA;;UAAA,iCAMWV,uBAAuB,CAAC,QAAD,CANlC;;QAAA;UAAA,UASgCW,MAThC,iCASUC,YATV,EASUA,YATV,qCASyB,EATzB;;UAAA,MAUM,OAAOA,YAAY,CAACC,iBAApB,KAA0C,WAVhD;YAAA;YAAA;UAAA;;UAWQZ,MAXR,GAWiBW,YAAY,CAACE,UAX9B;;UAAA,KAYQL,SAZR;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAaqB,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;YAAA;;YAC7C,IAAIC,QAAQ,GAAG,KAAf;;YACA,SAASC,WAAT,CAAqBlB,MAArB,EAAmC;cACjC,IAAI,CAACiB,QAAL,EAAe;gBACbA,QAAQ,GAAG,IAAX;gBACAF,OAAO,CAACf,MAAD,CAAP;cACD;YACF;;YAED,qCAAY,CAACY,iBAAb,CAA+BM,WAA/B,sEAA6CC,IAA7C,CAAkDD,WAAlD,6CAAgEE,KAAhE,CAAsEJ,MAAtE;UACD,CAVc,CAbrB;;QAAA;UAaMhB,MAbN;;QAAA;UAAA,iCAyBWD,uBAAuB,CAACC,MAAD,CAzBlC;;QAAA;UAAA,MA0Ba,OAAOqB,SAAP,KAAqB,WAArB,kBAAoCA,SAApC,sCAAoC,WAAWC,WAA/C,aAAoC,sBAAwBC,KA1BzE;YAAA;YAAA;UAAA;;UAAA;UAAA,iCA4BwBF,SAAS,CAACC,WAAV,CAAsBC,KAAtB,CAA4B;YAAEC,IAAI,EAAE;UAAR,CAA5B,CA5BxB;;QAAA;UA4BUD,KA5BV;UAAA,iCA6BWxB,uBAAuB,CAACwB,KAAK,CAACE,KAAP,CA7BlC;;QAAA;UAAA,iCAgCS1B,uBAAuB,CAAC,QAAD,CAhChC;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAmCA,eAAe;EACb2B,WAAW,EAAE,uBAAK,CAAG,CADR;EAEbC,eAAe,EAAE,2BAAK,CAAG,CAFZ;EAGPC,mBAHO,iCAGY;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,kCAChBrB,sBAAsB,CAAC;gBAAEC,SAAS,EAAE;cAAb,CAAD,CADN;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAExB,CALY;EAMPqB,uBANO,mCAOXC,OAPW,EAOkC;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,kCAEtCvB,sBAAsB,CAAC;gBAAEC,SAAS,EAAE;cAAb,CAAD,CAFgB;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAG9C;AAVY,CAAf","names":["PermissionStatus","Platform","convertPermissionStatus","status","GRANTED","expires","canAskAgain","granted","DENIED","UNDETERMINED","resolvePermissionAsync","shouldAsk","isDOMAvailable","window","Notification","requestPermission","permission","Promise","resolve","reject","resolved","resolveOnce","then","catch","navigator","permissions","query","name","state","addListener","removeListeners","getPermissionsAsync","requestPermissionsAsync","request"],"sourceRoot":"","sources":["../src/NotificationPermissionsModule.ts"],"sourcesContent":["import { PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  NativeNotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport { NotificationPermissionsModule } from './NotificationPermissionsModule.types';\n\nfunction convertPermissionStatus(\n  status?: NotificationPermission | 'prompt'\n): NotificationPermissionsStatus {\n  switch (status) {\n    case 'granted':\n      return {\n        status: PermissionStatus.GRANTED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: true,\n      };\n    case 'denied':\n      return {\n        status: PermissionStatus.DENIED,\n        expires: 'never',\n        canAskAgain: false,\n        granted: false,\n      };\n    default:\n      return {\n        status: PermissionStatus.UNDETERMINED,\n        expires: 'never',\n        canAskAgain: true,\n        granted: false,\n      };\n  }\n}\n\nasync function resolvePermissionAsync({\n  shouldAsk,\n}: {\n  shouldAsk: boolean;\n}): Promise<NotificationPermissionsStatus> {\n  if (!Platform.isDOMAvailable) {\n    return convertPermissionStatus('denied');\n  }\n\n  const { Notification = {} } = window as any;\n  if (typeof Notification.requestPermission !== 'undefined') {\n    let status = Notification.permission;\n    if (shouldAsk) {\n      status = await new Promise((resolve, reject) => {\n        let resolved = false;\n        function resolveOnce(status: string) {\n          if (!resolved) {\n            resolved = true;\n            resolve(status);\n          }\n        }\n        // Some browsers require a callback argument and some return a Promise\n        Notification.requestPermission(resolveOnce)?.then(resolveOnce)?.catch(reject);\n      });\n    }\n    return convertPermissionStatus(status);\n  } else if (typeof navigator !== 'undefined' && navigator?.permissions?.query) {\n    // TODO(Bacon): Support `push` in the future when it's stable.\n    const query = await navigator.permissions.query({ name: 'notifications' });\n    return convertPermissionStatus(query.state);\n  }\n  // Platforms like iOS Safari don't support Notifications so return denied.\n  return convertPermissionStatus('denied');\n}\n\nexport default {\n  addListener: () => {},\n  removeListeners: () => {},\n  async getPermissionsAsync(): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: false });\n  },\n  async requestPermissionsAsync(\n    request: NativeNotificationPermissionsRequest\n  ): Promise<NotificationPermissionsStatus> {\n    return resolvePermissionAsync({ shouldAsk: true });\n  },\n} as NotificationPermissionsModule;\n"]},"metadata":{},"sourceType":"module"}