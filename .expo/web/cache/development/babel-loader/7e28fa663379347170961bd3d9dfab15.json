{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport 'abort-controller/polyfill';\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ServerRegistrationModule from \"./ServerRegistrationModule\";\nimport { addPushTokenListener } from \"./TokenEmitter\";\nimport getDevicePushTokenAsync from \"./getDevicePushTokenAsync\";\nimport { updateDevicePushTokenAsync as updateDevicePushTokenAsyncWithSignal } from \"./utils/updateDevicePushTokenAsync\";\nvar lastAbortController = null;\n\nfunction updatePushTokenAsync(token) {\n  var _lastAbortController;\n\n  return _regeneratorRuntime.async(function updatePushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          (_lastAbortController = lastAbortController) == null ? void 0 : _lastAbortController.abort();\n          lastAbortController = new AbortController();\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(updateDevicePushTokenAsyncWithSignal(lastAbortController.signal, token));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function setAutoServerRegistrationEnabledAsync(enabled) {\n  var _lastAbortController2;\n\n  return _regeneratorRuntime.async(function setAutoServerRegistrationEnabledAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          (_lastAbortController2 = lastAbortController) == null ? void 0 : _lastAbortController2.abort();\n\n          if (ServerRegistrationModule.setRegistrationInfoAsync) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('ServerRegistrationModule', 'setRegistrationInfoAsync');\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(ServerRegistrationModule.setRegistrationInfoAsync(enabled ? JSON.stringify({\n            isEnabled: enabled\n          }) : null));\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function __handlePersistedRegistrationInfoAsync(registrationInfo) {\n  var _registration;\n\n  var registration, latestDevicePushToken;\n  return _regeneratorRuntime.async(function __handlePersistedRegistrationInfoAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (registrationInfo) {\n            _context3.next = 2;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 2:\n          registration = null;\n\n          try {\n            registration = JSON.parse(registrationInfo);\n          } catch (e) {\n            console.warn('[expo-notifications] Error encountered while fetching registration information for auto token updates.', e);\n          }\n\n          if ((_registration = registration) != null && _registration.isEnabled) {\n            _context3.next = 6;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 6:\n          _context3.prev = 6;\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(getDevicePushTokenAsync());\n\n        case 9:\n          latestDevicePushToken = _context3.sent;\n          _context3.next = 12;\n          return _regeneratorRuntime.awrap(updatePushTokenAsync(latestDevicePushToken));\n\n        case 12:\n          _context3.next = 17;\n          break;\n\n        case 14:\n          _context3.prev = 14;\n          _context3.t0 = _context3[\"catch\"](6);\n          console.warn('[expo-notifications] Error encountered while updating server registration with latest device push token.', _context3.t0);\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[6, 14]], Promise);\n}\n\nif (ServerRegistrationModule.getRegistrationInfoAsync) {\n  addPushTokenListener(function _callee(token) {\n    var registrationInfo, registration;\n    return _regeneratorRuntime.async(function _callee$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(ServerRegistrationModule.getRegistrationInfoAsync());\n\n          case 3:\n            registrationInfo = _context4.sent;\n\n            if (registrationInfo) {\n              _context4.next = 6;\n              break;\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 6:\n            registration = JSON.parse(registrationInfo);\n\n            if (!(registration != null && registration.isEnabled)) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.next = 10;\n            return _regeneratorRuntime.awrap(updatePushTokenAsync(token));\n\n          case 10:\n            _context4.next = 15;\n            break;\n\n          case 12:\n            _context4.prev = 12;\n            _context4.t0 = _context4[\"catch\"](0);\n            console.warn('[expo-notifications] Error encountered while updating server registration with latest device push token.', _context4.t0);\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  });\n  ServerRegistrationModule.getRegistrationInfoAsync().then(__handlePersistedRegistrationInfoAsync);\n} else {\n  console.warn(\"[expo-notifications] Error encountered while fetching auto-registration state, new tokens will not be automatically registered on server.\", new UnavailabilityError('ServerRegistrationModule', 'getRegistrationInfoAsync'));\n}","map":{"version":3,"sources":["../src/DevicePushTokenAutoRegistration.fx.ts"],"names":[],"mappings":";AAAA,OAAO,2BAAP;AACA,SAAS,mBAAT,QAAoC,mBAApC;AAEA,OAAO,wBAAP;AACA,SAAS,oBAAT;AAEA,OAAO,uBAAP;AACA,SAAS,0BAA0B,IAAI,oCAAvC;AAEA,IAAI,mBAAmB,GAA2B,IAAlD;;AACA,SAAe,oBAAf,CAAoC,KAApC;EAAA;;EAAA;IAAA;MAAA;QAAA;UAEE,wBAAA,mBAAmB,SAAnB,iCAAqB,KAArB;UACA,mBAAmB,GAAG,IAAI,eAAJ,EAAtB;UAHF;UAAA,iCAIe,oCAAoC,CAAC,mBAAmB,CAAC,MAArB,EAA6B,KAA7B,CAJnD;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAmBA,OAAO,SAAe,qCAAf,CAAqD,OAArD;EAAA;;EAAA;IAAA;MAAA;QAAA;UAGL,yBAAA,mBAAmB,SAAnB,kCAAqB,KAArB;;UAHK,IAKA,wBAAwB,CAAC,wBALzB;YAAA;YAAA;UAAA;;UAAA,MAMG,IAAI,mBAAJ,CAAwB,0BAAxB,EAAoD,0BAApD,CANH;;QAAA;UAAA;UAAA,iCASC,wBAAwB,CAAC,wBAAzB,CACJ,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe;YAAE,SAAS,EAAE;UAAb,CAAf,CAAH,GAA4C,IAD/C,CATD;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAiBP,OAAO,SAAe,sCAAf,CACL,gBADK;EAAA;;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IAGA,gBAHA;YAAA;YAAA;UAAA;;UAAA;;QAAA;UAQD,YARC,GAQkD,IARlD;;UASL,IAAI;YACF,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,gBAAX,CAAf;UACD,CAFD,CAEE,OAAO,CAAP,EAAU;YACV,OAAO,CAAC,IAAR,CACE,wGADF,EAEE,CAFF;UAID;;UAhBI,qBAkBA,YAlBA,aAkBA,cAAc,SAlBd;YAAA;YAAA;UAAA;;UAAA;;QAAA;UAAA;UAAA;UAAA,iCA0BiC,uBAAuB,EA1BxD;;QAAA;UA0BG,qBA1BH;UAAA;UAAA,iCA2BG,oBAAoB,CAAC,qBAAD,CA3BvB;;QAAA;UAAA;UAAA;;QAAA;UAAA;UAAA;UA6BH,OAAO,CAAC,IAAR,CACE,0GADF;;QA7BG;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;;AAoCP,IAAI,wBAAwB,CAAC,wBAA7B,EAAuD;EAGrD,oBAAoB,CAAC,iBAAO,KAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,iCAKc,wBAAwB,CAAC,wBAAzB,EALd;;UAAA;YAKX,gBALW;;YAAA,IAOZ,gBAPY;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAYX,YAZW,GAYwC,IAAI,CAAC,KAAL,CAAW,gBAAX,CAZxC;;YAAA,MAab,YAba,YAab,YAAY,CAAE,SAbD;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAgBT,oBAAoB,CAAC,KAAD,CAhBX;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAmBjB,OAAO,CAAC,IAAR,CACE,0GADF;;UAnBiB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,CAApB;EA6BA,wBAAwB,CAAC,wBAAzB,GAAoD,IAApD,CAAyD,sCAAzD;AACD,CAjCD,MAiCO;EACL,OAAO,CAAC,IAAR,8IAEE,IAAI,mBAAJ,CAAwB,0BAAxB,EAAoD,0BAApD,CAFF;AAID","sourcesContent":["import 'abort-controller/polyfill';\nimport { UnavailabilityError } from 'expo-modules-core';\n\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { addPushTokenListener } from './TokenEmitter';\nimport { DevicePushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\nimport { updateDevicePushTokenAsync as updateDevicePushTokenAsyncWithSignal } from './utils/updateDevicePushTokenAsync';\n\nlet lastAbortController: AbortController | null = null;\nasync function updatePushTokenAsync(token: DevicePushToken) {\n  // Abort current update process\n  lastAbortController?.abort();\n  lastAbortController = new AbortController();\n  return await updateDevicePushTokenAsyncWithSignal(lastAbortController.signal, token);\n}\n\n/**\n * Encapsulates device server registration data\n */\nexport type DevicePushTokenRegistration = {\n  isEnabled: boolean;\n};\n\n/**\n * Sets the registration information so that the device push token gets pushed\n * to the given registration endpoint\n * @param registration Registration endpoint to inform of new tokens\n */\nexport async function setAutoServerRegistrationEnabledAsync(enabled: boolean) {\n  // We are overwriting registration, so we shouldn't let\n  // any pending request complete.\n  lastAbortController?.abort();\n\n  if (!ServerRegistrationModule.setRegistrationInfoAsync) {\n    throw new UnavailabilityError('ServerRegistrationModule', 'setRegistrationInfoAsync');\n  }\n\n  await ServerRegistrationModule.setRegistrationInfoAsync(\n    enabled ? JSON.stringify({ isEnabled: enabled }) : null\n  );\n}\n\n/**\n * This function is exported only for testing purposes.\n */\nexport async function __handlePersistedRegistrationInfoAsync(\n  registrationInfo: string | null | undefined\n) {\n  if (!registrationInfo) {\n    // No registration info, nothing to do\n    return;\n  }\n\n  let registration: DevicePushTokenRegistration | null = null;\n  try {\n    registration = JSON.parse(registrationInfo);\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while fetching registration information for auto token updates.',\n      e\n    );\n  }\n\n  if (!registration?.isEnabled) {\n    // Registration is invalid or not enabled, nothing more to do\n    return;\n  }\n\n  try {\n    // Since the registration is enabled, fetching a \"new\" device token\n    // shouldn't be a problem.\n    const latestDevicePushToken = await getDevicePushTokenAsync();\n    await updatePushTokenAsync(latestDevicePushToken);\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Error encountered while updating server registration with latest device push token.',\n      e\n    );\n  }\n}\n\nif (ServerRegistrationModule.getRegistrationInfoAsync) {\n  // A global scope (to get all the updates) device push token\n  // subscription, never cleared.\n  addPushTokenListener(async (token) => {\n    try {\n      // Before updating the push token on server we always check if we should\n      // Since modules can't change their method availability while running, we\n      // can assert it's defined.\n      const registrationInfo = await ServerRegistrationModule.getRegistrationInfoAsync!();\n\n      if (!registrationInfo) {\n        // Registration is not enabled\n        return;\n      }\n\n      const registration: DevicePushTokenRegistration | null = JSON.parse(registrationInfo);\n      if (registration?.isEnabled) {\n        // Dispatch an abortable task to update\n        // registration with new token.\n        await updatePushTokenAsync(token);\n      }\n    } catch (e) {\n      console.warn(\n        '[expo-notifications] Error encountered while updating server registration with latest device push token.',\n        e\n      );\n    }\n  });\n\n  // Verify if persisted registration\n  // has successfully uploaded last known\n  // device push token. If not, retry.\n  ServerRegistrationModule.getRegistrationInfoAsync().then(__handlePersistedRegistrationInfoAsync);\n} else {\n  console.warn(\n    `[expo-notifications] Error encountered while fetching auto-registration state, new tokens will not be automatically registered on server.`,\n    new UnavailabilityError('ServerRegistrationModule', 'getRegistrationInfoAsync')\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}