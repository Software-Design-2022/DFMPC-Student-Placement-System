{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"label\", \"size\", \"style\", \"theme\", \"labelStyle\", \"color\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\nimport getContrastingColor from \"../../utils/getContrastingColor\";\nvar defaultSize = 64;\n\nvar AvatarText = function AvatarText(_ref) {\n  var label = _ref.label,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? defaultSize : _ref$size,\n      style = _ref.style,\n      theme = _ref.theme,\n      labelStyle = _ref.labelStyle,\n      customColor = _ref.color,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _ref2 = StyleSheet.flatten(style) || {},\n      _ref2$backgroundColor = _ref2.backgroundColor,\n      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref2, _excluded2);\n\n  var textColor = customColor !== null && customColor !== void 0 ? customColor : getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n  return React.createElement(View, _extends({\n    style: [{\n      width: size,\n      height: size,\n      borderRadius: size / 2,\n      backgroundColor: backgroundColor\n    }, styles.container, restStyle]\n  }, rest), React.createElement(Text, {\n    style: [styles.text, {\n      color: textColor,\n      fontSize: size / 2,\n      lineHeight: size\n    }, labelStyle],\n    numberOfLines: 1\n  }, label));\n};\n\nAvatarText.displayName = 'Avatar.Text';\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withTheme(AvatarText);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAQA,OAAOC,IAAP;AACA,SAASC,SAAT;AACA,SAASC,KAAT;AACA,OAAOC,mBAAP;AAEA,IAAMC,WAAW,GAAG,EAApB;;AAgDA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAQN;EAAA,IAPXC,KAOW,QAPXA,KAOW;EAAA,qBANXC,IAMW;EAAA,IANXA,IAMW,0BANJH,WAMI;EAAA,IALXI,KAKW,QALXA,KAKW;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,UAGW,QAHXA,UAGW;EAAA,IAFJC,WAEI,QAFXC,KAEW;EAAA,IADRC,IACQ;;EACX,YACEC,UAAU,CAACC,OAAXD,CAAmBN,KAAnBM,KAA6B,EAD/B;EAAA,kCAAQE,eAAR;EAAA,IAAQA,eAAR,sCAA0BP,KAAK,CAACQ,MAANR,CAAaS,OAAvC;EAAA,IAAmDC,SAAnD;;EAEA,IAAMC,SAAS,GACbT,WADa,SACbA,eADa,WACbA,iBACAR,mBAAmB,CAACa,eAAD,EAAkBd,KAAlB,EAAyB,oBAAzB,CAFrB;EAIA,OACEH,oBAACsB,IAAD;IACEb,KAAK,EAAE,CACL;MACEc,KAAK,EAAEf,IADT;MAEEgB,MAAM,EAAEhB,IAFV;MAGEiB,YAAY,EAAEjB,IAAI,GAAG,CAHvB;MAIES;IAJF,CADK,EAOLS,MAAM,CAACC,SAPF,EAQLP,SARK;EADT,GAWMN,IAXN,GAaEd,oBAACC,IAAD;IACEQ,KAAK,EAAE,CACLiB,MAAM,CAACE,IADF,EAEL;MACEf,KAAK,EAAEQ,SADT;MAEEQ,QAAQ,EAAErB,IAAI,GAAG,CAFnB;MAGEsB,UAAU,EAAEtB;IAHd,CAFK,EAOLG,UAPK,CADT;IAUEoB,aAAa,EAAE;EAVjB,GAYGxB,KAZH,CAbF,CADF;AAfF;;AA+CAD,UAAU,CAAC0B,WAAX1B,GAAyB,aAAzBA;AAEA,IAAMoB,MAAM,GAAGX,UAAU,CAACkB,MAAXlB,CAAkB;EAC/BY,SAAS,EAAE;IACTO,cAAc,EAAE,QADP;IAETC,UAAU,EAAE;EAFH,CADoB;EAK/BP,IAAI,EAAE;IACJQ,SAAS,EAAE,QADP;IAEJC,iBAAiB,EAAE;EAFf;AALyB,CAAlBtB,CAAf;AAWA,eAAeb,SAAS,CAACI,UAAD,CAAxB","names":["React","Text","withTheme","white","getContrastingColor","defaultSize","AvatarText","label","size","style","theme","labelStyle","customColor","color","rest","StyleSheet","flatten","backgroundColor","colors","primary","restStyle","textColor","View","width","height","borderRadius","styles","container","text","fontSize","lineHeight","numberOfLines","displayName","create","justifyContent","alignItems","textAlign","textAlignVertical"],"sources":["AvatarText.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport getContrastingColor from '../../utils/getContrastingColor';\n\nconst defaultSize = 64;\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Style for text container\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the title.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nconst AvatarText = ({\n  label,\n  size = defaultSize,\n  style,\n  theme,\n  labelStyle,\n  color: customColor,\n  ...rest\n}: Props) => {\n  const { backgroundColor = theme.colors.primary, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor =\n    customColor ??\n    getContrastingColor(backgroundColor, white, 'rgba(0, 0, 0, .54)');\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      <Text\n        style={[\n          styles.text,\n          {\n            color: textColor,\n            fontSize: size / 2,\n            lineHeight: size,\n          },\n          labelStyle,\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </Text>\n    </View>\n  );\n};\n\nAvatarText.displayName = 'Avatar.Text';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"module"}