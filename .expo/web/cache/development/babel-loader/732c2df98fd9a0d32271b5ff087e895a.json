{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"descriptionNumberOfLines\", \"titleEllipsizeMode\", \"descriptionEllipsizeMode\", \"descriptionStyle\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListItem = function ListItem(_ref) {\n  var left = _ref.left,\n      right = _ref.right,\n      title = _ref.title,\n      description = _ref.description,\n      onPress = _ref.onPress,\n      theme = _ref.theme,\n      style = _ref.style,\n      titleStyle = _ref.titleStyle,\n      _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n      _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n      descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n      titleEllipsizeMode = _ref.titleEllipsizeMode,\n      descriptionEllipsizeMode = _ref.descriptionEllipsizeMode,\n      descriptionStyle = _ref.descriptionStyle,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var renderDescription = function renderDescription(descriptionColor, description) {\n    return typeof description === 'function' ? description({\n      selectable: false,\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : React.createElement(Text, {\n      selectable: false,\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle]\n    }, description);\n  };\n\n  var renderTitle = function renderTitle() {\n    var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    return typeof title === 'function' ? title({\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      color: titleColor,\n      fontSize: styles.title.fontSize\n    }) : React.createElement(Text, {\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      numberOfLines: titleNumberOfLines,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title);\n  };\n\n  var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    style: [styles.container, style],\n    onPress: onPress\n  }), React.createElement(View, {\n    style: styles.row\n  }, left ? left({\n    color: descriptionColor,\n    style: description ? styles.iconMarginLeft : _objectSpread(_objectSpread({}, styles.iconMarginLeft), styles.marginVerticalNone)\n  }) : null, React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, renderTitle(), description ? renderDescription(descriptionColor, description) : null), right ? right({\n    color: descriptionColor,\n    style: description ? styles.iconMarginRight : _objectSpread(_objectSpread({}, styles.iconMarginRight), styles.marginVerticalNone)\n  }) : null));\n};\n\nListItem.displayName = 'List.Item';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"mappings":"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","names":["color","React","TouchableRipple","Text","withTheme","ListItem","left","right","title","description","onPress","theme","style","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","renderDescription","descriptionColor","selectable","ellipsizeMode","fontSize","styles","numberOfLines","renderTitle","titleColor","colors","text","alpha","rgb","string","container","View","row","iconMarginLeft","marginVerticalNone","item","content","iconMarginRight","displayName","StyleSheet","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"sources":["ListItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Title =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: Title;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const renderTitle = () => {\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n\n    return typeof title === 'function' ? (\n      title({\n        selectable: false,\n        ellipsizeMode: titleEllipsizeMode,\n        color: titleColor,\n        fontSize: styles.title.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        ellipsizeMode={titleEllipsizeMode}\n        numberOfLines={titleNumberOfLines}\n        style={[styles.title, { color: titleColor }, titleStyle]}\n      >\n        {title}\n      </Text>\n    );\n  };\n\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          {renderTitle()}\n\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}