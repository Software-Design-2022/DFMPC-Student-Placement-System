{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { firebase } from \"../firebase\";\nimport { v4 as uuidv4 } from 'uuid';\nexport function getSchedule(onReceiveList) {\n  var schedules, snapshot;\n  return _regeneratorRuntime.async(function getSchedule$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          schedules = [];\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection(\"schedules\").where(\"student_id\", \"==\", authUserID).get().then(function (querySnapshot) {\n            querySnapshot.forEach(function (doc) {\n              schedules.push({\n                key: schedules.length + 1,\n                student_id: doc.data().student_id,\n                SpecialtyName: doc.data().SpecialtyName,\n                hospital_ID: doc.data().hospital_id,\n                specialty_duration: doc.data().specialty_duration,\n                start_date: doc.data().start_date,\n                end_date: doc.data().end_date,\n                specialty_id: doc.data().specialty_id\n              });\n            });\n          }));\n        case 3:\n          snapshot = _context.sent;\n          onReceiveList(schedules);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["firebase","v4","uuidv4","getSchedule","onReceiveList","schedules","firestore","collection","where","authUserID","get","then","querySnapshot","forEach","doc","push","key","length","student_id","data","SpecialtyName","hospital_ID","hospital_id","specialty_duration","start_date","end_date","specialty_id","snapshot"],"sources":["D:/repos/DFMPC-Student-Placement-System/Screens/RetrieveSchedules.js"],"sourcesContent":["\r\nimport {firebase} from \"../firebase\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n\r\n\r\nexport async function getSchedule(onReceiveList) {\r\n    var schedules = [];\r\n    var snapshot = await firebase\r\n    .firestore()\r\n    .collection(\"schedules\")\r\n    .where(\"student_id\", \"==\", authUserID) //@Noku - this is where we are filtering the data to be specific to the student logged in\r\n    .get()\r\n    .then((querySnapshot) => {\r\n        querySnapshot.forEach(function (doc) {\r\n        //push the required data to the array\r\n            schedules.push({\r\n                key: schedules.length + 1,\r\n                student_id: doc.data().student_id,\r\n                SpecialtyName: doc.data().SpecialtyName,\r\n                hospital_ID: doc.data().hospital_id,\r\n                specialty_duration: doc.data().specialty_duration,\r\n                start_date: doc.data().start_date,\r\n                end_date: doc.data().end_date,\r\n                specialty_id: doc.data().specialty_id,\r\n            });\r\n    \r\n        });\r\n    });\r\n    \r\n   onReceiveList(schedules);\r\n}\r\n"],"mappings":";AACA,SAAQA,QAAQ;AAChB,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAMnC,OAAO,SAAeC,WAAW,CAACC,aAAa;EAAA;EAAA;IAAA;MAAA;QAAA;UACvCC,SAAS,GAAG,EAAE;UAAA;UAAA,iCACGL,QAAQ,CAC5BM,SAAS,EAAE,CACXC,UAAU,CAAC,WAAW,CAAC,CACvBC,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEC,UAAU,CAAC,CACrCC,GAAG,EAAE,CACLC,IAAI,CAAC,UAACC,aAAa,EAAK;YACrBA,aAAa,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;cAEjCT,SAAS,CAACU,IAAI,CAAC;gBACXC,GAAG,EAAEX,SAAS,CAACY,MAAM,GAAG,CAAC;gBACzBC,UAAU,EAAEJ,GAAG,CAACK,IAAI,EAAE,CAACD,UAAU;gBACjCE,aAAa,EAAEN,GAAG,CAACK,IAAI,EAAE,CAACC,aAAa;gBACvCC,WAAW,EAAEP,GAAG,CAACK,IAAI,EAAE,CAACG,WAAW;gBACnCC,kBAAkB,EAAET,GAAG,CAACK,IAAI,EAAE,CAACI,kBAAkB;gBACjDC,UAAU,EAAEV,GAAG,CAACK,IAAI,EAAE,CAACK,UAAU;gBACjCC,QAAQ,EAAEX,GAAG,CAACK,IAAI,EAAE,CAACM,QAAQ;gBAC7BC,YAAY,EAAEZ,GAAG,CAACK,IAAI,EAAE,CAACO;cAC7B,CAAC,CAAC;YAEN,CAAC,CAAC;UACN,CAAC,CAAC;QAAA;UApBEC,QAAQ;UAsBbvB,aAAa,CAACC,SAAS,CAAC;QAAC;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}