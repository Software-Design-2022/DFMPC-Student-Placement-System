{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { getList } from \"./ListApi\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { createTopBar } from \"../HelperFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar EmergencyProtocols = function EmergencyProtocols() {\n  var navigation = useNavigation();\n\n  var _useState = useState({\n    protocolList: [{\n      key: 0,\n      Protocol: \"\",\n      content: [\"\"]\n    }]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onReceive = function onReceive(protocolList) {\n    setState(function (prevState) {\n      return {\n        protocolList: prevState.protocolList = protocolList\n      };\n    });\n  };\n\n  getList(onReceive);\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var toggle = function toggle(i) {\n    if (selected == i) {\n      return setSelected(null);\n    }\n\n    setSelected(i);\n  };\n\n  LogBox.ignoreLogs([\"Setting a timer\"]);\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [createTopBar(10, navigation), _jsx(View, {\n      style: {\n        position: \"absolute\"\n      },\n      children: _jsx(Image, {\n        resizeMode: \"contain\",\n        source: require(\"./images/background.png\"),\n        blurRadius: 0\n      })\n    }), _jsx(View, {\n      style: styles.container,\n      children: _jsx(ScrollView, {\n        style: styles.container,\n        children: state.protocolList.map(function (item, key) {\n          return _jsxs(View, {\n            children: [_jsxs(TouchableOpacity, {\n              onPress: function onPress() {\n                return toggle(key);\n              },\n              style: selected === key ? styles.itemshow : styles.item,\n              children: [_jsx(Text, {\n                style: selected === key ? styles.toggleshow : styles.togglehide,\n                children: selected === key ? \"-\" : \"+\"\n              }), _jsxs(Text, {\n                style: selected === key ? styles.itemTextshow : styles.itemText,\n                children: [item.Protocol, \" \"]\n              })]\n            }), _jsx(View, {\n              style: selected === key ? styles.content_show : styles.contentHide,\n              children: item.content.map(function (data, key) {\n                return _jsx(View, {\n                  style: styles.inneritem,\n                  children: _jsx(Text, {\n                    style: styles.inneritemText,\n                    children: data\n                  })\n                }, data);\n              })\n            })]\n          }, item.Protocol);\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    marginTop: 30,\n    marginBottom: 20,\n    marginRight: 5,\n    marginLeft: 5,\n    flex: 1,\n    textAlign: \"center\"\n  },\n  header: {\n    flexDirection: \"row\",\n    padding: 10\n  },\n  item: {\n    flexDirection: \"row\",\n    borderRadius: 5,\n    backgroundColor: \"rgba(255,255,255,1)\",\n    padding: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 0,\n    marginLeft: 0,\n    borderWidth: 2,\n    borderColor: \"rgba(192,192,192,0.7)\",\n    width: width\n  },\n  itemshow: {\n    flexDirection: \"row\",\n    borderRadius: 5,\n    backgroundColor: \"rgba(255, 255, 255,0.9)\",\n    padding: 10,\n    marginTop: 10,\n    marginBottom: 10,\n    marginRight: 2,\n    marginLeft: 2,\n    borderWidth: 2,\n    borderColor: \"rgba(255,255,255,0.7)\"\n  },\n  itemText: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"black\"\n  },\n  toggleshow: {\n    start: 0,\n    marginRight: 10,\n    fontSize: 18,\n    fontWeight: \"500\",\n    color: \"rgb(192, 50, 33)\"\n  },\n  togglehide: {\n    start: 0,\n    marginRight: 10,\n    fontSize: 18,\n    fontWeight: \"500\",\n    color: \"rgb(241, 80, 37)\"\n  },\n  itemTextshow: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"rgb(0, 0, 0)\",\n    textAlign: \"center\"\n  },\n  inneritem: {\n    borderRadius: 5,\n    backgroundColor: \"rgba(255, 255, 255,1)\",\n    padding: 10,\n    margin: 2,\n    borderWidth: 2,\n    borderColor: \"rgba(0,0,0,0.1)\"\n  },\n  inneritemText: {\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"black\"\n  },\n  contentHide: {\n    color: \"black\",\n    backgroundColor: \"rgb(216, 212, 213)\",\n    overflow: \"hidden\",\n    maxHeight: 0\n  },\n  content_show: {\n    backgroundColor: \"rgba(221, 240, 255,0.7)\",\n    color: \"black\",\n    marginBottom: 10,\n    marginTop: 10,\n    padding: 10,\n    opacity: 1,\n    maxHeight: 9999\n  }\n});\nexport default EmergencyProtocols;","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/Screens/EmergencyProtocols.js"],"names":["React","useState","getList","useNavigation","createTopBar","Dimensions","get","width","height","EmergencyProtocols","navigation","protocolList","key","Protocol","content","state","setState","onReceive","prevState","selected","setSelected","toggle","i","LogBox","ignoreLogs","flex","position","require","styles","container","map","item","itemshow","toggleshow","togglehide","itemTextshow","itemText","content_show","contentHide","data","inneritem","inneritemText","StyleSheet","create","marginTop","marginBottom","marginRight","marginLeft","textAlign","header","flexDirection","padding","borderRadius","backgroundColor","borderWidth","borderColor","fontSize","fontWeight","color","start","margin","overflow","maxHeight","opacity"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  SafeAreaView,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  ScrollView,\r\n  LogBox,\r\n  Image,\r\n  Dimensions,\r\n} from \"react-native\";\r\nimport { getList } from \"./ListApi\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\nimport { createTopBar } from \"../HelperFunctions\";\r\nconst { width, height } = Dimensions.get(\"screen\");\r\nconst EmergencyProtocols = () => {\r\n  const navigation = useNavigation();\r\n  // this useState will be used to set the current state of our data\r\n  // sets protocolList to the dat from database (firestore)\r\n  const [state, setState] = useState({\r\n    protocolList: [\r\n      {\r\n        key: 0,\r\n        Protocol: \"\",\r\n        content: [\"\"],\r\n      },\r\n    ],\r\n  });\r\n\r\n  const onReceive = (protocolList) => {\r\n    // when the list is received we set our protocolLIst to the current received list (updating)\r\n    setState((prevState) => ({\r\n      protocolList: (prevState.protocolList = protocolList),\r\n    }));\r\n  };\r\n  // getList is a function from LIstApi.js\r\n  // it gets the list containing data from firestore\r\n  getList(onReceive);\r\n\r\n  // this will allow the app to know which on the Views containg the data is clicked\r\n  // we need to keep track of what is currently selected\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  const toggle = (i) => {\r\n    if (selected == i) {\r\n      return setSelected(null);\r\n    }\r\n    setSelected(i);\r\n  };\r\n\r\n  LogBox.ignoreLogs([\"Setting a timer\"]);\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      {createTopBar(10, navigation)}\r\n      <View style={{ position: \"absolute\" }}>\r\n        <Image\r\n          resizeMode=\"contain\"\r\n          source={require(\"./images/background.png\")}\r\n          blurRadius={0}\r\n        />\r\n      </View>\r\n      <View style={styles.container}>\r\n        <ScrollView style={styles.container}>\r\n          {\r\n            // map is Calls a defined callback function on each element of an array,\r\n            //and returns an array that contains the results.\r\n            // with the {+,-} we toggle between the two depending on which one is currently selected\r\n            state.protocolList.map((item, key) => (\r\n              <View key={item.Protocol}>\r\n                <TouchableOpacity\r\n                  onPress={() => toggle(key)}\r\n                  style={selected === key ? styles.itemshow : styles.item}\r\n                >\r\n                  <Text\r\n                    style={\r\n                      selected === key ? styles.toggleshow : styles.togglehide\r\n                    }\r\n                  >\r\n                    {selected === key ? \"-\" : \"+\"}\r\n                  </Text>\r\n                  <Text\r\n                    style={\r\n                      selected === key ? styles.itemTextshow : styles.itemText\r\n                    }\r\n                  >\r\n                    {item.Protocol}{\" \"}\r\n                  </Text>\r\n                </TouchableOpacity>\r\n                <View\r\n                  style={\r\n                    selected === key ? styles.content_show : styles.contentHide\r\n                  }\r\n                >\r\n                  {item.content.map((data, key) => (\r\n                    <View style={styles.inneritem} key={data}>\r\n                      <Text style={styles.inneritemText}>{data}</Text>\r\n                    </View>\r\n                  ))}\r\n                </View>\r\n              </View>\r\n            ))\r\n          }\r\n        </ScrollView>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 30,\r\n    marginBottom: 20,\r\n    marginRight: 5,\r\n    marginLeft: 5,\r\n    flex: 1,\r\n    textAlign: \"center\",\r\n  },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    padding: 10,\r\n  },\r\n  item: {\r\n    flexDirection: \"row\",\r\n    borderRadius: 5,\r\n    backgroundColor: \"rgba(255,255,255,1)\",\r\n    padding: 10,\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    marginRight: 0,\r\n    marginLeft: 0,\r\n    borderWidth: 2,\r\n    borderColor: \"rgba(192,192,192,0.7)\",\r\n    width: width,\r\n  },\r\n  itemshow: {\r\n    flexDirection: \"row\",\r\n    borderRadius: 5,\r\n    backgroundColor: \"rgba(255, 255, 255,0.9)\",\r\n    padding: 10,\r\n\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    marginRight: 2,\r\n    marginLeft: 2,\r\n    borderWidth: 2,\r\n    borderColor: \"rgba(255,255,255,0.7)\",\r\n  },\r\n  itemText: {\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n    color: \"black\",\r\n  },\r\n\r\n  toggleshow: {\r\n    start: 0,\r\n    marginRight: 10,\r\n    fontSize: 18,\r\n    fontWeight: \"500\",\r\n    color: \"rgb(192, 50, 33)\",\r\n  },\r\n  togglehide: {\r\n    start: 0,\r\n    marginRight: 10,\r\n    fontSize: 18,\r\n    fontWeight: \"500\",\r\n    color: \"rgb(241, 80, 37)\",\r\n  },\r\n\r\n  itemTextshow: {\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n    color: \"rgb(0, 0, 0)\",\r\n    textAlign: \"center\",\r\n  },\r\n  inneritem: {\r\n    borderRadius: 5,\r\n    backgroundColor: \"rgba(255, 255, 255,1)\",\r\n    padding: 10,\r\n    margin: 2,\r\n    borderWidth: 2,\r\n    borderColor: \"rgba(0,0,0,0.1)\",\r\n  },\r\n  inneritemText: {\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n    color: \"black\",\r\n  },\r\n  contentHide: {\r\n    color: \"black\",\r\n    backgroundColor: \"rgb(216, 212, 213)\",\r\n    overflow: \"hidden\",\r\n    maxHeight: 0,\r\n  },\r\n  content_show: {\r\n    backgroundColor: \"rgba(221, 240, 255,0.7)\",\r\n    color: \"black\",\r\n    marginBottom: 10,\r\n    marginTop: 10,\r\n    padding: 10,\r\n    opacity: 1,\r\n    maxHeight: 9999,\r\n  },\r\n});\r\nexport default EmergencyProtocols;\r\n"]},"metadata":{},"sourceType":"module"}