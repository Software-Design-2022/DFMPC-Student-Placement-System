{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\n\nvar LabelBackground = function LabelBackground(_ref) {\n  var parentState = _ref.parentState,\n      _ref$labelProps = _ref.labelProps,\n      placeholderStyle = _ref$labelProps.placeholderStyle,\n      baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,\n      topPosition = _ref$labelProps.topPosition,\n      hasActiveOutline = _ref$labelProps.hasActiveOutline,\n      label = _ref$labelProps.label,\n      backgroundColor = _ref$labelProps.backgroundColor,\n      roundness = _ref$labelProps.roundness,\n      labelStyle = _ref.labelStyle,\n      maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  var hasFocus = hasActiveOutline || parentState.value;\n  var opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [-baseLabelTranslateX, 0]\n      })\n    }]\n  };\n  return label ? [React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      maxHeight: Math.max(roundness / 3, 2),\n      opacity: opacity,\n      bottom: Math.max(roundness, 2)\n    }, labelTranslationX]\n  }), React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {\n      top: topPosition + 1,\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      transform: [].concat(_toConsumableArray(labelStyle.transform), [{\n        scaleY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.2, 1]\n        })\n      }]),\n      maxWidth: parentState.labelLayout.width - 2 * placeholderStyle.paddingHorizontal\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)] : null;\n};\n\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","AnimatedText","LabelBackground","parentState","labelProps","placeholderStyle","baseLabelTranslateX","topPosition","hasActiveOutline","label","backgroundColor","roundness","labelStyle","maxFontSizeMultiplier","hasFocus","value","opacity","labeled","interpolate","inputRange","outputRange","labelTranslationX","transform","translateX","Animated","View","key","pointerEvents","style","StyleSheet","absoluteFill","styles","view","maxHeight","Math","max","bottom","outlinedLabel","top","scaleY","maxWidth","labelLayout","width","paddingHorizontal","numberOfLines","create","position","left","color"],"sources":["LabelBackground.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\n\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n    roundness,\n  },\n  labelStyle,\n  maxFontSizeMultiplier,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n\n  const labelTranslationX = {\n    transform: [\n      {\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-baseLabelTranslateX, 0],\n        }),\n      },\n    ],\n  };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              maxHeight: Math.max(roundness / 3, 2),\n              opacity,\n              bottom: Math.max(roundness, 2),\n            },\n            labelTranslationX,\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            {\n              top: topPosition + 1,\n              backgroundColor,\n              opacity,\n              transform: [\n                ...labelStyle.transform,\n                {\n                  scaleY: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0.2, 1],\n                  }),\n                },\n              ],\n              maxWidth:\n                parentState.labelLayout.width -\n                2 * placeholderStyle.paddingHorizontal,\n            },\n          ]}\n          numberOfLines={1}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}