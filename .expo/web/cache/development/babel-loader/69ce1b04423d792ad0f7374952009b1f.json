{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"title\", \"theme\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Divider from \"../Divider\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerSection = function DrawerSection(_ref) {\n  var children = _ref.children,\n      title = _ref.title,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var titleColor = color(colors.text).alpha(0.54).rgb().string();\n  var font = fonts.medium;\n  return React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest), title && React.createElement(View, {\n    style: styles.titleContainer\n  }, React.createElement(Text, {\n    numberOfLines: 1,\n    style: [_objectSpread({\n      color: titleColor\n    }, font), styles.title]\n  }, title)), children, React.createElement(Divider, {\n    style: styles.divider\n  }));\n};\n\nDrawerSection.displayName = 'Drawer.Section';\nvar styles = StyleSheet.create({\n  container: {\n    marginBottom: 4\n  },\n  titleContainer: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  title: {\n    marginLeft: 16\n  },\n  divider: {\n    marginTop: 4\n  }\n});\nexport default withTheme(DrawerSection);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,SAASC,SAAT;;AAuDA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAuD;EAAA,IAApDC,QAAoD,QAApDA,QAAoD;EAAA,IAA1CC,KAA0C,QAA1CA,KAA0C;EAAA,IAAnCC,KAAmC,QAAnCA,KAAmC;EAAA,IAA5BC,KAA4B,QAA5BA,KAA4B;EAAA,IAAlBC,IAAkB;;EAC3E,IAAQC,MAAR,GAA0BH,KAA1B,CAAQG,MAAR;EAAA,IAAgBC,KAAhB,GAA0BJ,KAA1B,CAAgBI,KAAhB;EACA,IAAMC,UAAU,GAAGb,KAAK,CAACW,MAAM,CAACG,IAAR,CAALd,CAAmBe,KAAnBf,CAAyB,IAAzBA,EAA+BgB,GAA/BhB,GAAqCiB,MAArCjB,EAAnB;EACA,IAAMkB,IAAI,GAAGN,KAAK,CAACO,MAAnB;EAEA,OACElB,oBAACmB,IAAD;IAAMX,KAAK,EAAE,CAACY,MAAM,CAACC,SAAR,EAAmBb,KAAnB;EAAb,GAA4CC,IAA5C,GACGH,KAAK,IACJN,oBAACmB,IAAD;IAAMX,KAAK,EAAEY,MAAM,CAACE;EAApB,GACEtB,oBAACC,IAAD;IACEsB,aAAa,EAAE,CADjB;IAEEf,KAAK,EAAE;MAAGT,KAAK,EAAEa;IAAV,GAAyBK,IAAzB,GAAiCG,MAAM,CAACd,KAAxC;EAFT,GAIGA,KAJH,CADF,CAFJ,EAWGD,QAXH,EAYEL,oBAACE,OAAD;IAASM,KAAK,EAAEY,MAAM,CAACI;EAAvB,EAZF,CADF;AALF;;AAuBApB,aAAa,CAACqB,WAAdrB,GAA4B,gBAA5BA;AAEA,IAAMgB,MAAM,GAAGM,UAAU,CAACC,MAAXD,CAAkB;EAC/BL,SAAS,EAAE;IACTO,YAAY,EAAE;EADL,CADoB;EAI/BN,cAAc,EAAE;IACdO,MAAM,EAAE,EADM;IAEdC,cAAc,EAAE;EAFF,CAJe;EAQ/BxB,KAAK,EAAE;IACLyB,UAAU,EAAE;EADP,CARwB;EAW/BP,OAAO,EAAE;IACPQ,SAAS,EAAE;EADJ;AAXsB,CAAlBN,CAAf;AAgBA,eAAevB,SAAS,CAACC,aAAD,CAAxB","names":["color","React","Text","Divider","withTheme","DrawerSection","children","title","theme","style","rest","colors","fonts","titleColor","text","alpha","rgb","string","font","medium","View","styles","container","titleContainer","numberOfLines","divider","displayName","StyleSheet","create","marginBottom","height","justifyContent","marginLeft","marginTop"],"sources":["DrawerSection.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\nimport Text from '../Typography/Text';\nimport Divider from '../Divider';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Title to show as the header for the section.\n   */\n  title?: string;\n  /**\n   * Content of the `Drawer.Section`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to group content inside a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-section.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [active, setActive] = React.useState('');\n *\n *\n *   return (\n *     <Drawer.Section title=\"Some title\">\n *       <Drawer.Item\n *         label=\"First Item\"\n *         active={active === 'first'}\n *         onPress={() => setActive('first')}\n *       />\n *       <Drawer.Item\n *         label=\"Second Item\"\n *         active={active === 'second'}\n *         onPress={() => setActive('second')}\n *       />\n *     </Drawer.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerSection = ({ children, title, theme, style, ...rest }: Props) => {\n  const { colors, fonts } = theme;\n  const titleColor = color(colors.text).alpha(0.54).rgb().string();\n  const font = fonts.medium;\n\n  return (\n    <View style={[styles.container, style]} {...rest}>\n      {title && (\n        <View style={styles.titleContainer}>\n          <Text\n            numberOfLines={1}\n            style={[{ color: titleColor, ...font }, styles.title]}\n          >\n            {title}\n          </Text>\n        </View>\n      )}\n      {children}\n      <Divider style={styles.divider} />\n    </View>\n  );\n};\n\nDrawerSection.displayName = 'Drawer.Section';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 4,\n  },\n  titleContainer: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  title: {\n    marginLeft: 16,\n  },\n  divider: {\n    marginTop: 4,\n  },\n});\n\nexport default withTheme(DrawerSection);\n"]},"metadata":{},"sourceType":"module"}