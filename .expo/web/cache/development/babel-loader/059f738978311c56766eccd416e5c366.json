{"ast":null,"code":"var XDate = require('xdate');\n\nexport function padNumber(n) {\n  if (n < 10) {\n    return '0' + n;\n  }\n\n  return n;\n}\nexport function xdateToData(d) {\n  var dateString = toMarkingFormat(d);\n  return {\n    year: d.getFullYear(),\n    month: d.getMonth() + 1,\n    day: d.getDate(),\n    timestamp: new XDate(dateString, true).getTime(),\n    dateString: dateString\n  };\n}\nexport function parseDate(d) {\n  if (!d) {\n    return;\n  } else if (d.timestamp) {\n    return new XDate(d.timestamp, true);\n  } else if (d instanceof XDate) {\n    return new XDate(toMarkingFormat(d), true);\n  } else if (d.getTime) {\n    var dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n    return new XDate(dateString, true);\n  } else if (d.year) {\n    var _dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n\n    return new XDate(_dateString, true);\n  } else if (d) {\n    return new XDate(d, true);\n  }\n}\nexport function toMarkingFormat(d) {\n  return d.toString('yyyy-MM-dd');\n}","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/node_modules/react-native-calendars/src/interface.js"],"names":["XDate","require","padNumber","n","xdateToData","d","dateString","toMarkingFormat","year","getFullYear","month","getMonth","day","getDate","timestamp","getTime","parseDate","toString"],"mappings":"AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,OAAO,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACzB,MAAIA,CAAC,GAAG,EAAR,EAAY;AACR,WAAO,MAAMA,CAAb;AACH;;AACD,SAAOA,CAAP;AACH;AACD,OAAO,SAASC,WAAT,CAAqBC,CAArB,EAAwB;AAC3B,MAAMC,UAAU,GAAGC,eAAe,CAACF,CAAD,CAAlC;AACA,SAAO;AACHG,IAAAA,IAAI,EAAEH,CAAC,CAACI,WAAF,EADH;AAEHC,IAAAA,KAAK,EAAEL,CAAC,CAACM,QAAF,KAAe,CAFnB;AAGHC,IAAAA,GAAG,EAAEP,CAAC,CAACQ,OAAF,EAHF;AAIHC,IAAAA,SAAS,EAAE,IAAId,KAAJ,CAAUM,UAAV,EAAsB,IAAtB,EAA4BS,OAA5B,EAJR;AAKHT,IAAAA,UAAU,EAAEA;AALT,GAAP;AAOH;AACD,OAAO,SAASU,SAAT,CAAmBX,CAAnB,EAAsB;AACzB,MAAI,CAACA,CAAL,EAAQ;AACJ;AACH,GAFD,MAGK,IAAIA,CAAC,CAACS,SAAN,EAAiB;AAElB,WAAO,IAAId,KAAJ,CAAUK,CAAC,CAACS,SAAZ,EAAuB,IAAvB,CAAP;AACH,GAHI,MAIA,IAAIT,CAAC,YAAYL,KAAjB,EAAwB;AAEzB,WAAO,IAAIA,KAAJ,CAAUO,eAAe,CAACF,CAAD,CAAzB,EAA8B,IAA9B,CAAP;AACH,GAHI,MAIA,IAAIA,CAAC,CAACU,OAAN,EAAe;AAEhB,QAAMT,UAAU,GAAGD,CAAC,CAACI,WAAF,KAAkB,GAAlB,GAAwBP,SAAS,CAACG,CAAC,CAACM,QAAF,KAAe,CAAhB,CAAjC,GAAsD,GAAtD,GAA4DT,SAAS,CAACG,CAAC,CAACQ,OAAF,EAAD,CAAxF;AACA,WAAO,IAAIb,KAAJ,CAAUM,UAAV,EAAsB,IAAtB,CAAP;AACH,GAJI,MAKA,IAAID,CAAC,CAACG,IAAN,EAAY;AACb,QAAMF,WAAU,GAAGD,CAAC,CAACG,IAAF,GAAS,GAAT,GAAeN,SAAS,CAACG,CAAC,CAACK,KAAH,CAAxB,GAAoC,GAApC,GAA0CR,SAAS,CAACG,CAAC,CAACO,GAAH,CAAtE;;AACA,WAAO,IAAIZ,KAAJ,CAAUM,WAAV,EAAsB,IAAtB,CAAP;AACH,GAHI,MAIA,IAAID,CAAJ,EAAO;AAER,WAAO,IAAIL,KAAJ,CAAUK,CAAV,EAAa,IAAb,CAAP;AACH;AACJ;AACD,OAAO,SAASE,eAAT,CAAyBF,CAAzB,EAA4B;AAC/B,SAAOA,CAAC,CAACY,QAAF,CAAW,YAAX,CAAP;AACH","sourcesContent":["const XDate = require('xdate');\nexport function padNumber(n) {\n    if (n < 10) {\n        return '0' + n;\n    }\n    return n;\n}\nexport function xdateToData(d) {\n    const dateString = toMarkingFormat(d);\n    return {\n        year: d.getFullYear(),\n        month: d.getMonth() + 1,\n        day: d.getDate(),\n        timestamp: new XDate(dateString, true).getTime(),\n        dateString: dateString\n    };\n}\nexport function parseDate(d) {\n    if (!d) {\n        return;\n    }\n    else if (d.timestamp) {\n        // conventional data timestamp\n        return new XDate(d.timestamp, true);\n    }\n    else if (d instanceof XDate) {\n        // xdate\n        return new XDate(toMarkingFormat(d), true);\n    }\n    else if (d.getTime) {\n        // javascript date\n        const dateString = d.getFullYear() + '-' + padNumber(d.getMonth() + 1) + '-' + padNumber(d.getDate());\n        return new XDate(dateString, true);\n    }\n    else if (d.year) {\n        const dateString = d.year + '-' + padNumber(d.month) + '-' + padNumber(d.day);\n        return new XDate(dateString, true);\n    }\n    else if (d) {\n        // timestamp number or date formatted as string\n        return new XDate(d, true);\n    }\n}\nexport function toMarkingFormat(d) {\n    return d.toString('yyyy-MM-dd');\n}\n"]},"metadata":{},"sourceType":"module"}