{
  "ast": null,
  "code": "import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { getSchedule } from \"./RetrieveSchedules\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport studentData from \"../dfmpc-student-placement-system.json\";\nimport AppContext from \"../AppContext\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar buttonHeight = 50;\nvar textPos = buttonHeight / 2;\nvar SPACING = 20;\nvar AVATAR_SIZE = 70;\nvar ICON_SIZE = 260;\n\nvar Schedule = function Schedule() {\n  var _useState = useState({\n    scheduleList: [{\n      key1: 0,\n      created_at: \"\",\n      hospital: \"\",\n      ID: \"\",\n      specialty_duration: \"\",\n      specialty_id: \"\",\n      student_id: \"\",\n      updated_at: \"\",\n      week_no: \"\"\n    }]\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var onReceive = function onReceive(scheduleList) {\n    setState(function (prevState) {\n      return {\n        scheduleList: prevState.scheduleList = scheduleList\n      };\n    });\n  };\n\n  var navigation = useNavigation();\n  var scheduleList = studentData.schedules;\n  console.log('Schedule List', scheduleList);\n  generateSchedule(scheduleList);\n  return _jsx(View, {\n    children: _jsx(Text, {\n      children: \"scheduleList\"\n    })\n  });\n};\n\nvar generateSchedule = function generateSchedule(scheduleList) {\n  var schedulesObj = {};\n  scheduleList.forEach(function (schedule) {\n    var scheduleObj = {};\n    var week = getDateFromWeekNum(schedule.week_no, 2022);\n    var daysInWeek = getDaysInWeek(week.startDate);\n    daysInWeek.forEach(function (day, dayIndex) {\n      scheduleObj = {};\n\n      if (dayIndex === 0) {\n        scheduleObj.startingDate = true;\n        scheduleObj.color = '#50cebb';\n        scheduleObj.textColor = 'white';\n      } else if (dayIndex > 0 && dayIndex <= 5) {\n        scheduleObj.color = '#70d7c7';\n        scheduleObj.textColor = 'white';\n      } else {\n        scheduleObj.endingDay = true;\n        scheduleObj.color = 'black';\n        scheduleObj.textColor = 'white';\n      }\n\n      schedulesObj[day] = scheduleObj;\n    });\n  });\n  console.log('SchedulesObj', schedulesObj);\n  return schedulesObj;\n};\n\nvar getDaysInWeek = function getDaysInWeek(startDate) {\n  var dates = [];\n\n  for (var i = 1; i < 8; i++) {\n    var currentDate = new Date(startDate);\n    currentDate.setDate(startDate.getDate() + i);\n    var formattedDate = currentDate.toISOString().split('T')[0];\n    dates.push(formattedDate);\n  }\n\n  return dates;\n};\n\nvar getDateFromWeekNum = function getDateFromWeekNum(weekNum, year) {\n  var d = new Date(year, 0, 1);\n  var endDate = new Date(d.setDate(d.getDate() + weekNum * 7 - 1));\n  var startDate = new Date(year, 0, 1);\n  startDate.setDate(endDate.getDate() - 6);\n  return {\n    startDate: startDate,\n    endDate: endDate\n  };\n};\n\nvar getStudentSchedule = function getStudentSchedule(scheduleList, studentId) {};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'rgba(18,33,65,0.8)'\n  },\n  header: {\n    flexDirection: 'row',\n    padding: 10\n  },\n  item: {\n    backgroundColor: 'rgba(18,33,65,0.8)',\n    padding: 20\n  },\n  itemText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: 'white'\n  },\n  contentHide: {\n    color: 'white',\n    backgroundColor: 'rgba(44,59,92,255)',\n    overflow: \"hidden\",\n    maxHeight: 0\n  },\n  content_show: {\n    color: 'white',\n    backgroundColor: 'rgba(44,59,92,255)',\n    marginBottom: 10,\n    marginTop: 10,\n    padding: 30,\n    opacity: 1,\n    maxHeight: 9999\n  }\n});\nexport default Schedule;",
  "map": {
    "version": 3,
    "names": [
      "React",
      "useState",
      "useNavigation",
      "LinearGradient",
      "getSchedule",
      "SafeAreaView",
      "studentData",
      "AppContext",
      "buttonHeight",
      "textPos",
      "SPACING",
      "AVATAR_SIZE",
      "ICON_SIZE",
      "Schedule",
      "scheduleList",
      "key1",
      "created_at",
      "hospital",
      "ID",
      "specialty_duration",
      "specialty_id",
      "student_id",
      "updated_at",
      "week_no",
      "state",
      "setState",
      "onReceive",
      "prevState",
      "navigation",
      "schedules",
      "console",
      "log",
      "generateSchedule",
      "schedulesObj",
      "forEach",
      "schedule",
      "scheduleObj",
      "week",
      "getDateFromWeekNum",
      "daysInWeek",
      "getDaysInWeek",
      "startDate",
      "day",
      "dayIndex",
      "startingDate",
      "color",
      "textColor",
      "endingDay",
      "dates",
      "i",
      "currentDate",
      "Date",
      "setDate",
      "getDate",
      "formattedDate",
      "toISOString",
      "split",
      "push",
      "weekNum",
      "year",
      "d",
      "endDate",
      "getStudentSchedule",
      "studentId",
      "styles",
      "StyleSheet",
      "create",
      "container",
      "flex",
      "backgroundColor",
      "header",
      "flexDirection",
      "padding",
      "item",
      "itemText",
      "fontSize",
      "fontWeight",
      "contentHide",
      "overflow",
      "maxHeight",
      "content_show",
      "marginBottom",
      "marginTop",
      "opacity"
    ],
    "sources": [
      "C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/Screens/Schedule.js"
    ],
    "sourcesContent": [
      "import React, { useState } from \"react\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  Button,\r\n  Linking,\r\n  TouchableHighlight,\r\n  TouchableOpacity\r\n} from \"react-native\";\r\nimport {LinearGradient} from 'expo-linear-gradient';\r\nimport { getSchedule } from './RetrieveSchedules';\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport { ScrollView } from \"react-native-web\";\r\nimport studentData from '../dfmpc-student-placement-system.json'\r\nimport AppContext from '../AppContext';\r\n\r\nconst buttonHeight=50;\r\nconst textPos=buttonHeight/2;\r\nconst SPACING = 20;\r\nconst AVATAR_SIZE = 70;\r\nconst ICON_SIZE = 260;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* THIS PAGE IS CURRENTLY UNDER DEVELOPMENT AND AS SUCH IS UNCOMMENTED*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Schedule = () => {\r\n  const[state,setState]=useState({scheduleList: [{key1:0,\r\n  created_at:\"\",\r\n  hospital:\"\",\r\n  ID:\"\",\r\n  specialty_duration:\"\",\r\n  specialty_id:\"\",\r\n  student_id:\"\",\r\n  updated_at:\"\",\r\n  week_no:\"\",\r\n  }]}) \r\n\r\n\r\n  const onReceive = (scheduleList) => {\r\n\r\n    setState(prevState => ({\r\n      scheduleList: prevState.scheduleList = scheduleList,\r\n\r\n    }));\r\n  }\r\n  //getSchedule(onReceive)\r\n  //console.log(state.scheduleList)\r\n  const navigation = useNavigation();\r\n  const scheduleList = studentData.schedules;\r\n  console.log('Schedule List', scheduleList)\r\n  generateSchedule(scheduleList)\r\n  return (\r\n      <View><Text>scheduleList</Text></View>\r\n    \r\n     );\r\n};\r\n\r\nconst generateSchedule = (scheduleList) => {\r\n  let schedulesObj = {}\r\n  scheduleList.forEach((schedule) => {\r\n\r\n    let scheduleObj = {}\r\n\r\n    const week = getDateFromWeekNum(schedule.week_no,2022);\r\n\r\n    const daysInWeek = getDaysInWeek(week.startDate);\r\n\r\n    daysInWeek.forEach((day, dayIndex) => {\r\n\r\n      scheduleObj = {};\r\n      if (dayIndex === 0) {\r\n        scheduleObj.startingDate = true;\r\n        scheduleObj.color = '#50cebb';\r\n        scheduleObj.textColor = 'white';\r\n      } else if (dayIndex > 0 && dayIndex <= 5) {\r\n        scheduleObj.color = '#70d7c7';\r\n        scheduleObj.textColor = 'white';\r\n      } else {\r\n        scheduleObj.endingDay = true;\r\n        scheduleObj.color = 'black';\r\n        scheduleObj.textColor = 'white';\r\n      }\r\n\r\n      // Object.assign(schedulesObj, scheduleObj);\r\n      schedulesObj[day] = scheduleObj;\r\n\r\n    }) // end of days i week\r\n    \r\n  }) // End of Schedule List\r\n\r\n  console.log('SchedulesObj', schedulesObj)\r\n  return schedulesObj;\r\n}\r\n\r\nconst getDaysInWeek = (startDate) => {\r\n\r\n  let dates = [];\r\n  // console.log('startDate', startDate) \r\n\r\n  for (let i = 1; i < 8; i++) {\r\n    const currentDate = new Date(startDate);\r\n    currentDate.setDate(startDate.getDate() + i);\r\n    const formattedDate = currentDate.toISOString().split('T')[0];\r\n\r\n    dates.push(formattedDate);\r\n  }\r\n  return dates;\r\n  // console.log('DatesList', dates);\r\n}\r\n\r\nconst getDateFromWeekNum = (weekNum, year) => {\r\n  var d = new Date(year, 0, 1);\r\n  \r\n  const endDate = new Date(d.setDate(d.getDate() + (weekNum * 7) - 1));\r\n  const startDate = new Date(year, 0, 1);\r\n  startDate.setDate(endDate.getDate() - 6);\r\n\r\n  return({startDate: startDate,endDate: endDate});\r\n  \r\n}\r\n\r\nconst getStudentSchedule = (scheduleList, studentId) => {\r\n\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor:'rgba(18,33,65,0.8)',\r\n  },\r\n  header:{\r\n  flexDirection:'row',\r\n  padding:10,\r\n  },\r\n  item:{\r\n    backgroundColor:'rgba(18,33,65,0.8)',\r\n    padding:20,\r\n  },\r\n  itemText:{\r\n    fontSize: 16,\r\n    fontWeight:'500',\r\n    color:'white'\r\n\r\n\r\n  },\r\n  contentHide: {\r\n    color:'white',\r\n    backgroundColor: 'rgba(44,59,92,255)',\r\n    overflow: \"hidden\",\r\n    maxHeight: 0\r\n\r\n  },\r\n  content_show:{\r\n    color:'white',\r\n    backgroundColor:'rgba(44,59,92,255)',\r\n    marginBottom:10,\r\n    marginTop:10,\r\n    padding:30,\r\n    opacity: 1,\r\n    maxHeight:9999,\r\n   \r\n\r\n  }\r\n});\r\n\r\nexport default Schedule;"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "module"
}
