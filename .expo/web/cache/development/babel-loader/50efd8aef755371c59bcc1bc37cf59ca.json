{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"source\", \"color\", \"size\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Consumer as SettingsConsumer } from \"../core/settings\";\nimport { accessibilityProps } from \"./MaterialCommunityIcon\";\nimport { withTheme } from \"../core/theming\";\nvar isImageSource = function isImageSource(source) {\n  return (\n    typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' ||\n    typeof source === 'number' ||\n    Platform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source))\n  );\n};\nvar getIconId = function getIconId(source) {\n  if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {\n    return source.uri;\n  }\n  return source;\n};\nexport var isValidIcon = function isValidIcon(source) {\n  return typeof source === 'string' || typeof source === 'function' || isImageSource(source);\n};\nexport var isEqualIcon = function isEqualIcon(a, b) {\n  return a === b || getIconId(a) === getIconId(b);\n};\nvar Icon = function Icon(_ref) {\n  var source = _ref.source,\n    color = _ref.color,\n    size = _ref.size,\n    theme = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? I18nManager.isRTL ? 'rtl' : 'ltr' : source.direction : null;\n  var s = typeof source === 'object' && source.direction && source.source ? source.source : source;\n  var iconColor = color || theme.colors.text;\n  if (isImageSource(s)) {\n    return React.createElement(Image, _extends({}, rest, {\n      source: s,\n      style: [{\n        transform: [{\n          scaleX: direction === 'rtl' ? -1 : 1\n        }]\n      },\n      {\n        width: size,\n        height: size,\n        tintColor: color,\n        resizeMode: 'contain'\n      }]\n    }, accessibilityProps));\n  } else if (typeof s === 'string') {\n    return React.createElement(SettingsConsumer, null, function (_ref2) {\n      var icon = _ref2.icon;\n      return icon({\n        name: s,\n        color: iconColor,\n        size: size,\n        direction: direction\n      });\n    });\n  } else if (typeof s === 'function') {\n    return s({\n      color: iconColor,\n      size: size,\n      direction: direction\n    });\n  }\n  return null;\n};\nexport default withTheme(Icon);","map":{"version":3,"mappings":"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","names":["React","Consumer","SettingsConsumer","accessibilityProps","withTheme","isImageSource","source","Object","prototype","hasOwnProperty","call","uri","Platform","OS","startsWith","test","getIconId","isValidIcon","isEqualIcon","a","b","Icon","_ref","color","size","theme","rest","direction","I18nManager","isRTL","s","iconColor","colors","text","Image","style","transform","scaleX","width","height","tintColor","resizeMode","icon","_ref2","name"],"sources":["Icon.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  I18nManager,\n  Platform,\n  ImageSourcePropType,\n} from 'react-native';\nimport { Consumer as SettingsConsumer } from '../core/settings';\nimport { accessibilityProps } from './MaterialCommunityIcon';\nimport { withTheme } from '../core/theming';\n\ntype IconSourceBase = string | ImageSourcePropType;\n\nexport type IconSource =\n  | IconSourceBase\n  | Readonly<{ source: IconSourceBase; direction: 'rtl' | 'ltr' | 'auto' }>\n  | ((props: IconProps & { color: string }) => React.ReactNode);\n\ntype IconProps = {\n  size: number;\n  allowFontScaling?: boolean;\n};\n\ntype Props = IconProps & {\n  color?: string;\n  source: any;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst isImageSource = (source: any) =>\n  // source is an object with uri\n  (typeof source === 'object' &&\n    source !== null &&\n    Object.prototype.hasOwnProperty.call(source, 'uri') &&\n    typeof source.uri === 'string') ||\n  // source is a module, e.g. - require('image')\n  typeof source === 'number' ||\n  // image url on web\n  (Platform.OS === 'web' &&\n    typeof source === 'string' &&\n    (source.startsWith('data:image') ||\n      /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));\n\nconst getIconId = (source: any) => {\n  if (\n    typeof source === 'object' &&\n    source !== null &&\n    Object.prototype.hasOwnProperty.call(source, 'uri') &&\n    typeof source.uri === 'string'\n  ) {\n    return source.uri;\n  }\n\n  return source;\n};\n\nexport const isValidIcon = (source: any) =>\n  typeof source === 'string' ||\n  typeof source === 'function' ||\n  isImageSource(source);\n\nexport const isEqualIcon = (a: any, b: any) =>\n  a === b || getIconId(a) === getIconId(b);\n\nconst Icon = ({ source, color, size, theme, ...rest }: Props) => {\n  const direction =\n    typeof source === 'object' && source.direction && source.source\n      ? source.direction === 'auto'\n        ? I18nManager.isRTL\n          ? 'rtl'\n          : 'ltr'\n        : source.direction\n      : null;\n  const s =\n    typeof source === 'object' && source.direction && source.source\n      ? source.source\n      : source;\n  const iconColor = color || theme.colors.text;\n\n  if (isImageSource(s)) {\n    return (\n      <Image\n        {...rest}\n        source={s}\n        style={[\n          {\n            transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n          },\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            width: size,\n            height: size,\n            tintColor: color,\n            resizeMode: 'contain',\n          },\n        ]}\n        {...accessibilityProps}\n      />\n    );\n  } else if (typeof s === 'string') {\n    return (\n      <SettingsConsumer>\n        {({ icon }) => {\n          return icon({\n            name: s,\n            color: iconColor,\n            size,\n            direction,\n          });\n        }}\n      </SettingsConsumer>\n    );\n  } else if (typeof s === 'function') {\n    return s({ color: iconColor, size, direction });\n  }\n\n  return null;\n};\n\nexport default withTheme(Icon);\n"]},"metadata":{},"sourceType":"module"}