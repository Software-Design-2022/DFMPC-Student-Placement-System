{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { black, white } from \"../../styles/colors\";\n\nvar ToggleButton = function ToggleButton(_ref) {\n  var icon = _ref.icon,\n      size = _ref.size,\n      theme = _ref.theme,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      style = _ref.style,\n      value = _ref.value,\n      status = _ref.status,\n      _onPress = _ref.onPress,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var borderRadius = theme.roundness;\n  return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n    var backgroundColor;\n    var checked = context && context.value === value || status === 'checked';\n\n    if (checked) {\n      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    return React.createElement(IconButton, _extends({\n      borderless: false,\n      icon: icon,\n      onPress: function onPress(e) {\n        if (_onPress) {\n          _onPress(e);\n        }\n\n        if (context) {\n          context.onValueChange(!checked ? value : null);\n        }\n      },\n      size: size,\n      accessibilityLabel: accessibilityLabel,\n      accessibilityState: {\n        disabled: disabled,\n        selected: checked\n      },\n      disabled: disabled,\n      style: [styles.content, {\n        backgroundColor: backgroundColor,\n        borderRadius: borderRadius,\n        borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n      }, style]\n    }, rest));\n  });\n};\n\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);\nvar ToggleButtonWithTheme = withTheme(ToggleButton);\nexport { ToggleButtonWithTheme as ToggleButton };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAOA,SAASC,SAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AACA,SAASC,wBAAT;AACA,SAASC,KAAT,EAAgBC,KAAhB;;AA6EA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAWR;EAAA,IAVXC,IAUW,QAVXA,IAUW;EAAA,IATXC,IASW,QATXA,IASW;EAAA,IARXC,KAQW,QARXA,KAQW;EAAA,IAPXC,kBAOW,QAPXA,kBAOW;EAAA,IANXC,QAMW,QANXA,QAMW;EAAA,IALXC,KAKW,QALXA,KAKW;EAAA,IAJXC,KAIW,QAJXA,KAIW;EAAA,IAHXC,MAGW,QAHXA,MAGW;EAAA,IAFXC,QAEW,QAFXA,OAEW;EAAA,IADRC,IACQ;;EACX,IAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;EAEA,OACEnB,oBAACI,wBAAD,CAA0BgB,QAA1B,QACIC,iBAAD,EAAuE;IACtE,IAAIC,eAAJ;IAEA,IAAMC,OAAuB,GAC1BF,OAAO,IAAIA,OAAO,CAACP,KAARO,KAAkBP,KAA7BO,IAAuCN,MAAM,KAAK,SADrD;;IAGA,IAAIQ,OAAJ,EAAa;MACXD,eAAe,GAAGZ,KAAK,CAACc,IAANd,GACd,0BADcA,GAEd,oBAFJY;IADF,OAIO;MACLA,eAAe,GAAG,aAAlBA;IACD;;IAED,OACEtB,oBAACG,UAAD;MACEsB,UAAU,EAAE,KADd;MAEEjB,IAAI,EAAEA,IAFR;MAGEQ,OAAO,EAAGU,kBAAD,EAAwC;QAC/C,IAAIV,QAAJ,EAAa;UACXA,QAAO,CAACU,CAAD,CAAPV;QACD;;QAED,IAAIK,OAAJ,EAAa;UACXA,OAAO,CAACM,aAARN,CAAsB,CAACE,OAAD,GAAWT,KAAX,GAAmB,IAAzCO;QACD;MAVL;MAYEZ,IAAI,EAAEA,IAZR;MAaEE,kBAAkB,EAAEA,kBAbtB;MAcEiB,kBAAkB,EAAE;QAAEhB,QAAF,EAAEA,QAAF;QAAYiB,QAAQ,EAAEN;MAAtB,CAdtB;MAeEX,QAAQ,EAAEA,QAfZ;MAgBEC,KAAK,EAAE,CACLiB,MAAM,CAACC,OADF,EAEL;QACET,eADF,EACEA,eADF;QAEEJ,YAFF,EAEEA,YAFF;QAGEc,WAAW,EAAE9B,KAAK,CAACQ,KAAK,CAACc,IAANd,GAAaJ,KAAbI,GAAqBL,KAAtB,CAALH,CACV+B,KADU/B,CACJ,IADIA,EAEVgC,GAFUhC,GAGViC,MAHUjC;MAHf,CAFK,EAULW,KAVK;IAhBT,GA4BMI,IA5BN,EADF;EAfJ,EADF;AAdF;;AAmEA,IAAMa,MAAM,GAAGM,UAAU,CAACC,MAAXD,CAAkB;EAC/BL,OAAO,EAAE;IACPO,KAAK,EAAE,EADA;IAEPC,MAAM,EAAE,EAFD;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlBJ,CAAf;AAQA,eAAenC,SAAS,CAACM,YAAD,CAAxB;AAGA,IAAMkC,qBAAqB,GAAGxC,SAAS,CAACM,YAAD,CAAvC;AAEA,SAASkC,qBAAqB,IAAIlC,YAAlC","names":["React","withTheme","color","IconButton","ToggleButtonGroupContext","black","white","ToggleButton","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","Consumer","context","backgroundColor","checked","dark","borderless","e","onValueChange","accessibilityState","selected","styles","content","borderColor","alpha","rgb","string","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"module"}