{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"size\", \"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from \"../../styles/colors\";\nimport IconButton from \"../IconButton\";\n\nvar AppbarAction = function AppbarAction(_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      _ref$color = _ref.color,\n      iconColor = _ref$color === void 0 ? color(black).alpha(0.54).rgb().string() : _ref$color,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      accessibilityLabel = _ref.accessibilityLabel,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return React.createElement(IconButton, _extends({\n    size: size,\n    onPress: onPress,\n    color: iconColor,\n    icon: icon,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel,\n    animated: true\n  }, rest));\n};\n\nAppbarAction.displayName = 'Appbar.Action';\nexport default AppbarAction;\nexport { AppbarAction };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAMA,SAASC,KAAT;AACA,OAAOC,UAAP;;AAmEA,IAAMC,YAAY,GAAG,SAAfA,YAAe;EAAA,qBACnBC,IADmB;EAAA,IACnBA,IADmB,0BACZ,EADY;EAAA,sBAEnBJ,KAFmB;EAAA,IAEZK,SAFY,2BAEAL,KAAK,CAACC,KAAD,CAALD,CAAaM,KAAbN,CAAmB,IAAnBA,EAAyBO,GAAzBP,GAA+BQ,MAA/BR,EAFA;EAAA,IAGnBS,IAHmB,QAGnBA,IAHmB;EAAA,IAInBC,QAJmB,QAInBA,QAJmB;EAAA,IAKnBC,OALmB,QAKnBA,OALmB;EAAA,IAMnBC,kBANmB,QAMnBA,kBANmB;EAAA,IAOhBC,IAPgB;;EAAA,OASnBd,oBAACG,UAAD;IACEE,IAAI,EAAEA,IADR;IAEEO,OAAO,EAAEA,OAFX;IAGEX,KAAK,EAAEK,SAHT;IAIEI,IAAI,EAAEA,IAJR;IAKEC,QAAQ,EAAEA,QALZ;IAMEE,kBAAkB,EAAEA,kBANtB;IAOEE,QAAQ;EAPV,GAQMD,IARN,EATmB;AAArB;;AAqBAV,YAAY,CAACY,WAAbZ,GAA2B,eAA3BA;AAEA,eAAeA,YAAf;AAGA,SAASA,YAAT","names":["React","color","black","IconButton","AppbarAction","size","iconColor","alpha","rgb","string","icon","disabled","onPress","accessibilityLabel","rest","animated","displayName"],"sources":["AppbarAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport type {\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\nimport type { IconSource } from '../Icon';\n\ntype Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-android.png\" />\n *       <figcaption>Android</figcaption>\n *   </figure>\n * </div>\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-action-ios.png\" />\n *       <figcaption>iOS</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = ({\n  size = 24,\n  color: iconColor = color(black).alpha(0.54).rgb().string(),\n  icon,\n  disabled,\n  onPress,\n  accessibilityLabel,\n  ...rest\n}: Props) => (\n  <IconButton\n    size={size}\n    onPress={onPress}\n    color={iconColor}\n    icon={icon}\n    disabled={disabled}\n    accessibilityLabel={accessibilityLabel}\n    animated\n    {...rest}\n  />\n);\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"]},"metadata":{},"sourceType":"module"}