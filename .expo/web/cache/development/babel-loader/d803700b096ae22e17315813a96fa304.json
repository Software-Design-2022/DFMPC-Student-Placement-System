{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport { setAutoServerRegistrationEnabledAsync } from \"./DevicePushTokenAutoRegistration.fx\";\nimport ServerRegistrationModule from \"./ServerRegistrationModule\";\nimport getDevicePushTokenAsync from \"./getDevicePushTokenAsync\";\nvar productionBaseUrl = 'https://exp.host/--/api/v2/';\nexport default function getExpoPushTokenAsync() {\n  var _Constants$manifest, _Constants$manifest2, _Constants$manifest2$, _Constants$manifest2$2, _Constants$manifest3, _Constants$manifest4, _Constants$manifest4$, _Constants$manifest4$2, _Constants$manifest5, _options$baseUrl, _options$url;\n  var options,\n    devicePushToken,\n    deviceId,\n    experienceId,\n    projectId,\n    applicationId,\n    type,\n    development,\n    baseUrl,\n    url,\n    body,\n    response,\n    statusInfo,\n    _body,\n    expoPushToken,\n    _args = arguments;\n  return _regeneratorRuntime.async(function getExpoPushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n          _context.t0 = options.devicePushToken;\n          if (_context.t0) {\n            _context.next = 6;\n            break;\n          }\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(getDevicePushTokenAsync());\n        case 5:\n          _context.t0 = _context.sent;\n        case 6:\n          devicePushToken = _context.t0;\n          _context.t1 = options.deviceId;\n          if (_context.t1) {\n            _context.next = 12;\n            break;\n          }\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(getDeviceIdAsync());\n        case 11:\n          _context.t1 = _context.sent;\n        case 12:\n          deviceId = _context.t1;\n          experienceId = options.experienceId || ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.originalFullName) || ((_Constants$manifest2 = Constants.manifest2) == null ? void 0 : (_Constants$manifest2$ = _Constants$manifest2.extra) == null ? void 0 : (_Constants$manifest2$2 = _Constants$manifest2$.expoClient) == null ? void 0 : _Constants$manifest2$2.originalFullName) || ((_Constants$manifest3 = Constants.manifest) == null ? void 0 : _Constants$manifest3.id);\n          projectId = options.projectId || ((_Constants$manifest4 = Constants.manifest2) == null ? void 0 : (_Constants$manifest4$ = _Constants$manifest4.extra) == null ? void 0 : (_Constants$manifest4$2 = _Constants$manifest4$.eas) == null ? void 0 : _Constants$manifest4$2.projectId) || ((_Constants$manifest5 = Constants.manifest) == null ? void 0 : _Constants$manifest5.projectId);\n          if (!(!experienceId && !projectId)) {\n            _context.next = 17;\n            break;\n          }\n          throw new CodedError('ERR_NOTIFICATIONS_NO_EXPERIENCE_ID', \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\");\n        case 17:\n          applicationId = options.applicationId || Application.applicationId;\n          if (applicationId) {\n            _context.next = 20;\n            break;\n          }\n          throw new CodedError('ERR_NOTIFICATIONS_NO_APPLICATION_ID', \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\");\n        case 20:\n          type = options.type || getTypeOfToken(devicePushToken);\n          _context.t2 = options.development;\n          if (_context.t2) {\n            _context.next = 26;\n            break;\n          }\n          _context.next = 25;\n          return _regeneratorRuntime.awrap(shouldUseDevelopmentNotificationService());\n        case 25:\n          _context.t2 = _context.sent;\n        case 26:\n          development = _context.t2;\n          baseUrl = (_options$baseUrl = options.baseUrl) != null ? _options$baseUrl : productionBaseUrl;\n          url = (_options$url = options.url) != null ? _options$url : baseUrl + \"push/getExpoPushToken\";\n          body = _objectSpread({\n            type: type,\n            deviceId: deviceId.toLowerCase(),\n            development: development,\n            appId: applicationId,\n            deviceToken: getDeviceToken(devicePushToken)\n          }, projectId ? {\n            projectId: projectId\n          } : {\n            experienceId: experienceId\n          });\n          _context.next = 32;\n          return _regeneratorRuntime.awrap(fetch(url, {\n            method: 'POST',\n            headers: {\n              'content-type': 'application/json'\n            },\n            body: JSON.stringify(body)\n          }).catch(function (error) {\n            throw new CodedError('ERR_NOTIFICATIONS_NETWORK_ERROR', \"Error encountered while fetching Expo token: \" + error + \".\");\n          }));\n        case 32:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 45;\n            break;\n          }\n          statusInfo = response.statusText || response.status;\n          _body = undefined;\n          _context.prev = 36;\n          _context.next = 39;\n          return _regeneratorRuntime.awrap(response.text());\n        case 39:\n          _body = _context.sent;\n          _context.next = 44;\n          break;\n        case 42:\n          _context.prev = 42;\n          _context.t3 = _context[\"catch\"](36);\n        case 44:\n          throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Error encountered while fetching Expo token, expected an OK response, received: \" + statusInfo + \" (body: \\\"\" + _body + \"\\\").\");\n        case 45:\n          _context.t4 = getExpoPushToken;\n          _context.next = 48;\n          return _regeneratorRuntime.awrap(parseResponse(response));\n        case 48:\n          _context.t5 = _context.sent;\n          expoPushToken = (0, _context.t4)(_context.t5);\n          _context.prev = 50;\n          if (!(options.url || options.baseUrl)) {\n            _context.next = 55;\n            break;\n          }\n          console.debug(\"[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.\");\n          _context.next = 57;\n          break;\n        case 55:\n          _context.next = 57;\n          return _regeneratorRuntime.awrap(setAutoServerRegistrationEnabledAsync(true));\n        case 57:\n          _context.next = 62;\n          break;\n        case 59:\n          _context.prev = 59;\n          _context.t6 = _context[\"catch\"](50);\n          console.warn('[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service', _context.t6);\n        case 62:\n          return _context.abrupt(\"return\", {\n            type: 'expo',\n            data: expoPushToken\n          });\n        case 63:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[36, 42], [50, 59]], Promise);\n}\nfunction parseResponse(response) {\n  return _regeneratorRuntime.async(function parseResponse$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(response.json());\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.prev = 8;\n          _context2.t1 = CodedError;\n          _context2.t2 = JSON;\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(response.text());\n        case 13:\n          _context2.t3 = _context2.sent;\n          _context2.t4 = _context2.t2.stringify.call(_context2.t2, _context2.t3);\n          _context2.t5 = \"Expected a JSON response from server when fetching Expo token, received body: \" + _context2.t4;\n          _context2.t6 = _context2.t5 + \".\";\n          throw new _context2.t1('ERR_NOTIFICATIONS_SERVER_ERROR', _context2.t6);\n        case 20:\n          _context2.prev = 20;\n          _context2.t7 = _context2[\"catch\"](8);\n          throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Expected a JSON response from server when fetching Expo token, received response: \" + JSON.stringify(response) + \".\");\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6], [8, 20]], Promise);\n}\nfunction getExpoPushToken(data) {\n  if (!data || !(typeof data === 'object') || !data.data || !(typeof data.data === 'object') || !data.data.expoPushToken || !(typeof data.data.expoPushToken === 'string')) {\n    throw new CodedError('ERR_NOTIFICATIONS_SERVER_ERROR', \"Malformed response from server, expected \\\"{ data: { expoPushToken: string } }\\\", received: \" + JSON.stringify(data, null, 2) + \".\");\n  }\n  return data.data.expoPushToken;\n}\nfunction getDeviceIdAsync() {\n  return _regeneratorRuntime.async(function getDeviceIdAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          if (ServerRegistrationModule.getInstallationIdAsync) {\n            _context3.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(ServerRegistrationModule.getInstallationIdAsync());\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          throw new CodedError('ERR_NOTIF_DEVICE_ID', \"Could not have fetched installation ID of the application: \" + _context3.t0 + \".\");\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n}\nfunction getDeviceToken(devicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n  return JSON.stringify(devicePushToken.data);\n}\nfunction shouldUseDevelopmentNotificationService() {\n  var notificationServiceEnvironment;\n  return _regeneratorRuntime.async(function shouldUseDevelopmentNotificationService$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(Platform.OS === 'ios')) {\n            _context4.next = 11;\n            break;\n          }\n          _context4.prev = 1;\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(Application.getIosPushNotificationServiceEnvironmentAsync());\n        case 4:\n          notificationServiceEnvironment = _context4.sent;\n          if (!(notificationServiceEnvironment === 'development')) {\n            _context4.next = 7;\n            break;\n          }\n          return _context4.abrupt(\"return\", true);\n        case 7:\n          _context4.next = 11;\n          break;\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](1);\n        case 11:\n          return _context4.abrupt(\"return\", false);\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[1, 9]], Promise);\n}\nfunction getTypeOfToken(devicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    default:\n      return devicePushToken.type;\n  }\n}","map":{"version":3,"mappings":"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","names":["Application","Constants","Platform","CodedError","UnavailabilityError","setAutoServerRegistrationEnabledAsync","ServerRegistrationModule","getDevicePushTokenAsync","productionBaseUrl","getExpoPushTokenAsync","options","devicePushToken","deviceId","getDeviceIdAsync","experienceId","manifest","originalFullName","manifest2","extra","expoClient","id","projectId","eas","applicationId","type","getTypeOfToken","development","shouldUseDevelopmentNotificationService","baseUrl","url","body","toLowerCase","appId","deviceToken","getDeviceToken","fetch","method","headers","JSON","stringify","catch","error","response","ok","statusInfo","statusText","status","undefined","text","getExpoPushToken","parseResponse","expoPushToken","console","debug","warn","data","json","getInstallationIdAsync","OS","getIosPushNotificationServiceEnvironmentAsync","notificationServiceEnvironment"],"sourceRoot":"","sources":["../src/getExpoPushTokenAsync.ts"],"sourcesContent":["import * as Application from 'expo-application';\nimport Constants from 'expo-constants';\nimport { Platform, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { setAutoServerRegistrationEnabledAsync } from './DevicePushTokenAutoRegistration.fx';\nimport ServerRegistrationModule from './ServerRegistrationModule';\nimport { DevicePushToken, ExpoPushToken } from './Tokens.types';\nimport getDevicePushTokenAsync from './getDevicePushTokenAsync';\n\nconst productionBaseUrl = 'https://exp.host/--/api/v2/';\n\ninterface Options {\n  // Endpoint URL override\n  baseUrl?: string;\n\n  // Request URL override\n  url?: string;\n\n  // Request body overrides\n  type?: string;\n  deviceId?: string;\n  development?: boolean;\n  experienceId?: string;\n  projectId?: string;\n  applicationId?: string;\n  devicePushToken?: DevicePushToken;\n}\n\nexport default async function getExpoPushTokenAsync(options: Options = {}): Promise<ExpoPushToken> {\n  const devicePushToken = options.devicePushToken || (await getDevicePushTokenAsync());\n\n  const deviceId = options.deviceId || (await getDeviceIdAsync());\n\n  const experienceId =\n    options.experienceId ||\n    Constants.manifest?.originalFullName ||\n    Constants.manifest2?.extra?.expoClient?.originalFullName ||\n    Constants.manifest?.id;\n\n  const projectId =\n    options.projectId ||\n    Constants.manifest2?.extra?.eas?.projectId ||\n    Constants.manifest?.projectId;\n\n  if (!experienceId && !projectId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_EXPERIENCE_ID',\n      \"No experienceId or projectId found. If one or the other can't be inferred from the manifest (eg. in bare workflow), you have to pass one in yourself.\"\n    );\n  }\n\n  const applicationId = options.applicationId || Application.applicationId;\n  if (!applicationId) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NO_APPLICATION_ID',\n      \"No applicationId found. If it can't be inferred from native configuration by expo-application, you have to pass it in yourself.\"\n    );\n  }\n  const type = options.type || getTypeOfToken(devicePushToken);\n  const development = options.development || (await shouldUseDevelopmentNotificationService());\n\n  const baseUrl = options.baseUrl ?? productionBaseUrl;\n  const url = options.url ?? `${baseUrl}push/getExpoPushToken`;\n\n  const body = {\n    type,\n    deviceId: deviceId.toLowerCase(),\n    development,\n    appId: applicationId,\n    deviceToken: getDeviceToken(devicePushToken),\n    ...(projectId ? { projectId } : { experienceId }),\n  };\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  }).catch((error) => {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_NETWORK_ERROR',\n      `Error encountered while fetching Expo token: ${error}.`\n    );\n  });\n\n  if (!response.ok) {\n    const statusInfo = response.statusText || response.status;\n    let body: string | undefined = undefined;\n    try {\n      body = await response.text();\n    } catch {\n      // do nothing\n    }\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Error encountered while fetching Expo token, expected an OK response, received: ${statusInfo} (body: \"${body}\").`\n    );\n  }\n\n  const expoPushToken = getExpoPushToken(await parseResponse(response));\n\n  try {\n    if (options.url || options.baseUrl) {\n      console.debug(\n        `[expo-notifications] Since the URL endpoint to register in has been customized in the options, expo-notifications won't try to auto-update the device push token on the server.`\n      );\n    } else {\n      await setAutoServerRegistrationEnabledAsync(true);\n    }\n  } catch (e) {\n    console.warn(\n      '[expo-notifications] Could not enable automatically registering new device tokens with the Expo notification service',\n      e\n    );\n  }\n\n  return {\n    type: 'expo',\n    data: expoPushToken,\n  };\n}\n\nasync function parseResponse(response: Response) {\n  try {\n    return await response.json();\n  } catch {\n    try {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received body: ${JSON.stringify(\n          await response.text()\n        )}.`\n      );\n    } catch {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_SERVER_ERROR',\n        `Expected a JSON response from server when fetching Expo token, received response: ${JSON.stringify(\n          response\n        )}.`\n      );\n    }\n  }\n}\n\nfunction getExpoPushToken(data: any) {\n  if (\n    !data ||\n    !(typeof data === 'object') ||\n    !data.data ||\n    !(typeof data.data === 'object') ||\n    !data.data.expoPushToken ||\n    !(typeof data.data.expoPushToken === 'string')\n  ) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_SERVER_ERROR',\n      `Malformed response from server, expected \"{ data: { expoPushToken: string } }\", received: ${JSON.stringify(\n        data,\n        null,\n        2\n      )}.`\n    );\n  }\n\n  return data.data.expoPushToken as string;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function getDeviceIdAsync() {\n  try {\n    if (!ServerRegistrationModule.getInstallationIdAsync) {\n      throw new UnavailabilityError('ExpoServerRegistrationModule', 'getInstallationIdAsync');\n    }\n\n    return await ServerRegistrationModule.getInstallationIdAsync();\n  } catch (e) {\n    throw new CodedError(\n      'ERR_NOTIF_DEVICE_ID',\n      `Could not have fetched installation ID of the application: ${e}.`\n    );\n  }\n}\n\nfunction getDeviceToken(devicePushToken: DevicePushToken) {\n  if (typeof devicePushToken.data === 'string') {\n    return devicePushToken.data;\n  }\n\n  return JSON.stringify(devicePushToken.data);\n}\n\n// Same as in DevicePushTokenAutoRegistration\nasync function shouldUseDevelopmentNotificationService() {\n  if (Platform.OS === 'ios') {\n    try {\n      const notificationServiceEnvironment =\n        await Application.getIosPushNotificationServiceEnvironmentAsync();\n      if (notificationServiceEnvironment === 'development') {\n        return true;\n      }\n    } catch {\n      // We can't do anything here, we'll fallback to false then.\n    }\n  }\n\n  return false;\n}\n\n// Same as in DevicePushTokenAutoRegistration\nfunction getTypeOfToken(devicePushToken: DevicePushToken) {\n  switch (devicePushToken.type) {\n    case 'ios':\n      return 'apns';\n    case 'android':\n      return 'fcm';\n    // This probably will error on server, but let's make this function future-safe.\n    default:\n      return devicePushToken.type;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}