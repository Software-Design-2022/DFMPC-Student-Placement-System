{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"theme\", \"alpha\", \"family\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"./Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar StyledText = function StyledText(_ref) {\n  var theme = _ref.theme,\n      alpha = _ref.alpha,\n      family = _ref.family,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  var font = theme.fonts[family];\n  var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n  return React.createElement(Text, _extends({}, rest, {\n    style: [styles.text, _objectSpread(_objectSpread({\n      color: textColor\n    }, font), {}, {\n      writingDirection: writingDirection\n    }), style]\n  }));\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    textAlign: 'left'\n  }\n});\nexport default withTheme(StyledText);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAGA,OAAOC,IAAP;AACA,SAASC,SAAT;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAqD;EAAA,IAAlDC,KAAkD,QAAlDA,KAAkD;EAAA,IAA3CC,KAA2C,QAA3CA,KAA2C;EAAA,IAApCC,MAAoC,QAApCA,MAAoC;EAAA,IAA5BC,KAA4B,QAA5BA,KAA4B;EAAA,IAAlBC,IAAkB;;EACtE,IAAMC,SAAS,GAAGV,KAAK,CAACK,KAAK,CAACM,MAANN,CAAaO,IAAd,CAALZ,CAAyBM,KAAzBN,CAA+BM,KAA/BN,EAAsCa,GAAtCb,GAA4Cc,MAA5Cd,EAAlB;EACA,IAAMe,IAAI,GAAGV,KAAK,CAACW,KAANX,CAAYE,MAAZF,CAAb;EACA,IAAMY,gBAAgB,GAAGC,WAAW,CAACC,KAAZD,GAAoB,KAApBA,GAA4B,KAArD;EAEA,OACEjB,oBAACC,IAAD,eACMO,IADN;IAEED,KAAK,EAAE,CACLY,MAAM,CAACR,IADF;MAEHZ,KAAK,EAAEU;IAFJ,GAEkBK,IAFlB;MAEwBE;IAFxB,IAGLT,KAHK;EAFT,GADF;AALF;;AAiBA,IAAMY,MAAM,GAAGC,UAAU,CAACC,MAAXD,CAAkB;EAC/BT,IAAI,EAAE;IACJW,SAAS,EAAE;EADP;AADyB,CAAlBF,CAAf;AAMA,eAAelB,SAAS,CAACC,UAAD,CAAxB","names":["color","React","Text","withTheme","StyledText","theme","alpha","family","style","rest","textColor","colors","text","rgb","string","font","fonts","writingDirection","I18nManager","isRTL","styles","StyleSheet","create","textAlign"],"sources":["StyledText.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { I18nManager, StyleProp, TextStyle, StyleSheet } from 'react-native';\n\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentProps<typeof Text> & {\n  alpha: number;\n  family: 'regular' | 'medium' | 'light' | 'thin';\n  style?: StyleProp<TextStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst StyledText = ({ theme, alpha, family, style, ...rest }: Props) => {\n  const textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n  const font = theme.fonts[family];\n  const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n  return (\n    <Text\n      {...rest}\n      style={[\n        styles.text,\n        { color: textColor, ...font, writingDirection },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    textAlign: 'left',\n  },\n});\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"module"}