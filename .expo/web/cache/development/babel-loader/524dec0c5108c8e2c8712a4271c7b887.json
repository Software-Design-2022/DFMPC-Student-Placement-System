{
  "ast": null,
  "code": "var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nexport default {\n  encode: function encode(input) {\n    var output = \"\";\n    var chr1,\n        chr2,\n        chr3 = \"\";\n    var enc1,\n        enc2,\n        enc3,\n        enc4 = \"\";\n    var i = 0;\n\n    do {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n      chr1 = chr2 = chr3 = \"\";\n      enc1 = enc2 = enc3 = enc4 = \"\";\n    } while (i < input.length);\n\n    return output;\n  },\n  decode: function decode(input) {\n    var output = \"\";\n    var chr1,\n        chr2,\n        chr3 = \"\";\n    var enc1,\n        enc2,\n        enc3,\n        enc4 = \"\";\n    var i = 0;\n    var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n\n    if (base64test.exec(input)) {\n      window.alert(\"There were invalid base64 characters in the input text.\\n\" + \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" + \"Expect errors in decoding.\");\n    }\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    do {\n      enc1 = keyStr.indexOf(input.charAt(i++));\n      enc2 = keyStr.indexOf(input.charAt(i++));\n      enc3 = keyStr.indexOf(input.charAt(i++));\n      enc4 = keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output = output + String.fromCharCode(chr1);\n\n      if (enc3 != 64) {\n        output = output + String.fromCharCode(chr2);\n      }\n\n      if (enc4 != 64) {\n        output = output + String.fromCharCode(chr3);\n      }\n\n      chr1 = chr2 = chr3 = \"\";\n      enc1 = enc2 = enc3 = enc4 = \"\";\n    } while (i < input.length);\n\n    return output;\n  }\n};",
  "map": {
    "version": 3,
    "names": [
      "keyStr",
      "encode",
      "input",
      "output",
      "chr1",
      "chr2",
      "chr3",
      "enc1",
      "enc2",
      "enc3",
      "enc4",
      "i",
      "charCodeAt",
      "isNaN",
      "charAt",
      "length",
      "decode",
      "base64test",
      "exec",
      "window",
      "alert",
      "replace",
      "indexOf",
      "String",
      "fromCharCode"
    ],
    "sources": [
      "C:/Users/nokno/OneDrive/Documents/GitHub/DFMPC-Student-Placement-System/node_modules/react-native-base64/base64.js"
    ],
    "sourcesContent": [
      "let keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\nexport default {\r\n    encode: function(input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            output = output +\r\n                keyStr.charAt(enc1) +\r\n                keyStr.charAt(enc2) +\r\n                keyStr.charAt(enc3) +\r\n                keyStr.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    },\r\n\r\n    decode: function(input) {\r\n        var output = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\r\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\r\n        if (base64test.exec(input)) {\r\n            window.alert(\"There were invalid base64 characters in the input text.\\n\" +\r\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\\n\" +\r\n                \"Expect errors in decoding.\");\r\n        }\r\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n        do {\r\n            enc1 = keyStr.indexOf(input.charAt(i++));\r\n            enc2 = keyStr.indexOf(input.charAt(i++));\r\n            enc3 = keyStr.indexOf(input.charAt(i++));\r\n            enc4 = keyStr.indexOf(input.charAt(i++));\r\n\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n            output = output + String.fromCharCode(chr1);\r\n\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n\r\n        } while (i < input.length);\r\n\r\n        return output;\r\n    }\r\n}\r\n"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "module"
}
