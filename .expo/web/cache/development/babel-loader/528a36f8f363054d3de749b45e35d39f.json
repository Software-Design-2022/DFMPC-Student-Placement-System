{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tabBar\", \"state\", \"navigation\", \"descriptors\", \"sceneContainerStyle\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { CommonActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport MaterialTopTabBar from \"./MaterialTopTabBar\";\nexport default function MaterialTopTabView(_ref) {\n  var _ref$tabBar = _ref.tabBar,\n    tabBar = _ref$tabBar === void 0 ? function (props) {\n      return React.createElement(MaterialTopTabBar, props);\n    } : _ref$tabBar,\n    state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    sceneContainerStyle = _ref.sceneContainerStyle,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var renderTabBar = function renderTabBar(props) {\n    return tabBar(_objectSpread(_objectSpread({}, props), {}, {\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  return React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: function onIndexChange(index) {\n      return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.navigate({\n        name: state.routes[index].name,\n        merge: true\n      })), {}, {\n        target: state.key\n      }));\n    },\n    renderScene: function renderScene(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].render();\n    },\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderLazyPlaceholder: function renderLazyPlaceholder(_ref3) {\n      var _descriptors$route$ke, _descriptors$route$ke2, _descriptors$route$ke3;\n      var route = _ref3.route;\n      return (_descriptors$route$ke = (_descriptors$route$ke2 = (_descriptors$route$ke3 = descriptors[route.key].options).lazyPlaceholder) === null || _descriptors$route$ke2 === void 0 ? void 0 : _descriptors$route$ke2.call(_descriptors$route$ke3)) !== null && _descriptors$route$ke !== void 0 ? _descriptors$route$ke : null;\n    },\n    lazy: function lazy(_ref4) {\n      var route = _ref4.route;\n      return descriptors[route.key].options.lazy === true;\n    },\n    lazyPreloadDistance: focusedOptions.lazyPreloadDistance,\n    swipeEnabled: focusedOptions.swipeEnabled,\n    onSwipeStart: function onSwipeStart() {\n      return navigation.emit({\n        type: 'swipeStart'\n      });\n    },\n    onSwipeEnd: function onSwipeEnd() {\n      return navigation.emit({\n        type: 'swipeEnd'\n      });\n    },\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  }));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SACEA,aADF,EAKEC,QALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAA6BC,OAA7B,QAA4C,uBAA5C;AAQA,OAAOC,iBAAP;AAQA,eAAe,SAASC,kBAAT,OAOL;EAAA,uBANRC,MAAM;IAANA,MAAM,4BAAIC,eAAD;MAAA,OAAmCL,oBAACE,iBAAD,EAAuBG,KAAvB,CADH;IAAA;IAEzCC,KAFyC,GAOjCC,KALRD,KAFyC;IAGzCE,UAHyC,GAOjCD,KAJRC,UAHyC;IAIzCC,WAJyC,GAOjCF,KAHRE,WAJyC;IAKzCC,mBALyC,GAOjCH,KAFRG,mBALyC;IAMtCC,gCACKJ;EACR,gBAAmBR,QAAQ,EAA3B;IAAQa;EAER,IAAMC,YAAY,GAAIR,SAAhBQ,YAAY,CAAIR,KAAD,EAA+B;IAClD,OAAOD,MAAM,iCACRC,KADS;MAEZC,KAAK,EAAEA,KAFK;MAGZE,UAAU,EAAEA,UAHA;MAIZC,WAAW,EAAEA;IAAAA,GAJf;EAMD,CAPD;EASA,IAAMK,cAAc,GAAGL,WAAW,CAACH,KAAK,CAACS,MAAN,CAAaT,KAAK,CAACU,KAAnB,EAA0BC,GAA3B,CAAX,CAA2CC,OAAlE;EAEA,OACElB,oBAACC,OAAD,eACMU,IADN;IAEEQ,aAAa,EAAGH,4BAAD;MAAA,OACbR,UAAU,CAACY,QAAX,iCACKtB,aAAa,CAACuB,QAAd,CAAuB;QACxBC,IAAI,EAAEhB,KAAK,CAACS,MAAN,CAAaC,KAAb,EAAoBM,IADF;QAExBC,KAAK,EAAE;MAFiB,CAAvB,CADe;QAKlBC,MAAM,EAAElB,KAAK,CAACW;MAAAA,GARpB;IAAA;IAWEQ,WAAW,EAAE;MAAA,IAAGC,QAAHC,MAAGD;MAAH,OAAejB,WAAW,CAACiB,KAAK,CAACT,GAAP,CAAX,CAAuBW,MAAvB,EAAf;IAAA,CAXf;IAYEC,eAAe,EAAEvB,KAZnB;IAaEO,YAAY,EAAEA,YAbhB;IAcEiB,qBAAqB,EAAE;MAAA;MAAA,IAAGJ,QAAHK,MAAGL;MAAH,0DACrB,qCAAW,CAACA,KAAK,CAACT,GAAP,CAAX,CAAuBC,OAAvB,EAA+Bc,eADV,2DACrBC,mDADqB,yEACiC,IADjC;IAAA,CAdzB;IAiBEC,IAAI,EAAE;MAAA,IAAGR,QAAHS,MAAGT;MAAH,OAAejB,WAAW,CAACiB,KAAK,CAACT,GAAP,CAAX,CAAuBC,OAAvB,CAA+BgB,IAA/B,KAAwC,IAAvD;IAAA,CAjBR;IAkBEE,mBAAmB,EAAEtB,cAAc,CAACsB,mBAlBtC;IAmBEC,YAAY,EAAEvB,cAAc,CAACuB,YAnB/B;IAoBEC,YAAY,EAAE;MAAA,OAAM9B,UAAU,CAAC+B,IAAX,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB,CApBtB;IAAA;IAqBEC,UAAU,EAAE;MAAA,OAAMjC,UAAU,CAAC+B,IAAX,CAAgB;QAAEC,IAAI,EAAE;MAAR,CAAhB,CArBpB;IAAA;IAsBE9B,mBAAmB,EAAE,CACnB;MAAEgC,eAAe,EAAE9B,MAAM,CAAC+B;IAA1B,CADmB,EAEnBjC,mBAFmB;EAtBvB,GADF;AA6BD","names":["CommonActions","useTheme","React","TabView","MaterialTopTabBar","MaterialTopTabView","tabBar","props","state","_ref","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","focusedOptions","routes","index","key","options","onIndexChange","dispatch","navigate","name","merge","target","renderScene","route","_ref2","render","navigationState","renderLazyPlaceholder","_ref3","lazyPlaceholder","_descriptors$route$ke2","lazy","_ref4","lazyPreloadDistance","swipeEnabled","onSwipeStart","emit","type","onSwipeEnd","backgroundColor","background"],"sources":["MaterialTopTabView.tsx"],"sourcesContent":["import {\n  CommonActions,\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { SceneRendererProps, TabView } from 'react-native-tab-view';\n\nimport type {\n  MaterialTopTabBarProps,\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n} from '../types';\nimport MaterialTopTabBar from './MaterialTopTabBar';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n};\n\nexport default function MaterialTopTabView({\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  return (\n    <TabView<Route<string>>\n      {...rest}\n      onIndexChange={(index) =>\n        navigation.dispatch({\n          ...CommonActions.navigate({\n            name: state.routes[index].name,\n            merge: true,\n          }),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      navigationState={state}\n      renderTabBar={renderTabBar}\n      renderLazyPlaceholder={({ route }) =>\n        descriptors[route.key].options.lazyPlaceholder?.() ?? null\n      }\n      lazy={({ route }) => descriptors[route.key].options.lazy === true}\n      lazyPreloadDistance={focusedOptions.lazyPreloadDistance}\n      swipeEnabled={focusedOptions.swipeEnabled}\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n      sceneContainerStyle={[\n        { backgroundColor: colors.background },\n        sceneContainerStyle,\n      ]}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}