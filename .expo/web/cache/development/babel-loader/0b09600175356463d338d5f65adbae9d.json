{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar Geolocation = {\n  setRNConfiguration: function setRNConfiguration() {\n    throw new Error('Method not supported by browser');\n  },\n  requestAuthorization: function requestAuthorization() {\n    return _regeneratorRuntime.async(function requestAuthorization$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", Promise.reject('Method not supported by browser'));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getCurrentPosition: function getCurrentPosition(success, error, options) {\n    if (!success) {\n      throw new Error('Must provide a success callback');\n    } else if (!navigator || !navigator.geolocation) {\n      throw new Error('Navigator is not defined');\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  },\n  watchPosition: function watchPosition(success, error, options) {\n    if (!success) {\n      throw new Error('Must provide a success callback');\n    } else if (!navigator || !navigator.geolocation) {\n      throw new Error('Navigator is not defined');\n    }\n\n    return navigator.geolocation.watchPosition(success, error, options);\n  },\n  clearWatch: function clearWatch(watchID) {\n    if (!navigator || !navigator.geolocation) {\n      throw new Error('Navigator is not defined');\n    }\n\n    navigator.geolocation.clearWatch(watchID);\n  },\n  stopObserving: function stopObserving() {\n    throw new Error('Method not supported by browser');\n  }\n};\nexport default Geolocation;","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/node_modules/react-native-geolocation-service/js/Geolocation.js"],"names":["Geolocation","setRNConfiguration","Error","requestAuthorization","Promise","reject","getCurrentPosition","success","error","options","navigator","geolocation","watchPosition","clearWatch","watchID","stopObserving"],"mappings":";AAGA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,kBAAkB,EAAE,8BAAY;AAC9B,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD,GAHiB;AAKlBC,EAAAA,oBAAoB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CACbC,OAAO,CAACC,MAAR,CAAe,iCAAf,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GALJ;AASlBC,EAAAA,kBAAkB,EAAE,4BAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACrD,QAAI,CAACF,OAAL,EAAc;AACZ,YAAM,IAAIL,KAAJ,CAAU,iCAAV,CAAN;AACD,KAFD,MAEO,IAAI,CAACQ,SAAD,IAAc,CAACA,SAAS,CAACC,WAA7B,EAA0C;AAC/C,YAAM,IAAIT,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAEDQ,IAAAA,SAAS,CAACC,WAAV,CAAsBL,kBAAtB,CAAyCC,OAAzC,EAAkDC,KAAlD,EAAyDC,OAAzD;AACD,GAjBiB;AAmBlBG,EAAAA,aAAa,EAAE,uBAAUL,OAAV,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AAChD,QAAI,CAACF,OAAL,EAAc;AACZ,YAAM,IAAIL,KAAJ,CAAU,iCAAV,CAAN;AACD,KAFD,MAEO,IAAI,CAACQ,SAAD,IAAc,CAACA,SAAS,CAACC,WAA7B,EAA0C;AAC/C,YAAM,IAAIT,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,WAAOQ,SAAS,CAACC,WAAV,CAAsBC,aAAtB,CAAoCL,OAApC,EAA6CC,KAA7C,EAAoDC,OAApD,CAAP;AACD,GA3BiB;AA6BlBI,EAAAA,UAAU,EAAE,oBAAUC,OAAV,EAAmB;AAC7B,QAAI,CAACJ,SAAD,IAAc,CAACA,SAAS,CAACC,WAA7B,EAA0C;AACxC,YAAM,IAAIT,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAEDQ,IAAAA,SAAS,CAACC,WAAV,CAAsBE,UAAtB,CAAiCC,OAAjC;AACD,GAnCiB;AAqClBC,EAAAA,aAAa,EAAE,yBAAY;AACzB,UAAM,IAAIb,KAAJ,CAAU,iCAAV,CAAN;AACD;AAvCiB,CAApB;AA0CA,eAAeF,WAAf","sourcesContent":["/* eslint-disable no-undef */\n/* eslint-disable func-names */\n/* eslint-disable object-shorthand */\nconst Geolocation = {\n  setRNConfiguration: function () {\n    throw new Error('Method not supported by browser');\n  },\n\n  requestAuthorization: async function () {\n    return Promise.reject('Method not supported by browser');\n  },\n\n  getCurrentPosition: function (success, error, options) {\n    if (!success) {\n      throw new Error('Must provide a success callback');\n    } else if (!navigator || !navigator.geolocation) {\n      throw new Error('Navigator is not defined');\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  },\n\n  watchPosition: function (success, error, options) {\n    if (!success) {\n      throw new Error('Must provide a success callback');\n    } else if (!navigator || !navigator.geolocation) {\n      throw new Error('Navigator is not defined');\n    }\n\n    return navigator.geolocation.watchPosition(success, error, options);\n  },\n\n  clearWatch: function (watchID) {\n    if (!navigator || !navigator.geolocation) {\n      throw new Error('Navigator is not defined');\n    }\n\n    navigator.geolocation.clearWatch(watchID);\n  },\n\n  stopObserving: function () {\n    throw new Error('Method not supported by browser');\n  }\n};\n\nexport default Geolocation;\n"]},"metadata":{},"sourceType":"module"}