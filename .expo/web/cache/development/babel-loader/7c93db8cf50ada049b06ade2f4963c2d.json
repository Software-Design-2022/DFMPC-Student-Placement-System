{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nvar INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nvar REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\nvar _getFallbackInstallationId = function getFallbackInstallationId() {\n  var sessionInstallationId = uuidv4();\n\n  _getFallbackInstallationId = function getFallbackInstallationId() {\n    return sessionInstallationId;\n  };\n};\n\nexport default {\n  getInstallationIdAsync: function getInstallationIdAsync() {\n    var installationId;\n    return _regeneratorRuntime.async(function getInstallationIdAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n\n              if (!installationId || typeof installationId !== 'string') {\n                installationId = uuidv4();\n                localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n              }\n            } catch (error) {\n              installationId = _getFallbackInstallationId();\n            }\n\n            return _context.abrupt(\"return\", installationId);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  getRegistrationInfoAsync: function getRegistrationInfoAsync() {\n    return _regeneratorRuntime.async(function getRegistrationInfoAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", localStorage.getItem(REGISTRATION_INFO_KEY));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  setRegistrationInfoAsync: function setRegistrationInfoAsync(registrationInfo) {\n    return _regeneratorRuntime.async(function setRegistrationInfoAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n\n            if (registrationInfo) {\n              localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n            } else {\n              localStorage.removeItem(REGISTRATION_INFO_KEY);\n            }\n\n            _context3.next = 7;\n            break;\n\n          case 4:\n            _context3.prev = 4;\n            _context3.t0 = _context3[\"catch\"](0);\n            throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', \"Could not modify localStorage to persist auto-registration information: \" + _context3.t0);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 4]], Promise);\n  },\n  addListener: function addListener() {},\n  removeListeners: function removeListeners() {}\n};","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAIA,IAAMC,mBAAmB,GAAG,oCAA5B;AACA,IAAMC,qBAAqB,GAAG,sCAA9B;;AAGA,IAAIC,0BAAyB,GAAG,qCAAK;EACnC,IAAMC,qBAAqB,GAAGJ,MAAM,EAApC;;EACAG,0BAAyB,GAAG;IAAA,OAAMC,qBAAN;EAAA,CAA5B;AACD,CAHD;;AAKA,eAAe;EACbC,sBAAsB,EAAE;IAAA;IAAA;MAAA;QAAA;UAAA;YAGtB,IAAI;cACFC,cAAc,GAAGC,YAAY,CAACC,OAAb,CAAqBP,mBAArB,CAAjB;;cACA,IAAI,CAACK,cAAD,IAAmB,OAAOA,cAAP,KAA0B,QAAjD,EAA2D;gBACzDA,cAAc,GAAGN,MAAM,EAAvB;gBACAO,YAAY,CAACE,OAAb,CAAqBR,mBAArB,EAA0CK,cAA1C;cACD;YACF,CAND,CAME,OAAOI,KAAP,EAAc;cACdJ,cAAc,GAAGH,0BAAyB,EAA1C;YACD;;YAXqB,iCAafG,cAbe;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CADX;EAgBbK,wBAAwB,EAAE;IAAA;MAAA;QAAA;UAAA;YAAA,kCACjBJ,YAAY,CAACC,OAAb,CAAqBN,qBAArB,CADiB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAhBb;EAmBbU,wBAAwB,EAAE,kCAAOC,gBAAP;IAAA;MAAA;QAAA;UAAA;YAAA;;YAEtB,IAAIA,gBAAJ,EAAsB;cACpBN,YAAY,CAACE,OAAb,CAAqBP,qBAArB,EAA4CW,gBAA5C;YACD,CAFD,MAEO;cACLN,YAAY,CAACO,UAAb,CAAwBZ,qBAAxB;YACD;;YANqB;YAAA;;UAAA;YAAA;YAAA;YAAA,MAQhB,IAAIJ,UAAJ,CACJ,iCADI,4FARgB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAnBb;EAkCbiB,WAAW,EAAE,uBAAK,CAAG,CAlCR;EAmCbC,eAAe,EAAE,2BAAK,CAAG;AAnCZ,CAAf","names":["CodedError","v4","uuidv4","INSTALLATION_ID_KEY","REGISTRATION_INFO_KEY","getFallbackInstallationId","sessionInstallationId","getInstallationIdAsync","installationId","localStorage","getItem","setItem","error","getRegistrationInfoAsync","setRegistrationInfoAsync","registrationInfo","removeItem","addListener","removeListeners"],"sourceRoot":"","sources":["../src/ServerRegistrationModule.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuidv4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"]},"metadata":{},"sourceType":"module"}