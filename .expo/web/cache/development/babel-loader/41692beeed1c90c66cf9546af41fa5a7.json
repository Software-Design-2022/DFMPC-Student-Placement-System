{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { EventEmitter, CodedError, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsHandlerModule from \"./NotificationsHandlerModule\";\nexport var NotificationTimeoutError = function (_CodedError) {\n  _inherits(NotificationTimeoutError, _CodedError);\n\n  var _super = _createSuper(NotificationTimeoutError);\n\n  function NotificationTimeoutError(notificationId, notification) {\n    var _this;\n\n    _classCallCheck(this, NotificationTimeoutError);\n\n    _this = _super.call(this, 'ERR_NOTIFICATION_TIMEOUT', \"Notification handling timed out for ID \" + notificationId + \".\");\n    _this.info = {\n      id: notificationId,\n      notification: notification\n    };\n    return _this;\n  }\n\n  return _createClass(NotificationTimeoutError);\n}(CodedError);\nvar notificationEmitter = new EventEmitter(NotificationsHandlerModule);\nvar handleNotificationEventName = 'onHandleNotification';\nvar handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\nvar handleSubscription = null;\nvar handleTimeoutSubscription = null;\nexport function setNotificationHandler(handler) {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener(handleNotificationEventName, function _callee(_ref) {\n      var id, notification, behavior;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = _ref.id, notification = _ref.notification;\n\n              if (NotificationsHandlerModule.handleNotificationAsync) {\n                _context.next = 4;\n                break;\n              }\n\n              handler.handleError == null ? void 0 : handler.handleError(id, new UnavailabilityError('Notifications', 'handleNotificationAsync'));\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _context.prev = 4;\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(handler.handleNotification(notification));\n\n            case 7:\n              behavior = _context.sent;\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(NotificationsHandlerModule.handleNotificationAsync(id, behavior));\n\n            case 10:\n              handler.handleSuccess == null ? void 0 : handler.handleSuccess(id);\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](4);\n              handler.handleError == null ? void 0 : handler.handleError(id, _context.t0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[4, 13]], Promise);\n    });\n    handleTimeoutSubscription = notificationEmitter.addListener(handleNotificationTimeoutEventName, function (_ref2) {\n      var id = _ref2.id,\n          notification = _ref2.notification;\n      return handler.handleError == null ? void 0 : handler.handleError(id, new NotificationTimeoutError(id, notification));\n    });\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,SAASA,YAAT,EAAqCC,UAArC,EAAiDC,mBAAjD,QAA4E,mBAA5E;AAGA,OAAOC,0BAAP;AAEA,WAAaC,wBAAb;EAAA;;EAAA;;EAEE,kCAAYC,cAAZ,EAAoCC,YAApC,EAA8D;IAAA;;IAAA;;IAC5D,0BAAM,0BAAN,8CAA4ED,cAA5E;IACA,MAAKE,IAAL,GAAY;MAAEC,EAAE,EAAEH,cAAN;MAAsBC,YAAY,EAAZA;IAAtB,CAAZ;IAF4D;EAG7D;;EALH;AAAA,EAA8CL,UAA9C;AAwBA,IAAMQ,mBAAmB,GAAG,IAAIT,YAAJ,CAAiBG,0BAAjB,CAA5B;AAEA,IAAMO,2BAA2B,GAAG,sBAApC;AACA,IAAMC,kCAAkC,GAAG,6BAA3C;AAEA,IAAIC,kBAAkB,GAAwB,IAA9C;AACA,IAAIC,yBAAyB,GAAwB,IAArD;AAEA,OAAM,SAAUC,sBAAV,CAAiCC,OAAjC,EAAoE;EACxE,IAAIH,kBAAJ,EAAwB;IACtBA,kBAAkB,CAACI,MAAnB;IACAJ,kBAAkB,GAAG,IAArB;EACD;;EACD,IAAIC,yBAAJ,EAA+B;IAC7BA,yBAAyB,CAACG,MAA1B;IACAH,yBAAyB,GAAG,IAA5B;EACD;;EAED,IAAIE,OAAJ,EAAa;IACXH,kBAAkB,GAAGH,mBAAmB,CAACQ,WAApB,CACnBP,2BADmB,EAEnB;MAAA;MAAA;QAAA;UAAA;YAAA;cAASF,EAAT,QAASA,EAAT,EAAaF,YAAb,QAAaA,YAAb;;cAAA,IACOH,0BAA0B,CAACe,uBADlC;gBAAA;gBAAA;cAAA;;cAEIH,OAAO,CAACI,WAAR,2BAAO,CAACA,WAAR,CACEX,EADF,EAEE,IAAIN,mBAAJ,CAAwB,eAAxB,EAAyC,yBAAzC,CAFF;cAFJ;;YAAA;cAAA;cAAA;cAAA,iCAU2Ba,OAAO,CAACK,kBAAR,CAA2Bd,YAA3B,CAV3B;;YAAA;cAUUe,QAVV;cAAA;cAAA,iCAWUlB,0BAA0B,CAACe,uBAA3B,CAAmDV,EAAnD,EAAuDa,QAAvD,CAXV;;YAAA;cAYIN,OAAO,CAACO,aAAR,2BAAO,CAACA,aAAR,CAAwBd,EAAxB;cAZJ;cAAA;;YAAA;cAAA;cAAA;cAcIO,OAAO,CAACI,WAAR,2BAAO,CAACA,WAAR,CAAsBX,EAAtB;;YAdJ;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAFmB,CAArB;IAqBAK,yBAAyB,GAAGJ,mBAAmB,CAACQ,WAApB,CAC1BN,kCAD0B,EAE1B;MAAA,IAAGH,EAAH,SAAGA,EAAH;MAAA,IAAOF,YAAP,SAAOA,YAAP;MAAA,OACES,OAAO,CAACI,WADV,oBACEJ,OAAO,CAACI,WAAR,CAAsBX,EAAtB,EAA0B,IAAIJ,wBAAJ,CAA6BI,EAA7B,EAAiCF,YAAjC,CAA1B,CADF;IAAA,CAF0B,CAA5B;EAKD;AACF","names":["EventEmitter","CodedError","UnavailabilityError","NotificationsHandlerModule","NotificationTimeoutError","notificationId","notification","info","id","notificationEmitter","handleNotificationEventName","handleNotificationTimeoutEventName","handleSubscription","handleTimeoutSubscription","setNotificationHandler","handler","remove","addListener","handleNotificationAsync","handleError","handleNotification","behavior","handleSuccess"],"sourceRoot":"","sources":["../src/NotificationsHandler.ts"],"sourcesContent":["import { EventEmitter, Subscription, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationBehavior } from './Notifications.types';\nimport NotificationsHandlerModule from './NotificationsHandlerModule';\n\nexport class NotificationTimeoutError extends CodedError {\n  info: { notification: Notification; id: string };\n  constructor(notificationId: string, notification: Notification) {\n    super('ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`);\n    this.info = { id: notificationId, notification };\n  }\n}\n\nexport type NotificationHandlingError = NotificationTimeoutError | Error;\n\nexport interface NotificationHandler {\n  handleNotification: (notification: Notification) => Promise<NotificationBehavior>;\n  handleSuccess?: (notificationId: string) => void;\n  handleError?: (notificationId: string, error: NotificationHandlingError) => void;\n}\n\ntype HandleNotificationEvent = {\n  id: string;\n  notification: Notification;\n};\n\ntype HandleNotificationTimeoutEvent = HandleNotificationEvent;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new EventEmitter(NotificationsHandlerModule);\n\nconst handleNotificationEventName = 'onHandleNotification';\nconst handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\n\nlet handleSubscription: Subscription | null = null;\nlet handleTimeoutSubscription: Subscription | null = null;\n\nexport function setNotificationHandler(handler: NotificationHandler | null): void {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener<HandleNotificationEvent>(\n      handleNotificationEventName,\n      async ({ id, notification }) => {\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError?.(\n            id,\n            new UnavailabilityError('Notifications', 'handleNotificationAsync')\n          );\n          return;\n        }\n\n        try {\n          const behavior = await handler.handleNotification(notification);\n          await NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess?.(id);\n        } catch (error) {\n          handler.handleError?.(id, error);\n        }\n      }\n    );\n\n    handleTimeoutSubscription = notificationEmitter.addListener<HandleNotificationTimeoutEvent>(\n      handleNotificationTimeoutEventName,\n      ({ id, notification }) =>\n        handler.handleError?.(id, new NotificationTimeoutError(id, notification))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}