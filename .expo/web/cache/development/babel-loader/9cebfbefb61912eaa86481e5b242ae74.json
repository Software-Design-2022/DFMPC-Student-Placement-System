{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Device from \"expo-device\";\nimport * as Notifications from \"expo-notifications\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport \"../global\";\nimport { firebase } from \"../firebase\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport { createTopBar } from \"../HelperFunctions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar authname = authName;\nvar authlastName = authLastName;\nvar latitude = 20;\nvar longitude = 30;\nvar msg = {\n  title: \"Message\",\n  body: \"Emergency Message Has Been Sent\",\n  data: {\n    data: \"goes here\"\n  }\n};\n\nvar sendToFirestore = function sendToFirestore(text, msg) {\n  firebase.firestore().collection(\"panic_button\").add({\n    Location: [-latitude, longitude],\n    query: text,\n    student_Number: \"123456\",\n    user_FirstName: authname,\n    user_LastName: authlastName\n  }).then(function () {\n    Alert.alert(\"Emergency Message Saved\");\n    schedulePushNotification(msg);\n    var today = new Date();\n    var hours = (today.getHours() < 10 ? \"0\" : \"\") + today.getHours();\n    var minutes = (today.getMinutes() < 10 ? \"0\" : \"\") + today.getMinutes();\n    var seconds = (today.getSeconds() < 10 ? \"0\" : \"\") + today.getSeconds();\n    notificationList.push({\n      id: 10,\n      heading: \"Emergency Page\",\n      time: hours + \":\" + minutes + \":\" + seconds,\n      date: today.getDay() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\n      day: \" \",\n      body: \"You sent an emergency message at \" + hours + \":\" + minutes + \":\" + seconds\n    });\n  });\n};\n\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function EmergencyPage() {\n  var _this = this;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var navigation = useNavigation();\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      expoPushToken = _useState4[0],\n      setExpoPushToken = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      notification = _useState6[0],\n      setNotification = _useState6[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  var modalVisible = false;\n  useEffect(function () {\n    var cancel = false;\n    registerForPushNotificationsAsync().then(function (token) {\n      if (cancel) return;\n      setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      cancel = true;\n    };\n  }, []);\n  LogBox.ignoreLogs([\"Setting a timer\"]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: this.state.modalVisible,\n      onRequestClose: function onRequestClose() {\n        Alert.alert(\"Modal has been closed.\");\n\n        _this.setState({\n          modalVisible: false\n        });\n      },\n      children: _jsx(View, {\n        style: styles.centeredView,\n        children: _jsx(View, {\n          style: {\n            top: 50,\n            height: 400,\n            width: width / 1.2,\n            backgroundColor: \"white\",\n            borderRadius: 10,\n            borderWidth: 4\n          },\n          children: _jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              left: 20,\n              top: 42\n            },\n            children: [_jsx(Pressable, {\n              style: [styles.button, styles.buttonClose, {\n                width: width / 3,\n                left: 10,\n                bottom: 30\n              }],\n              onPress: function onPress() {\n                return _this.setState({\n                  modalVisible: false\n                });\n              },\n              children: _jsx(Text, {\n                style: [styles.textStyle],\n                children: \"Done\"\n              })\n            }), _jsx(Pressable, {\n              style: [styles.button, styles.buttonClose, {\n                width: width / 3,\n                left: 20,\n                bottom: 30,\n                backgroundColor: \"rgba(28,56,107,1)\"\n              }],\n              onPress: function onPress() {\n                return sendToFirestore(_this.state);\n              },\n              children: _jsx(Text, {\n                style: [styles.textStyle],\n                children: \"Add\"\n              })\n            })]\n          })\n        })\n      })\n    }), _jsx(View, {\n      style: {\n        position: \"absolute\"\n      },\n      children: _jsx(Image, {\n        resizeMode: \"contain\",\n        source: require(\"./images/background.png\"),\n        blurRadius: 0\n      })\n    }), _jsxs(View, {\n      style: {\n        flex: 1\n      },\n      children: [createTopBar(10, navigation), _jsx(View, {\n        style: {\n          padding: 10,\n          marginBottom: 20,\n          top: 60\n        },\n        children: _jsx(TextInput, {\n          style: styles.message,\n          placeholder: \"Type emergency message here!\",\n          onChangeText: function onChangeText(newText) {\n            return setText(newText);\n          },\n          defaultValue: text\n        })\n      }), _jsx(View, {\n        style: {\n          margin: 20,\n          top: 60\n        },\n        children: _jsx(Button, {\n          title: \"Send Emergency message\",\n          color: \"#415A77\",\n          onPress: function onPress() {\n            return sendToFirestore(text, msg);\n          }\n        })\n      })]\n    })]\n  });\n}\n\nfunction schedulePushNotification(msg) {\n  return _regeneratorRuntime.async(function schedulePushNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.scheduleNotificationAsync({\n            content: {\n              title: msg.title,\n              body: msg.body,\n              data: msg.data\n            },\n            trigger: {\n              seconds: 1\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!Device.isDevice) {\n            _context3.next = 18;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context3.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== \"granted\")) {\n            _context3.next = 12;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context3.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== \"granted\")) {\n            _context3.next = 15;\n            break;\n          }\n\n          alert(\"Failed to get push token for push notification!\");\n          return _context3.abrupt(\"return\");\n\n        case 15:\n          _context3.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context3.sent.data;\n\n        case 18:\n          if (!(Platform.OS === \"android\")) {\n            _context3.next = 21;\n            break;\n          }\n\n          _context3.next = 21;\n          return _regeneratorRuntime.awrap(Notifications.setNotificationChannelAsync(\"default\", {\n            name: \"default\",\n            importance: Notifications.AndroidImportance.MAX,\n            vibrationPattern: [0, 250, 250, 250],\n            lightColor: \"#FF231F7C\"\n          }));\n\n        case 21:\n          return _context3.abrupt(\"return\", token);\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"rgba(192,192,192,0.3)\"\n  },\n  message: {\n    marginTop: 50,\n    marginBottom: 20,\n    marginRight: 5,\n    marginLeft: 5,\n    height: 200,\n    textAlign: \"center\",\n    borderRadius: 5,\n    backgroundColor: \"white\"\n  },\n  Button1: {\n    backgroundColor: \"rgba(221, 240, 255,0.2)\"\n  },\n  title: {\n    textAlign: \"center\",\n    marginVertical: 8\n  },\n  fixToText: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  map: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0\n  },\n  MapStyle: {\n    flex: 1,\n    margin: 20,\n    marginBottom: 90,\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/callu/Desktop/3rd Year/Software Design Project/App/DFMPC-Student-Placement-System/Screens/EmergencyPage.js"],"names":["Device","Notifications","React","useState","useEffect","useRef","firebase","useNavigation","createTopBar","authname","authName","authlastName","authLastName","latitude","longitude","msg","title","body","data","sendToFirestore","text","firestore","collection","add","Location","query","student_Number","user_FirstName","user_LastName","then","Alert","alert","schedulePushNotification","today","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","notificationList","push","id","heading","time","date","getDay","getMonth","getFullYear","day","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","EmergencyPage","setText","navigation","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","modalVisible","cancel","registerForPushNotificationsAsync","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","LogBox","ignoreLogs","styles","container","state","setState","centeredView","top","height","width","backgroundColor","borderRadius","borderWidth","flexDirection","left","button","buttonClose","bottom","textStyle","position","require","flex","padding","marginBottom","message","newText","margin","scheduleNotificationAsync","content","trigger","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","StyleSheet","create","justifyContent","marginTop","marginRight","marginLeft","textAlign","Button1","marginVertical","fixToText","map","right","MapStyle"],"mappings":"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","sourcesContent":["import * as Device from \"expo-device\";\r\nimport * as Notifications from \"expo-notifications\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  Button,\r\n  SafeAreaView,\r\n  StyleSheet,\r\n  Image,\r\n  TextInput,\r\n  Alert,\r\n  LogBox,\r\n} from \"react-native\";\r\nimport \"../global\";\r\nimport { firebase } from \"../firebase\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\nimport { createTopBar } from \"../HelperFunctions\";\r\n\r\nconst authname = authName;\r\nconst authlastName = authLastName;\r\nconst latitude = 20;\r\nconst longitude = 30;\r\n\r\nconst msg = {\r\n  title: \"Message\",\r\n  body: \"Emergency Message Has Been Sent\",\r\n  data: { data: \"goes here\" },\r\n};\r\n\r\nconst sendToFirestore = (text, msg) => {\r\n  firebase\r\n    .firestore()\r\n    .collection(\"panic_button\")\r\n    .add({\r\n      Location: [-latitude, longitude],\r\n      query: text,\r\n      student_Number: \"123456\",\r\n      user_FirstName: authname,\r\n      user_LastName: authlastName,\r\n    })\r\n    .then(() => {\r\n      Alert.alert(\"Emergency Message Saved\");\r\n      schedulePushNotification(msg);\r\n      let today = new Date();\r\n      let hours = (today.getHours() < 10 ? \"0\" : \"\") + today.getHours();\r\n      let minutes = (today.getMinutes() < 10 ? \"0\" : \"\") + today.getMinutes();\r\n      let seconds = (today.getSeconds() < 10 ? \"0\" : \"\") + today.getSeconds();\r\n      notificationList.push({\r\n        id: 10,\r\n        heading: \"Emergency Page\",\r\n        time: hours + \":\" + minutes + \":\" + seconds,\r\n        date:\r\n          today.getDay() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n        day: \" \",\r\n        body:\r\n          \"You sent an emergency message at \" +\r\n          hours +\r\n          \":\" +\r\n          minutes +\r\n          \":\" +\r\n          seconds,\r\n      });\r\n    });\r\n};\r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: true,\r\n    shouldSetBadge: true,\r\n  }),\r\n});\r\n\r\nexport default function EmergencyPage() {\r\n  const [text, setText] = useState(\"\");\r\n  const navigation = useNavigation();\r\n  const [expoPushToken, setExpoPushToken] = useState(\"\");\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\n  const modalVisible = false;\r\n  useEffect(() => {\r\n    let cancel = false;\r\n    registerForPushNotificationsAsync().then((token) => {\r\n      if (cancel) return;\r\n      setExpoPushToken(token);\r\n    });\r\n\r\n    notificationListener.current =\r\n      Notifications.addNotificationReceivedListener((notification) => {\r\n        setNotification(notification);\r\n      });\r\n\r\n    responseListener.current =\r\n      Notifications.addNotificationResponseReceivedListener((response) => {\r\n        console.log(response);\r\n      });\r\n\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(\r\n        notificationListener.current\r\n      );\r\n      Notifications.removeNotificationSubscription(responseListener.current);\r\n      cancel = true;\r\n    };\r\n  }, []);\r\n  LogBox.ignoreLogs([\"Setting a timer\"]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={this.state.modalVisible}\r\n        onRequestClose={() => {\r\n          Alert.alert(\"Modal has been closed.\");\r\n          this.setState({\r\n            modalVisible: false,\r\n          });\r\n        }}\r\n      >\r\n        <View style={styles.centeredView}>\r\n          <View\r\n            style={{\r\n              top: 50,\r\n              height: 400,\r\n              width: width / 1.2,\r\n              backgroundColor: \"white\",\r\n              borderRadius: 10,\r\n              borderWidth: 4,\r\n            }}\r\n          >\r\n            <View style={{ flexDirection: \"row\", left: 20, top: 42 }}>\r\n              <Pressable\r\n                style={[\r\n                  styles.button,\r\n                  styles.buttonClose,\r\n                  { width: width / 3, left: 10, bottom: 30 },\r\n                ]}\r\n                onPress={() =>\r\n                  this.setState({\r\n                    modalVisible: false,\r\n                  })\r\n                }\r\n              >\r\n                <Text style={[styles.textStyle]}>Done</Text>\r\n              </Pressable>\r\n              <Pressable\r\n                style={[\r\n                  styles.button,\r\n                  styles.buttonClose,\r\n                  {\r\n                    width: width / 3,\r\n                    left: 20,\r\n                    bottom: 30,\r\n                    backgroundColor: \"rgba(28,56,107,1)\",\r\n                  },\r\n                ]}\r\n                onPress={() => sendToFirestore(this.state)}\r\n              >\r\n                <Text style={[styles.textStyle]}>Add</Text>\r\n              </Pressable>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      </Modal>\r\n      <View style={{ position: \"absolute\" }}>\r\n        <Image\r\n          resizeMode=\"contain\"\r\n          source={require(\"./images/background.png\")}\r\n          blurRadius={0}\r\n        />\r\n      </View>\r\n      <View style={{ flex: 1 }}>\r\n        {createTopBar(10, navigation)}\r\n\r\n        <View style={{ padding: 10, marginBottom: 20, top: 60 }}>\r\n          <TextInput\r\n            // user can type their emergency message\r\n            style={styles.message}\r\n            placeholder=\"Type emergency message here!\"\r\n            onChangeText={(newText) => setText(newText)}\r\n            defaultValue={text}\r\n          />\r\n        </View>\r\n\r\n        <View style={{ margin: 20, top: 60 }}>\r\n          <Button\r\n            title=\"Send Emergency message\"\r\n            color=\"#415A77\"\r\n            // when clicked data is send to firestore database\r\n            onPress={() => sendToFirestore(text, msg)}\r\n          />\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nasync function schedulePushNotification(msg) {\r\n  await Notifications.scheduleNotificationAsync({\r\n    content: {\r\n      title: msg.title,\r\n      body: msg.body,\r\n      data: msg.data,\r\n    },\r\n    trigger: { seconds: 1 },\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Device.isDevice) {\r\n    const { status: existingStatus } =\r\n      await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== \"granted\") {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== \"granted\") {\r\n      alert(\"Failed to get push token for push notification!\");\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n  }\r\n\r\n  if (Platform.OS === \"android\") {\r\n    await Notifications.setNotificationChannelAsync(\"default\", {\r\n      name: \"default\",\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: \"#FF231F7C\",\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    top: 0,\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"rgba(192,192,192,0.3)\",\r\n  },\r\n  message: {\r\n    marginTop: 50,\r\n    marginBottom: 20,\r\n    marginRight: 5,\r\n    marginLeft: 5,\r\n    height: 200,\r\n    textAlign: \"center\",\r\n    borderRadius: 5,\r\n    backgroundColor: \"white\",\r\n  },\r\n\r\n  Button1: {\r\n    backgroundColor: \"rgba(221, 240, 255,0.2)\",\r\n  },\r\n\r\n  title: {\r\n    textAlign: \"center\",\r\n    marginVertical: 8,\r\n  },\r\n  fixToText: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  map: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n    bottom: 0,\r\n    right: 0,\r\n  },\r\n  MapStyle: {\r\n    flex: 1,\r\n    margin: 20,\r\n    marginBottom: 90,\r\n\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}